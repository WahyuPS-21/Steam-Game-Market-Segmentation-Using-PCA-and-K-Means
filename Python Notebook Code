{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "collapsed_sections": [
        "aUiNmUXC8oTz",
        "Xrn2r5BBhwOu",
        "fsoGDPFI8nqI",
        "AZ_795ngH-7v",
        "C61NZeitIJWJ",
        "Qwm4B1o7IQSi"
      ],
      "toc_visible": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "# Reading the Data"
      ],
      "metadata": {
        "id": "aUiNmUXC8oTz"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "FPRWpgvG5OrA"
      },
      "outputs": [],
      "source": [
        "import pandas as pd"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df = pd.read_excel(\"Steam_2024_bestRevenue_1500 (1).xlsx\")"
      ],
      "metadata": {
        "id": "VqMKZxN06uEC"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df.head(10)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0XHULAgu8G9v",
        "outputId": "78320446-3009-47ef-f1f9-d801ca8896a2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                              name releaseDate  bulan rilis  copiesSold  \\\n",
              "0                         WWE 2K24  07-03-2024            3      165301   \n",
              "1            EARTH DEFENSE FORCE 6  25-07-2024            7      159806   \n",
              "2        Sins of a Solar Empire II  15-08-2024            8      214192   \n",
              "3                 Legend of Mortal  14-06-2024            6      440998   \n",
              "4  Shin Megami Tensei V: Vengeance  13-06-2024            6      141306   \n",
              "5                         Soulmask  30-05-2024            5      304685   \n",
              "6                    The Universim  22-01-2024            1      328945   \n",
              "7                       Bellwright  23-04-2024            4      280955   \n",
              "8                Night of the Dead  31-05-2024            5      394364   \n",
              "9       Empires of the Undergrowth  07-06-2024            6      408292   \n",
              "\n",
              "   price    revenue  avgPlaytime  reviewScore publisherClass  \\\n",
              "0  99.99  8055097.0    42.365140           71            AAA   \n",
              "1  59.99  7882151.0    29.651061           57          Indie   \n",
              "2  49.99  7815247.0    12.452593           88          Indie   \n",
              "3  19.99  7756399.0    24.797817           76          Indie   \n",
              "4  59.99  7629252.0    34.258496           96             AA   \n",
              "5  29.99  7540563.0    95.697813           79          Indie   \n",
              "6  29.99  7534369.0    16.868531           81          Indie   \n",
              "7  29.99  7481940.0    41.418885           78          Indie   \n",
              "8  29.99  7091792.0    27.597072           79          Indie   \n",
              "9  29.99  6950952.0    38.602124           95             AA   \n",
              "\n",
              "                    publishers  \\\n",
              "0                           2K   \n",
              "1                  D3PUBLISHER   \n",
              "2       Stardock Entertainment   \n",
              "3  Paras Games,Obb Studio Inc.   \n",
              "4                         SEGA   \n",
              "5                Qooland Games   \n",
              "6                      Crytivo   \n",
              "7  Donkey Crew,Snail Games USA   \n",
              "8               Jackto Studios   \n",
              "9      Hooded Horse,Slug Disco   \n",
              "\n",
              "                                          developers  steamId  \n",
              "0                                    Visual Concepts  2315690  \n",
              "1                                            SANDLOT  2291060  \n",
              "2  Ironclad Games Corporation,Stardock Entertainment  1575940  \n",
              "3                                    Obb Studio Inc.  1859910  \n",
              "4                                              ATLUS  1875830  \n",
              "5                                    CampFire Studio  2646460  \n",
              "6                                            Crytivo   352720  \n",
              "7                                        Donkey Crew  1812450  \n",
              "8                                     Jackto Studios  1377380  \n",
              "9                                         Slug Disco   463530  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-ac79216d-8f6a-4b90-9472-ae443521ae91\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>name</th>\n",
              "      <th>releaseDate</th>\n",
              "      <th>bulan rilis</th>\n",
              "      <th>copiesSold</th>\n",
              "      <th>price</th>\n",
              "      <th>revenue</th>\n",
              "      <th>avgPlaytime</th>\n",
              "      <th>reviewScore</th>\n",
              "      <th>publisherClass</th>\n",
              "      <th>publishers</th>\n",
              "      <th>developers</th>\n",
              "      <th>steamId</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>WWE 2K24</td>\n",
              "      <td>07-03-2024</td>\n",
              "      <td>3</td>\n",
              "      <td>165301</td>\n",
              "      <td>99.99</td>\n",
              "      <td>8055097.0</td>\n",
              "      <td>42.365140</td>\n",
              "      <td>71</td>\n",
              "      <td>AAA</td>\n",
              "      <td>2K</td>\n",
              "      <td>Visual Concepts</td>\n",
              "      <td>2315690</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>EARTH DEFENSE FORCE 6</td>\n",
              "      <td>25-07-2024</td>\n",
              "      <td>7</td>\n",
              "      <td>159806</td>\n",
              "      <td>59.99</td>\n",
              "      <td>7882151.0</td>\n",
              "      <td>29.651061</td>\n",
              "      <td>57</td>\n",
              "      <td>Indie</td>\n",
              "      <td>D3PUBLISHER</td>\n",
              "      <td>SANDLOT</td>\n",
              "      <td>2291060</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Sins of a Solar Empire II</td>\n",
              "      <td>15-08-2024</td>\n",
              "      <td>8</td>\n",
              "      <td>214192</td>\n",
              "      <td>49.99</td>\n",
              "      <td>7815247.0</td>\n",
              "      <td>12.452593</td>\n",
              "      <td>88</td>\n",
              "      <td>Indie</td>\n",
              "      <td>Stardock Entertainment</td>\n",
              "      <td>Ironclad Games Corporation,Stardock Entertainment</td>\n",
              "      <td>1575940</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Legend of Mortal</td>\n",
              "      <td>14-06-2024</td>\n",
              "      <td>6</td>\n",
              "      <td>440998</td>\n",
              "      <td>19.99</td>\n",
              "      <td>7756399.0</td>\n",
              "      <td>24.797817</td>\n",
              "      <td>76</td>\n",
              "      <td>Indie</td>\n",
              "      <td>Paras Games,Obb Studio Inc.</td>\n",
              "      <td>Obb Studio Inc.</td>\n",
              "      <td>1859910</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Shin Megami Tensei V: Vengeance</td>\n",
              "      <td>13-06-2024</td>\n",
              "      <td>6</td>\n",
              "      <td>141306</td>\n",
              "      <td>59.99</td>\n",
              "      <td>7629252.0</td>\n",
              "      <td>34.258496</td>\n",
              "      <td>96</td>\n",
              "      <td>AA</td>\n",
              "      <td>SEGA</td>\n",
              "      <td>ATLUS</td>\n",
              "      <td>1875830</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>Soulmask</td>\n",
              "      <td>30-05-2024</td>\n",
              "      <td>5</td>\n",
              "      <td>304685</td>\n",
              "      <td>29.99</td>\n",
              "      <td>7540563.0</td>\n",
              "      <td>95.697813</td>\n",
              "      <td>79</td>\n",
              "      <td>Indie</td>\n",
              "      <td>Qooland Games</td>\n",
              "      <td>CampFire Studio</td>\n",
              "      <td>2646460</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>The Universim</td>\n",
              "      <td>22-01-2024</td>\n",
              "      <td>1</td>\n",
              "      <td>328945</td>\n",
              "      <td>29.99</td>\n",
              "      <td>7534369.0</td>\n",
              "      <td>16.868531</td>\n",
              "      <td>81</td>\n",
              "      <td>Indie</td>\n",
              "      <td>Crytivo</td>\n",
              "      <td>Crytivo</td>\n",
              "      <td>352720</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>Bellwright</td>\n",
              "      <td>23-04-2024</td>\n",
              "      <td>4</td>\n",
              "      <td>280955</td>\n",
              "      <td>29.99</td>\n",
              "      <td>7481940.0</td>\n",
              "      <td>41.418885</td>\n",
              "      <td>78</td>\n",
              "      <td>Indie</td>\n",
              "      <td>Donkey Crew,Snail Games USA</td>\n",
              "      <td>Donkey Crew</td>\n",
              "      <td>1812450</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>Night of the Dead</td>\n",
              "      <td>31-05-2024</td>\n",
              "      <td>5</td>\n",
              "      <td>394364</td>\n",
              "      <td>29.99</td>\n",
              "      <td>7091792.0</td>\n",
              "      <td>27.597072</td>\n",
              "      <td>79</td>\n",
              "      <td>Indie</td>\n",
              "      <td>Jackto Studios</td>\n",
              "      <td>Jackto Studios</td>\n",
              "      <td>1377380</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>Empires of the Undergrowth</td>\n",
              "      <td>07-06-2024</td>\n",
              "      <td>6</td>\n",
              "      <td>408292</td>\n",
              "      <td>29.99</td>\n",
              "      <td>6950952.0</td>\n",
              "      <td>38.602124</td>\n",
              "      <td>95</td>\n",
              "      <td>AA</td>\n",
              "      <td>Hooded Horse,Slug Disco</td>\n",
              "      <td>Slug Disco</td>\n",
              "      <td>463530</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ac79216d-8f6a-4b90-9472-ae443521ae91')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-ac79216d-8f6a-4b90-9472-ae443521ae91 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-ac79216d-8f6a-4b90-9472-ae443521ae91');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-0f6cec66-2480-4024-866e-734e9bf9cae6\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-0f6cec66-2480-4024-866e-734e9bf9cae6')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-0f6cec66-2480-4024-866e-734e9bf9cae6 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 1500,\n  \"fields\": [\n    {\n      \"column\": \"name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1500,\n        \"samples\": [\n          \"Out of the Park Baseball 25\",\n          \"Tomorrow's Love Puzzle\",\n          \"HAREM\\uff01RANCH LIFE\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"releaseDate\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 235,\n        \"samples\": [\n          \"22-08-2024\",\n          \"23-03-2024\",\n          \"08-06-2024\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"bulan rilis\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2,\n        \"min\": 1,\n        \"max\": 9,\n        \"num_unique_values\": 9,\n        \"samples\": [\n          9,\n          7,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"copiesSold\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1132756,\n        \"min\": 593,\n        \"max\": 30739148,\n        \"num_unique_values\": 1460,\n        \"samples\": [\n          5885,\n          63753,\n          5046\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"price\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 12.646611586491048,\n        \"min\": 0.0,\n        \"max\": 99.99,\n        \"num_unique_values\": 58,\n        \"samples\": [\n          99.99,\n          24.99,\n          1.99\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"revenue\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 27810239.622256387,\n        \"min\": 20674.0,\n        \"max\": 837793356.0,\n        \"num_unique_values\": 1497,\n        \"samples\": [\n          23195.0,\n          491385.0,\n          331297.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"avgPlaytime\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 21.54217256267663,\n        \"min\": 0.0,\n        \"max\": 296.3328524525871,\n        \"num_unique_values\": 1500,\n        \"samples\": [\n          85.41960491706307,\n          4.02736735920015,\n          3.634375724102398\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"reviewScore\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 24,\n        \"min\": 0,\n        \"max\": 100,\n        \"num_unique_values\": 72,\n        \"samples\": [\n          96,\n          45,\n          89\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"publisherClass\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"Indie\",\n          \"Hobbyist\",\n          \"AAA\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"publishers\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1132,\n        \"samples\": [\n          \"KOMODO\",\n          \"Nutaku Publishing\",\n          \"Alpherior\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"developers\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1408,\n        \"samples\": [\n          \"\\u4e0a\\u6d77\\u6d32\\u7ade\\u7f51\\u7edc\\u79d1\\u6280\\u6709\\u9650\\u516c\\u53f8\",\n          \"Family Devs\",\n          \"TYPE-MOON,fuzz Inc.\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"steamId\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 606772,\n        \"min\": 24880,\n        \"max\": 3107330,\n        \"num_unique_values\": 1500,\n        \"samples\": [\n          2384620,\n          2726890,\n          2420240\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 190
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "LI2zr2SO8PLg",
        "outputId": "d762bfc4-725d-4750-a216-9cd1271e47f0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 1500 entries, 0 to 1499\n",
            "Data columns (total 12 columns):\n",
            " #   Column          Non-Null Count  Dtype  \n",
            "---  ------          --------------  -----  \n",
            " 0   name            1500 non-null   object \n",
            " 1   releaseDate     1500 non-null   object \n",
            " 2   bulan rilis     1500 non-null   int64  \n",
            " 3   copiesSold      1500 non-null   int64  \n",
            " 4   price           1500 non-null   float64\n",
            " 5   revenue         1500 non-null   float64\n",
            " 6   avgPlaytime     1500 non-null   float64\n",
            " 7   reviewScore     1500 non-null   int64  \n",
            " 8   publisherClass  1500 non-null   object \n",
            " 9   publishers      1500 non-null   object \n",
            " 10  developers      1500 non-null   object \n",
            " 11  steamId         1500 non-null   int64  \n",
            "dtypes: float64(3), int64(4), object(5)\n",
            "memory usage: 140.8+ KB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "from sklearn.preprocessing import LabelEncoder"
      ],
      "metadata": {
        "id": "EcRYV1Qa8Suf"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df.head(10)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Q6JR4yC48SqE",
        "outputId": "a14e4074-d15e-42de-b250-a37760bb7dc1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                              name releaseDate  bulan rilis  copiesSold  \\\n",
              "0                         WWE 2K24  07-03-2024            3      165301   \n",
              "1            EARTH DEFENSE FORCE 6  25-07-2024            7      159806   \n",
              "2        Sins of a Solar Empire II  15-08-2024            8      214192   \n",
              "3                 Legend of Mortal  14-06-2024            6      440998   \n",
              "4  Shin Megami Tensei V: Vengeance  13-06-2024            6      141306   \n",
              "5                         Soulmask  30-05-2024            5      304685   \n",
              "6                    The Universim  22-01-2024            1      328945   \n",
              "7                       Bellwright  23-04-2024            4      280955   \n",
              "8                Night of the Dead  31-05-2024            5      394364   \n",
              "9       Empires of the Undergrowth  07-06-2024            6      408292   \n",
              "\n",
              "   price    revenue  avgPlaytime  reviewScore publisherClass  \\\n",
              "0  99.99  8055097.0    42.365140           71            AAA   \n",
              "1  59.99  7882151.0    29.651061           57          Indie   \n",
              "2  49.99  7815247.0    12.452593           88          Indie   \n",
              "3  19.99  7756399.0    24.797817           76          Indie   \n",
              "4  59.99  7629252.0    34.258496           96             AA   \n",
              "5  29.99  7540563.0    95.697813           79          Indie   \n",
              "6  29.99  7534369.0    16.868531           81          Indie   \n",
              "7  29.99  7481940.0    41.418885           78          Indie   \n",
              "8  29.99  7091792.0    27.597072           79          Indie   \n",
              "9  29.99  6950952.0    38.602124           95             AA   \n",
              "\n",
              "                    publishers  \\\n",
              "0                           2K   \n",
              "1                  D3PUBLISHER   \n",
              "2       Stardock Entertainment   \n",
              "3  Paras Games,Obb Studio Inc.   \n",
              "4                         SEGA   \n",
              "5                Qooland Games   \n",
              "6                      Crytivo   \n",
              "7  Donkey Crew,Snail Games USA   \n",
              "8               Jackto Studios   \n",
              "9      Hooded Horse,Slug Disco   \n",
              "\n",
              "                                          developers  steamId  \n",
              "0                                    Visual Concepts  2315690  \n",
              "1                                            SANDLOT  2291060  \n",
              "2  Ironclad Games Corporation,Stardock Entertainment  1575940  \n",
              "3                                    Obb Studio Inc.  1859910  \n",
              "4                                              ATLUS  1875830  \n",
              "5                                    CampFire Studio  2646460  \n",
              "6                                            Crytivo   352720  \n",
              "7                                        Donkey Crew  1812450  \n",
              "8                                     Jackto Studios  1377380  \n",
              "9                                         Slug Disco   463530  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-152bb4e5-d8b3-494c-9a7c-1d5c4290e402\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>name</th>\n",
              "      <th>releaseDate</th>\n",
              "      <th>bulan rilis</th>\n",
              "      <th>copiesSold</th>\n",
              "      <th>price</th>\n",
              "      <th>revenue</th>\n",
              "      <th>avgPlaytime</th>\n",
              "      <th>reviewScore</th>\n",
              "      <th>publisherClass</th>\n",
              "      <th>publishers</th>\n",
              "      <th>developers</th>\n",
              "      <th>steamId</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>WWE 2K24</td>\n",
              "      <td>07-03-2024</td>\n",
              "      <td>3</td>\n",
              "      <td>165301</td>\n",
              "      <td>99.99</td>\n",
              "      <td>8055097.0</td>\n",
              "      <td>42.365140</td>\n",
              "      <td>71</td>\n",
              "      <td>AAA</td>\n",
              "      <td>2K</td>\n",
              "      <td>Visual Concepts</td>\n",
              "      <td>2315690</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>EARTH DEFENSE FORCE 6</td>\n",
              "      <td>25-07-2024</td>\n",
              "      <td>7</td>\n",
              "      <td>159806</td>\n",
              "      <td>59.99</td>\n",
              "      <td>7882151.0</td>\n",
              "      <td>29.651061</td>\n",
              "      <td>57</td>\n",
              "      <td>Indie</td>\n",
              "      <td>D3PUBLISHER</td>\n",
              "      <td>SANDLOT</td>\n",
              "      <td>2291060</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Sins of a Solar Empire II</td>\n",
              "      <td>15-08-2024</td>\n",
              "      <td>8</td>\n",
              "      <td>214192</td>\n",
              "      <td>49.99</td>\n",
              "      <td>7815247.0</td>\n",
              "      <td>12.452593</td>\n",
              "      <td>88</td>\n",
              "      <td>Indie</td>\n",
              "      <td>Stardock Entertainment</td>\n",
              "      <td>Ironclad Games Corporation,Stardock Entertainment</td>\n",
              "      <td>1575940</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Legend of Mortal</td>\n",
              "      <td>14-06-2024</td>\n",
              "      <td>6</td>\n",
              "      <td>440998</td>\n",
              "      <td>19.99</td>\n",
              "      <td>7756399.0</td>\n",
              "      <td>24.797817</td>\n",
              "      <td>76</td>\n",
              "      <td>Indie</td>\n",
              "      <td>Paras Games,Obb Studio Inc.</td>\n",
              "      <td>Obb Studio Inc.</td>\n",
              "      <td>1859910</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Shin Megami Tensei V: Vengeance</td>\n",
              "      <td>13-06-2024</td>\n",
              "      <td>6</td>\n",
              "      <td>141306</td>\n",
              "      <td>59.99</td>\n",
              "      <td>7629252.0</td>\n",
              "      <td>34.258496</td>\n",
              "      <td>96</td>\n",
              "      <td>AA</td>\n",
              "      <td>SEGA</td>\n",
              "      <td>ATLUS</td>\n",
              "      <td>1875830</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>Soulmask</td>\n",
              "      <td>30-05-2024</td>\n",
              "      <td>5</td>\n",
              "      <td>304685</td>\n",
              "      <td>29.99</td>\n",
              "      <td>7540563.0</td>\n",
              "      <td>95.697813</td>\n",
              "      <td>79</td>\n",
              "      <td>Indie</td>\n",
              "      <td>Qooland Games</td>\n",
              "      <td>CampFire Studio</td>\n",
              "      <td>2646460</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>The Universim</td>\n",
              "      <td>22-01-2024</td>\n",
              "      <td>1</td>\n",
              "      <td>328945</td>\n",
              "      <td>29.99</td>\n",
              "      <td>7534369.0</td>\n",
              "      <td>16.868531</td>\n",
              "      <td>81</td>\n",
              "      <td>Indie</td>\n",
              "      <td>Crytivo</td>\n",
              "      <td>Crytivo</td>\n",
              "      <td>352720</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>Bellwright</td>\n",
              "      <td>23-04-2024</td>\n",
              "      <td>4</td>\n",
              "      <td>280955</td>\n",
              "      <td>29.99</td>\n",
              "      <td>7481940.0</td>\n",
              "      <td>41.418885</td>\n",
              "      <td>78</td>\n",
              "      <td>Indie</td>\n",
              "      <td>Donkey Crew,Snail Games USA</td>\n",
              "      <td>Donkey Crew</td>\n",
              "      <td>1812450</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>Night of the Dead</td>\n",
              "      <td>31-05-2024</td>\n",
              "      <td>5</td>\n",
              "      <td>394364</td>\n",
              "      <td>29.99</td>\n",
              "      <td>7091792.0</td>\n",
              "      <td>27.597072</td>\n",
              "      <td>79</td>\n",
              "      <td>Indie</td>\n",
              "      <td>Jackto Studios</td>\n",
              "      <td>Jackto Studios</td>\n",
              "      <td>1377380</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>Empires of the Undergrowth</td>\n",
              "      <td>07-06-2024</td>\n",
              "      <td>6</td>\n",
              "      <td>408292</td>\n",
              "      <td>29.99</td>\n",
              "      <td>6950952.0</td>\n",
              "      <td>38.602124</td>\n",
              "      <td>95</td>\n",
              "      <td>AA</td>\n",
              "      <td>Hooded Horse,Slug Disco</td>\n",
              "      <td>Slug Disco</td>\n",
              "      <td>463530</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-152bb4e5-d8b3-494c-9a7c-1d5c4290e402')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-152bb4e5-d8b3-494c-9a7c-1d5c4290e402 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-152bb4e5-d8b3-494c-9a7c-1d5c4290e402');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-2bb4c43c-62f8-4ce1-b8df-0a9b74aba0d1\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-2bb4c43c-62f8-4ce1-b8df-0a9b74aba0d1')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-2bb4c43c-62f8-4ce1-b8df-0a9b74aba0d1 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 1500,\n  \"fields\": [\n    {\n      \"column\": \"name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1500,\n        \"samples\": [\n          \"Out of the Park Baseball 25\",\n          \"Tomorrow's Love Puzzle\",\n          \"HAREM\\uff01RANCH LIFE\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"releaseDate\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 235,\n        \"samples\": [\n          \"22-08-2024\",\n          \"23-03-2024\",\n          \"08-06-2024\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"bulan rilis\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2,\n        \"min\": 1,\n        \"max\": 9,\n        \"num_unique_values\": 9,\n        \"samples\": [\n          9,\n          7,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"copiesSold\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1132756,\n        \"min\": 593,\n        \"max\": 30739148,\n        \"num_unique_values\": 1460,\n        \"samples\": [\n          5885,\n          63753,\n          5046\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"price\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 12.646611586491048,\n        \"min\": 0.0,\n        \"max\": 99.99,\n        \"num_unique_values\": 58,\n        \"samples\": [\n          99.99,\n          24.99,\n          1.99\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"revenue\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 27810239.622256387,\n        \"min\": 20674.0,\n        \"max\": 837793356.0,\n        \"num_unique_values\": 1497,\n        \"samples\": [\n          23195.0,\n          491385.0,\n          331297.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"avgPlaytime\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 21.54217256267663,\n        \"min\": 0.0,\n        \"max\": 296.3328524525871,\n        \"num_unique_values\": 1500,\n        \"samples\": [\n          85.41960491706307,\n          4.02736735920015,\n          3.634375724102398\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"reviewScore\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 24,\n        \"min\": 0,\n        \"max\": 100,\n        \"num_unique_values\": 72,\n        \"samples\": [\n          96,\n          45,\n          89\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"publisherClass\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"Indie\",\n          \"Hobbyist\",\n          \"AAA\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"publishers\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1132,\n        \"samples\": [\n          \"KOMODO\",\n          \"Nutaku Publishing\",\n          \"Alpherior\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"developers\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1408,\n        \"samples\": [\n          \"\\u4e0a\\u6d77\\u6d32\\u7ade\\u7f51\\u7edc\\u79d1\\u6280\\u6709\\u9650\\u516c\\u53f8\",\n          \"Family Devs\",\n          \"TYPE-MOON,fuzz Inc.\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"steamId\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 606772,\n        \"min\": 24880,\n        \"max\": 3107330,\n        \"num_unique_values\": 1500,\n        \"samples\": [\n          2384620,\n          2726890,\n          2420240\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 193
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "label_encoder = LabelEncoder()\n",
        "label_encoder_platform = label_encoder.fit(df['publisherClass'])"
      ],
      "metadata": {
        "id": "DzAs7fWk8Skz"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Memisahkan kolom numerik dan non-numerik\n",
        "num_cols = df.select_dtypes(include=np.number).columns\n",
        "non_num_cols = df.select_dtypes(exclude=np.number).columns\n",
        "non_num_cols = non_num_cols.drop(['releaseDate', 'publishers', 'developers', 'name'])\n",
        "# Melakukan label encoding pada semua kolom non-numerik\n",
        "label_encoder = LabelEncoder()\n",
        "for col in non_num_cols:\n",
        "    df[col] = label_encoder.fit_transform(df[col])\n",
        "\n",
        "# Tampilkan hasil\n",
        "df.head(10)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Z99DN_I48Sfb",
        "outputId": "763fcee4-e71a-423e-cd85-bab39fd2c249"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                              name releaseDate  bulan rilis  copiesSold  \\\n",
              "0                         WWE 2K24  07-03-2024            3      165301   \n",
              "1            EARTH DEFENSE FORCE 6  25-07-2024            7      159806   \n",
              "2        Sins of a Solar Empire II  15-08-2024            8      214192   \n",
              "3                 Legend of Mortal  14-06-2024            6      440998   \n",
              "4  Shin Megami Tensei V: Vengeance  13-06-2024            6      141306   \n",
              "5                         Soulmask  30-05-2024            5      304685   \n",
              "6                    The Universim  22-01-2024            1      328945   \n",
              "7                       Bellwright  23-04-2024            4      280955   \n",
              "8                Night of the Dead  31-05-2024            5      394364   \n",
              "9       Empires of the Undergrowth  07-06-2024            6      408292   \n",
              "\n",
              "   price    revenue  avgPlaytime  reviewScore  publisherClass  \\\n",
              "0  99.99  8055097.0    42.365140           71               1   \n",
              "1  59.99  7882151.0    29.651061           57               3   \n",
              "2  49.99  7815247.0    12.452593           88               3   \n",
              "3  19.99  7756399.0    24.797817           76               3   \n",
              "4  59.99  7629252.0    34.258496           96               0   \n",
              "5  29.99  7540563.0    95.697813           79               3   \n",
              "6  29.99  7534369.0    16.868531           81               3   \n",
              "7  29.99  7481940.0    41.418885           78               3   \n",
              "8  29.99  7091792.0    27.597072           79               3   \n",
              "9  29.99  6950952.0    38.602124           95               0   \n",
              "\n",
              "                    publishers  \\\n",
              "0                           2K   \n",
              "1                  D3PUBLISHER   \n",
              "2       Stardock Entertainment   \n",
              "3  Paras Games,Obb Studio Inc.   \n",
              "4                         SEGA   \n",
              "5                Qooland Games   \n",
              "6                      Crytivo   \n",
              "7  Donkey Crew,Snail Games USA   \n",
              "8               Jackto Studios   \n",
              "9      Hooded Horse,Slug Disco   \n",
              "\n",
              "                                          developers  steamId  \n",
              "0                                    Visual Concepts  2315690  \n",
              "1                                            SANDLOT  2291060  \n",
              "2  Ironclad Games Corporation,Stardock Entertainment  1575940  \n",
              "3                                    Obb Studio Inc.  1859910  \n",
              "4                                              ATLUS  1875830  \n",
              "5                                    CampFire Studio  2646460  \n",
              "6                                            Crytivo   352720  \n",
              "7                                        Donkey Crew  1812450  \n",
              "8                                     Jackto Studios  1377380  \n",
              "9                                         Slug Disco   463530  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-2c453df6-c2c9-47aa-9b42-2d88de3420ce\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>name</th>\n",
              "      <th>releaseDate</th>\n",
              "      <th>bulan rilis</th>\n",
              "      <th>copiesSold</th>\n",
              "      <th>price</th>\n",
              "      <th>revenue</th>\n",
              "      <th>avgPlaytime</th>\n",
              "      <th>reviewScore</th>\n",
              "      <th>publisherClass</th>\n",
              "      <th>publishers</th>\n",
              "      <th>developers</th>\n",
              "      <th>steamId</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>WWE 2K24</td>\n",
              "      <td>07-03-2024</td>\n",
              "      <td>3</td>\n",
              "      <td>165301</td>\n",
              "      <td>99.99</td>\n",
              "      <td>8055097.0</td>\n",
              "      <td>42.365140</td>\n",
              "      <td>71</td>\n",
              "      <td>1</td>\n",
              "      <td>2K</td>\n",
              "      <td>Visual Concepts</td>\n",
              "      <td>2315690</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>EARTH DEFENSE FORCE 6</td>\n",
              "      <td>25-07-2024</td>\n",
              "      <td>7</td>\n",
              "      <td>159806</td>\n",
              "      <td>59.99</td>\n",
              "      <td>7882151.0</td>\n",
              "      <td>29.651061</td>\n",
              "      <td>57</td>\n",
              "      <td>3</td>\n",
              "      <td>D3PUBLISHER</td>\n",
              "      <td>SANDLOT</td>\n",
              "      <td>2291060</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Sins of a Solar Empire II</td>\n",
              "      <td>15-08-2024</td>\n",
              "      <td>8</td>\n",
              "      <td>214192</td>\n",
              "      <td>49.99</td>\n",
              "      <td>7815247.0</td>\n",
              "      <td>12.452593</td>\n",
              "      <td>88</td>\n",
              "      <td>3</td>\n",
              "      <td>Stardock Entertainment</td>\n",
              "      <td>Ironclad Games Corporation,Stardock Entertainment</td>\n",
              "      <td>1575940</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Legend of Mortal</td>\n",
              "      <td>14-06-2024</td>\n",
              "      <td>6</td>\n",
              "      <td>440998</td>\n",
              "      <td>19.99</td>\n",
              "      <td>7756399.0</td>\n",
              "      <td>24.797817</td>\n",
              "      <td>76</td>\n",
              "      <td>3</td>\n",
              "      <td>Paras Games,Obb Studio Inc.</td>\n",
              "      <td>Obb Studio Inc.</td>\n",
              "      <td>1859910</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Shin Megami Tensei V: Vengeance</td>\n",
              "      <td>13-06-2024</td>\n",
              "      <td>6</td>\n",
              "      <td>141306</td>\n",
              "      <td>59.99</td>\n",
              "      <td>7629252.0</td>\n",
              "      <td>34.258496</td>\n",
              "      <td>96</td>\n",
              "      <td>0</td>\n",
              "      <td>SEGA</td>\n",
              "      <td>ATLUS</td>\n",
              "      <td>1875830</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>Soulmask</td>\n",
              "      <td>30-05-2024</td>\n",
              "      <td>5</td>\n",
              "      <td>304685</td>\n",
              "      <td>29.99</td>\n",
              "      <td>7540563.0</td>\n",
              "      <td>95.697813</td>\n",
              "      <td>79</td>\n",
              "      <td>3</td>\n",
              "      <td>Qooland Games</td>\n",
              "      <td>CampFire Studio</td>\n",
              "      <td>2646460</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>The Universim</td>\n",
              "      <td>22-01-2024</td>\n",
              "      <td>1</td>\n",
              "      <td>328945</td>\n",
              "      <td>29.99</td>\n",
              "      <td>7534369.0</td>\n",
              "      <td>16.868531</td>\n",
              "      <td>81</td>\n",
              "      <td>3</td>\n",
              "      <td>Crytivo</td>\n",
              "      <td>Crytivo</td>\n",
              "      <td>352720</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>Bellwright</td>\n",
              "      <td>23-04-2024</td>\n",
              "      <td>4</td>\n",
              "      <td>280955</td>\n",
              "      <td>29.99</td>\n",
              "      <td>7481940.0</td>\n",
              "      <td>41.418885</td>\n",
              "      <td>78</td>\n",
              "      <td>3</td>\n",
              "      <td>Donkey Crew,Snail Games USA</td>\n",
              "      <td>Donkey Crew</td>\n",
              "      <td>1812450</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>Night of the Dead</td>\n",
              "      <td>31-05-2024</td>\n",
              "      <td>5</td>\n",
              "      <td>394364</td>\n",
              "      <td>29.99</td>\n",
              "      <td>7091792.0</td>\n",
              "      <td>27.597072</td>\n",
              "      <td>79</td>\n",
              "      <td>3</td>\n",
              "      <td>Jackto Studios</td>\n",
              "      <td>Jackto Studios</td>\n",
              "      <td>1377380</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>Empires of the Undergrowth</td>\n",
              "      <td>07-06-2024</td>\n",
              "      <td>6</td>\n",
              "      <td>408292</td>\n",
              "      <td>29.99</td>\n",
              "      <td>6950952.0</td>\n",
              "      <td>38.602124</td>\n",
              "      <td>95</td>\n",
              "      <td>0</td>\n",
              "      <td>Hooded Horse,Slug Disco</td>\n",
              "      <td>Slug Disco</td>\n",
              "      <td>463530</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2c453df6-c2c9-47aa-9b42-2d88de3420ce')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-2c453df6-c2c9-47aa-9b42-2d88de3420ce button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-2c453df6-c2c9-47aa-9b42-2d88de3420ce');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-2c13ee16-c2d3-4747-96d7-935fa89a7a55\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-2c13ee16-c2d3-4747-96d7-935fa89a7a55')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-2c13ee16-c2d3-4747-96d7-935fa89a7a55 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 1500,\n  \"fields\": [\n    {\n      \"column\": \"name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1500,\n        \"samples\": [\n          \"Out of the Park Baseball 25\",\n          \"Tomorrow's Love Puzzle\",\n          \"HAREM\\uff01RANCH LIFE\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"releaseDate\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 235,\n        \"samples\": [\n          \"22-08-2024\",\n          \"23-03-2024\",\n          \"08-06-2024\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"bulan rilis\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2,\n        \"min\": 1,\n        \"max\": 9,\n        \"num_unique_values\": 9,\n        \"samples\": [\n          9,\n          7,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"copiesSold\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1132756,\n        \"min\": 593,\n        \"max\": 30739148,\n        \"num_unique_values\": 1460,\n        \"samples\": [\n          5885,\n          63753,\n          5046\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"price\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 12.646611586491048,\n        \"min\": 0.0,\n        \"max\": 99.99,\n        \"num_unique_values\": 58,\n        \"samples\": [\n          99.99,\n          24.99,\n          1.99\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"revenue\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 27810239.622256387,\n        \"min\": 20674.0,\n        \"max\": 837793356.0,\n        \"num_unique_values\": 1497,\n        \"samples\": [\n          23195.0,\n          491385.0,\n          331297.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"avgPlaytime\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 21.54217256267663,\n        \"min\": 0.0,\n        \"max\": 296.3328524525871,\n        \"num_unique_values\": 1500,\n        \"samples\": [\n          85.41960491706307,\n          4.02736735920015,\n          3.634375724102398\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"reviewScore\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 24,\n        \"min\": 0,\n        \"max\": 100,\n        \"num_unique_values\": 72,\n        \"samples\": [\n          96,\n          45,\n          89\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"publisherClass\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 3,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          3,\n          2,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"publishers\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1132,\n        \"samples\": [\n          \"KOMODO\",\n          \"Nutaku Publishing\",\n          \"Alpherior\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"developers\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1408,\n        \"samples\": [\n          \"\\u4e0a\\u6d77\\u6d32\\u7ade\\u7f51\\u7edc\\u79d1\\u6280\\u6709\\u9650\\u516c\\u53f8\",\n          \"Family Devs\",\n          \"TYPE-MOON,fuzz Inc.\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"steamId\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 606772,\n        \"min\": 24880,\n        \"max\": 3107330,\n        \"num_unique_values\": 1500,\n        \"samples\": [\n          2384620,\n          2726890,\n          2420240\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 195
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(label_encoder_platform.classes_)\n",
        "# Membuat DataFrame mapping untuk kolom 'platform'\n",
        "mapping_df = pd.DataFrame({'original': label_encoder_platform.classes_,\n",
        "                           'encoded': range(len(label_encoder_platform.classes_))})\n",
        "print(mapping_df)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zViNUgmY8SZj",
        "outputId": "5eb90b9b-6c46-46a0-d72d-3e6c396686b4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['AA' 'AAA' 'Hobbyist' 'Indie']\n",
            "   original  encoded\n",
            "0        AA        0\n",
            "1       AAA        1\n",
            "2  Hobbyist        2\n",
            "3     Indie        3\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Sebelum dan sesudah mengubah menjadi angka"
      ],
      "metadata": {
        "id": "PDm5lF4W8mDo"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Correlation matrix"
      ],
      "metadata": {
        "id": "Xrn2r5BBhwOu"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Menghitung matriks kovarian\n",
        "correlation_matrix = df[['bulan rilis', 'copiesSold', 'price', 'revenue', 'avgPlaytime', 'reviewScore', 'publisherClass']].corr()\n",
        "\n",
        "# Menampilkan matriks kovarian\n",
        "correlation_matrix"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "3hemVW4MmEOQ",
        "outputId": "e48a3d6c-786e-4833-91a6-2c189c0de033"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                bulan rilis  copiesSold     price   revenue  avgPlaytime  \\\n",
              "bulan rilis        1.000000   -0.016679  0.040155 -0.011155    -0.080362   \n",
              "copiesSold        -0.016679    1.000000  0.056224  0.627700     0.099065   \n",
              "price              0.040155    0.056224  1.000000  0.162521     0.029053   \n",
              "revenue           -0.011155    0.627700  0.162521  1.000000     0.082426   \n",
              "avgPlaytime       -0.080362    0.099065  0.029053  0.082426     1.000000   \n",
              "reviewScore        0.051139    0.008584 -0.035025  0.007383    -0.031980   \n",
              "publisherClass     0.008598   -0.121488 -0.408560 -0.158067    -0.059107   \n",
              "\n",
              "                reviewScore  publisherClass  \n",
              "bulan rilis        0.051139        0.008598  \n",
              "copiesSold         0.008584       -0.121488  \n",
              "price             -0.035025       -0.408560  \n",
              "revenue            0.007383       -0.158067  \n",
              "avgPlaytime       -0.031980       -0.059107  \n",
              "reviewScore        1.000000        0.036577  \n",
              "publisherClass     0.036577        1.000000  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-d90beb69-f145-4d65-abc3-f9b9d7141c31\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>bulan rilis</th>\n",
              "      <th>copiesSold</th>\n",
              "      <th>price</th>\n",
              "      <th>revenue</th>\n",
              "      <th>avgPlaytime</th>\n",
              "      <th>reviewScore</th>\n",
              "      <th>publisherClass</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>bulan rilis</th>\n",
              "      <td>1.000000</td>\n",
              "      <td>-0.016679</td>\n",
              "      <td>0.040155</td>\n",
              "      <td>-0.011155</td>\n",
              "      <td>-0.080362</td>\n",
              "      <td>0.051139</td>\n",
              "      <td>0.008598</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>copiesSold</th>\n",
              "      <td>-0.016679</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.056224</td>\n",
              "      <td>0.627700</td>\n",
              "      <td>0.099065</td>\n",
              "      <td>0.008584</td>\n",
              "      <td>-0.121488</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>price</th>\n",
              "      <td>0.040155</td>\n",
              "      <td>0.056224</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.162521</td>\n",
              "      <td>0.029053</td>\n",
              "      <td>-0.035025</td>\n",
              "      <td>-0.408560</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>revenue</th>\n",
              "      <td>-0.011155</td>\n",
              "      <td>0.627700</td>\n",
              "      <td>0.162521</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.082426</td>\n",
              "      <td>0.007383</td>\n",
              "      <td>-0.158067</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>avgPlaytime</th>\n",
              "      <td>-0.080362</td>\n",
              "      <td>0.099065</td>\n",
              "      <td>0.029053</td>\n",
              "      <td>0.082426</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>-0.031980</td>\n",
              "      <td>-0.059107</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>reviewScore</th>\n",
              "      <td>0.051139</td>\n",
              "      <td>0.008584</td>\n",
              "      <td>-0.035025</td>\n",
              "      <td>0.007383</td>\n",
              "      <td>-0.031980</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.036577</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>publisherClass</th>\n",
              "      <td>0.008598</td>\n",
              "      <td>-0.121488</td>\n",
              "      <td>-0.408560</td>\n",
              "      <td>-0.158067</td>\n",
              "      <td>-0.059107</td>\n",
              "      <td>0.036577</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d90beb69-f145-4d65-abc3-f9b9d7141c31')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-d90beb69-f145-4d65-abc3-f9b9d7141c31 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-d90beb69-f145-4d65-abc3-f9b9d7141c31');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-b68e0ee4-064a-4b50-8d5d-ff854139d10d\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-b68e0ee4-064a-4b50-8d5d-ff854139d10d')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-b68e0ee4-064a-4b50-8d5d-ff854139d10d button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "  <div id=\"id_555ccf10-0a08-4e12-b4fd-e3719183fb94\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('correlation_matrix')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_555ccf10-0a08-4e12-b4fd-e3719183fb94 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('correlation_matrix');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "correlation_matrix",
              "summary": "{\n  \"name\": \"correlation_matrix\",\n  \"rows\": 7,\n  \"fields\": [\n    {\n      \"column\": \"bulan rilis\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.38093472671830597,\n        \"min\": -0.08036164711527158,\n        \"max\": 1.0,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          1.0,\n          -0.01667866958146311,\n          0.0511387118014791\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"copiesSold\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.41463990327106587,\n        \"min\": -0.12148755918189094,\n        \"max\": 1.0,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          -0.01667866958146311,\n          1.0,\n          0.008584097752535672\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"price\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.42784889307125556,\n        \"min\": -0.40856024315922473,\n        \"max\": 1.0,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          0.04015549716241529,\n          0.056224034545446014,\n          -0.035025414205574035\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"revenue\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.4151818942820009,\n        \"min\": -0.15806727247197982,\n        \"max\": 1.0,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          -0.011155401374038018,\n          0.6277004608991783,\n          0.007382641987462298\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"avgPlaytime\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.38170245032662997,\n        \"min\": -0.08036164711527158,\n        \"max\": 1.0,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          -0.08036164711527158,\n          0.09906471347350047,\n          -0.03197972927261395\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"reviewScore\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.37700620794956086,\n        \"min\": -0.035025414205574035,\n        \"max\": 1.0,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          0.0511387118014791,\n          0.008584097752535672,\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"publisherClass\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.4470065295798493,\n        \"min\": -0.40856024315922473,\n        \"max\": 1.0,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          0.00859805700484222,\n          -0.12148755918189094,\n          0.03657737624922896\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 197
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Menghitung nilai eigen dan vektor eigen dari matriks korelasi\n",
        "eigenvalues, eigenvectors = np.linalg.eig(correlation_matrix)\n",
        "\n",
        "# Membuat DataFrame untuk menampilkan nilai eigen dan vektor eigen dengan rapi\n",
        "eigen_df = pd.DataFrame({'Eigenvalue': eigenvalues,\n",
        "                         'Eigenvector': [eigenvectors[:, i] for i in range(len(eigenvalues))]})\n",
        "\n",
        "# Menampilkan DataFrame dengan format yang rapi\n",
        "print(eigen_df.to_string(index=False))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mRqYII4Krf6M",
        "outputId": "cf2c2dc2-b5e5-4ce9-c12d-03f418b283d0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            " Eigenvalue                                                                                                                                               Eigenvector\n",
            "   1.817630       [-0.02512256324271359, 0.5659045681054653, 0.36203507924630074, 0.6004584714695638, 0.17418820013696965, -0.03021322827095933, -0.3952805760716457]\n",
            "   0.361746 [0.007416073675643926, -0.6912790566033767, -0.15463381612104776, 0.7034329854810478, 0.019188504584487138, -0.0038369449261537333, -0.05445883534642931]\n",
            "   0.592311   [0.07596629544883078, 0.08314324973745799, -0.6812905905242689, -0.12303693705875801, -0.03551580833472796, -0.006502949489721213, -0.7118410667890921]\n",
            "   1.263059        [-0.11004361071576464, 0.41795339842860907, -0.6081934391830921, 0.3200554419484949, 0.08040189589754615, 0.15008515546199686, 0.5584627081036279]\n",
            "   1.101308          [0.6715523435961047, 0.08038273748257872, 0.0647925885349764, 0.10488664047194747, -0.522334704548463, 0.5040067115457901, 0.022371177615416484]\n",
            "   0.906208       [-0.6907104078710986, 0.030670635990859285, 0.047730872139122, 0.06042104493530542, -0.6866061482208972, 0.18930582601839063, -0.09372730221754692]\n",
            "   0.957739     [-0.23101940748104172, -0.11351374395510909, 0.06698164241400859, -0.11138301107189426, 0.4661575789030978, 0.8286405344908347, -0.11359543984873839]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Check Normality"
      ],
      "metadata": {
        "id": "fsoGDPFI8nqI"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Check for duplicate rows\n",
        "duplicate = df[df.duplicated()]\n",
        "\n",
        "print('Jumlah data duplikat =', len(duplicate))\n",
        "\n",
        "# Display the duplicate rows (if any)\n",
        "if not duplicate.empty:\n",
        "  print(\"\\nDuplicate Rows:\")\n",
        "  print(duplicate)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "O59RIxBt8yia",
        "outputId": "fe18fbe0-ce7c-4f24-d086-cfb7a5fc0780"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Jumlah data duplikat = 0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.isnull().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "XjO6IjHN8S0x",
        "outputId": "02892361-b4b1-4ba4-83f4-d148efe0565f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "name              0\n",
              "releaseDate       0\n",
              "bulan rilis       0\n",
              "copiesSold        0\n",
              "price             0\n",
              "revenue           0\n",
              "avgPlaytime       0\n",
              "reviewScore       0\n",
              "publisherClass    0\n",
              "publishers        0\n",
              "developers        0\n",
              "steamId           0\n",
              "dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>name</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>releaseDate</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>bulan rilis</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>copiesSold</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>price</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>revenue</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>avgPlaytime</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>reviewScore</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>publisherClass</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>publishers</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>developers</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>steamId</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 200
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Pilih kolom tertentu\n",
        "selected_cols = [\"bulan rilis\", \"copiesSold\", \"price\", \"revenue\", \"avgPlaytime\", \"reviewScore\"]\n",
        "\n",
        "# Buat subplots yang sesuai dengan jumlah kolom yang dipilih\n",
        "num_cols = len(selected_cols)\n",
        "rows = (num_cols // 3) + (num_cols % 3 > 0)  # Mengatur jumlah baris secara dinamis\n",
        "fig, axes = plt.subplots(nrows=2, ncols=3, figsize=(12, 8))\n",
        "\n",
        "fig.suptitle('Box Plots Outlier', fontsize=16)\n",
        "\n",
        "# Flatten axes jika hanya satu baris\n",
        "axes = axes.flatten() if num_cols > 1 else [axes]\n",
        "\n",
        "# Plot setiap kolom yang dipilih\n",
        "for i, col in enumerate(selected_cols):\n",
        "    df.boxplot(column=col, ax=axes[i])\n",
        "    axes[i].set_title(f'{col}')\n",
        "\n",
        "# Hapus subplot kosong jika ada\n",
        "for j in range(i + 1, len(axes)):\n",
        "    fig.delaxes(axes[j])\n",
        "\n",
        "plt.tight_layout(rect=[0, 0.03, 1, 0.95])\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "I5atRuVYcDsE",
        "outputId": "1605c0ba-2e8a-4111-f899-e56a0c7eb954"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x800 with 6 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# StandardScaler Handling"
      ],
      "metadata": {
        "id": "AZ_795ngH-7v"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df_standarscaler=df.copy()"
      ],
      "metadata": {
        "id": "D-RuhYM3D9ab"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df_standarscaler.head(10)"
      ],
      "metadata": {
        "id": "HsFhiV5EHwIC",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "3d086a1f-15d8-465f-ebd4-babcdc51f37a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                              name releaseDate  bulan rilis  copiesSold  \\\n",
              "0                         WWE 2K24  07-03-2024            3      165301   \n",
              "1            EARTH DEFENSE FORCE 6  25-07-2024            7      159806   \n",
              "2        Sins of a Solar Empire II  15-08-2024            8      214192   \n",
              "3                 Legend of Mortal  14-06-2024            6      440998   \n",
              "4  Shin Megami Tensei V: Vengeance  13-06-2024            6      141306   \n",
              "5                         Soulmask  30-05-2024            5      304685   \n",
              "6                    The Universim  22-01-2024            1      328945   \n",
              "7                       Bellwright  23-04-2024            4      280955   \n",
              "8                Night of the Dead  31-05-2024            5      394364   \n",
              "9       Empires of the Undergrowth  07-06-2024            6      408292   \n",
              "\n",
              "   price    revenue  avgPlaytime  reviewScore  publisherClass  \\\n",
              "0  99.99  8055097.0    42.365140           71               1   \n",
              "1  59.99  7882151.0    29.651061           57               3   \n",
              "2  49.99  7815247.0    12.452593           88               3   \n",
              "3  19.99  7756399.0    24.797817           76               3   \n",
              "4  59.99  7629252.0    34.258496           96               0   \n",
              "5  29.99  7540563.0    95.697813           79               3   \n",
              "6  29.99  7534369.0    16.868531           81               3   \n",
              "7  29.99  7481940.0    41.418885           78               3   \n",
              "8  29.99  7091792.0    27.597072           79               3   \n",
              "9  29.99  6950952.0    38.602124           95               0   \n",
              "\n",
              "                    publishers  \\\n",
              "0                           2K   \n",
              "1                  D3PUBLISHER   \n",
              "2       Stardock Entertainment   \n",
              "3  Paras Games,Obb Studio Inc.   \n",
              "4                         SEGA   \n",
              "5                Qooland Games   \n",
              "6                      Crytivo   \n",
              "7  Donkey Crew,Snail Games USA   \n",
              "8               Jackto Studios   \n",
              "9      Hooded Horse,Slug Disco   \n",
              "\n",
              "                                          developers  steamId  \n",
              "0                                    Visual Concepts  2315690  \n",
              "1                                            SANDLOT  2291060  \n",
              "2  Ironclad Games Corporation,Stardock Entertainment  1575940  \n",
              "3                                    Obb Studio Inc.  1859910  \n",
              "4                                              ATLUS  1875830  \n",
              "5                                    CampFire Studio  2646460  \n",
              "6                                            Crytivo   352720  \n",
              "7                                        Donkey Crew  1812450  \n",
              "8                                     Jackto Studios  1377380  \n",
              "9                                         Slug Disco   463530  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-2ae04b51-3002-43d8-ba7d-61058c68db1e\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>name</th>\n",
              "      <th>releaseDate</th>\n",
              "      <th>bulan rilis</th>\n",
              "      <th>copiesSold</th>\n",
              "      <th>price</th>\n",
              "      <th>revenue</th>\n",
              "      <th>avgPlaytime</th>\n",
              "      <th>reviewScore</th>\n",
              "      <th>publisherClass</th>\n",
              "      <th>publishers</th>\n",
              "      <th>developers</th>\n",
              "      <th>steamId</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>WWE 2K24</td>\n",
              "      <td>07-03-2024</td>\n",
              "      <td>3</td>\n",
              "      <td>165301</td>\n",
              "      <td>99.99</td>\n",
              "      <td>8055097.0</td>\n",
              "      <td>42.365140</td>\n",
              "      <td>71</td>\n",
              "      <td>1</td>\n",
              "      <td>2K</td>\n",
              "      <td>Visual Concepts</td>\n",
              "      <td>2315690</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>EARTH DEFENSE FORCE 6</td>\n",
              "      <td>25-07-2024</td>\n",
              "      <td>7</td>\n",
              "      <td>159806</td>\n",
              "      <td>59.99</td>\n",
              "      <td>7882151.0</td>\n",
              "      <td>29.651061</td>\n",
              "      <td>57</td>\n",
              "      <td>3</td>\n",
              "      <td>D3PUBLISHER</td>\n",
              "      <td>SANDLOT</td>\n",
              "      <td>2291060</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Sins of a Solar Empire II</td>\n",
              "      <td>15-08-2024</td>\n",
              "      <td>8</td>\n",
              "      <td>214192</td>\n",
              "      <td>49.99</td>\n",
              "      <td>7815247.0</td>\n",
              "      <td>12.452593</td>\n",
              "      <td>88</td>\n",
              "      <td>3</td>\n",
              "      <td>Stardock Entertainment</td>\n",
              "      <td>Ironclad Games Corporation,Stardock Entertainment</td>\n",
              "      <td>1575940</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Legend of Mortal</td>\n",
              "      <td>14-06-2024</td>\n",
              "      <td>6</td>\n",
              "      <td>440998</td>\n",
              "      <td>19.99</td>\n",
              "      <td>7756399.0</td>\n",
              "      <td>24.797817</td>\n",
              "      <td>76</td>\n",
              "      <td>3</td>\n",
              "      <td>Paras Games,Obb Studio Inc.</td>\n",
              "      <td>Obb Studio Inc.</td>\n",
              "      <td>1859910</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Shin Megami Tensei V: Vengeance</td>\n",
              "      <td>13-06-2024</td>\n",
              "      <td>6</td>\n",
              "      <td>141306</td>\n",
              "      <td>59.99</td>\n",
              "      <td>7629252.0</td>\n",
              "      <td>34.258496</td>\n",
              "      <td>96</td>\n",
              "      <td>0</td>\n",
              "      <td>SEGA</td>\n",
              "      <td>ATLUS</td>\n",
              "      <td>1875830</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>Soulmask</td>\n",
              "      <td>30-05-2024</td>\n",
              "      <td>5</td>\n",
              "      <td>304685</td>\n",
              "      <td>29.99</td>\n",
              "      <td>7540563.0</td>\n",
              "      <td>95.697813</td>\n",
              "      <td>79</td>\n",
              "      <td>3</td>\n",
              "      <td>Qooland Games</td>\n",
              "      <td>CampFire Studio</td>\n",
              "      <td>2646460</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>The Universim</td>\n",
              "      <td>22-01-2024</td>\n",
              "      <td>1</td>\n",
              "      <td>328945</td>\n",
              "      <td>29.99</td>\n",
              "      <td>7534369.0</td>\n",
              "      <td>16.868531</td>\n",
              "      <td>81</td>\n",
              "      <td>3</td>\n",
              "      <td>Crytivo</td>\n",
              "      <td>Crytivo</td>\n",
              "      <td>352720</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>Bellwright</td>\n",
              "      <td>23-04-2024</td>\n",
              "      <td>4</td>\n",
              "      <td>280955</td>\n",
              "      <td>29.99</td>\n",
              "      <td>7481940.0</td>\n",
              "      <td>41.418885</td>\n",
              "      <td>78</td>\n",
              "      <td>3</td>\n",
              "      <td>Donkey Crew,Snail Games USA</td>\n",
              "      <td>Donkey Crew</td>\n",
              "      <td>1812450</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>Night of the Dead</td>\n",
              "      <td>31-05-2024</td>\n",
              "      <td>5</td>\n",
              "      <td>394364</td>\n",
              "      <td>29.99</td>\n",
              "      <td>7091792.0</td>\n",
              "      <td>27.597072</td>\n",
              "      <td>79</td>\n",
              "      <td>3</td>\n",
              "      <td>Jackto Studios</td>\n",
              "      <td>Jackto Studios</td>\n",
              "      <td>1377380</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>Empires of the Undergrowth</td>\n",
              "      <td>07-06-2024</td>\n",
              "      <td>6</td>\n",
              "      <td>408292</td>\n",
              "      <td>29.99</td>\n",
              "      <td>6950952.0</td>\n",
              "      <td>38.602124</td>\n",
              "      <td>95</td>\n",
              "      <td>0</td>\n",
              "      <td>Hooded Horse,Slug Disco</td>\n",
              "      <td>Slug Disco</td>\n",
              "      <td>463530</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2ae04b51-3002-43d8-ba7d-61058c68db1e')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-2ae04b51-3002-43d8-ba7d-61058c68db1e button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-2ae04b51-3002-43d8-ba7d-61058c68db1e');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-46c953ef-cd9a-4da6-916a-b9196e379eb8\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-46c953ef-cd9a-4da6-916a-b9196e379eb8')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-46c953ef-cd9a-4da6-916a-b9196e379eb8 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df_standarscaler",
              "summary": "{\n  \"name\": \"df_standarscaler\",\n  \"rows\": 1500,\n  \"fields\": [\n    {\n      \"column\": \"name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1500,\n        \"samples\": [\n          \"Out of the Park Baseball 25\",\n          \"Tomorrow's Love Puzzle\",\n          \"HAREM\\uff01RANCH LIFE\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"releaseDate\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 235,\n        \"samples\": [\n          \"22-08-2024\",\n          \"23-03-2024\",\n          \"08-06-2024\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"bulan rilis\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2,\n        \"min\": 1,\n        \"max\": 9,\n        \"num_unique_values\": 9,\n        \"samples\": [\n          9,\n          7,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"copiesSold\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1132756,\n        \"min\": 593,\n        \"max\": 30739148,\n        \"num_unique_values\": 1460,\n        \"samples\": [\n          5885,\n          63753,\n          5046\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"price\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 12.646611586491048,\n        \"min\": 0.0,\n        \"max\": 99.99,\n        \"num_unique_values\": 58,\n        \"samples\": [\n          99.99,\n          24.99,\n          1.99\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"revenue\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 27810239.622256387,\n        \"min\": 20674.0,\n        \"max\": 837793356.0,\n        \"num_unique_values\": 1497,\n        \"samples\": [\n          23195.0,\n          491385.0,\n          331297.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"avgPlaytime\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 21.54217256267663,\n        \"min\": 0.0,\n        \"max\": 296.3328524525871,\n        \"num_unique_values\": 1500,\n        \"samples\": [\n          85.41960491706307,\n          4.02736735920015,\n          3.634375724102398\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"reviewScore\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 24,\n        \"min\": 0,\n        \"max\": 100,\n        \"num_unique_values\": 72,\n        \"samples\": [\n          96,\n          45,\n          89\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"publisherClass\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 3,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          3,\n          2,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"publishers\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1132,\n        \"samples\": [\n          \"KOMODO\",\n          \"Nutaku Publishing\",\n          \"Alpherior\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"developers\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1408,\n        \"samples\": [\n          \"\\u4e0a\\u6d77\\u6d32\\u7ade\\u7f51\\u7edc\\u79d1\\u6280\\u6709\\u9650\\u516c\\u53f8\",\n          \"Family Devs\",\n          \"TYPE-MOON,fuzz Inc.\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"steamId\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 606772,\n        \"min\": 24880,\n        \"max\": 3107330,\n        \"num_unique_values\": 1500,\n        \"samples\": [\n          2384620,\n          2726890,\n          2420240\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 203
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.preprocessing import StandardScaler\n",
        "\n",
        "# Pilih kolom yang akan di-handle outliernya\n",
        "cols_to_scale = [\"copiesSold\", \"price\", \"revenue\", \"avgPlaytime\", \"reviewScore\"]\n",
        "\n",
        "# Buat objek StandardScaler\n",
        "scaler = StandardScaler()\n",
        "\n",
        "# Lakukan scaling pada kolom yang dipilih\n",
        "df_standarscaler[cols_to_scale] = scaler.fit_transform(df_standarscaler[cols_to_scale])\n",
        "\n",
        "# Tampilkan hasil\n",
        "df_standarscaler.head(10)"
      ],
      "metadata": {
        "id": "WHonfaXtYb3S",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "88b685d3-068a-4eff-f34d-4a90d0e24c9b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                              name releaseDate  bulan rilis  copiesSold  \\\n",
              "0                         WWE 2K24  07-03-2024            3    0.021034   \n",
              "1            EARTH DEFENSE FORCE 6  25-07-2024            7    0.016181   \n",
              "2        Sins of a Solar Empire II  15-08-2024            8    0.064209   \n",
              "3                 Legend of Mortal  14-06-2024            6    0.264501   \n",
              "4  Shin Megami Tensei V: Vengeance  13-06-2024            6   -0.000156   \n",
              "5                         Soulmask  30-05-2024            5    0.144124   \n",
              "6                    The Universim  22-01-2024            1    0.165547   \n",
              "7                       Bellwright  23-04-2024            4    0.123168   \n",
              "8                Night of the Dead  31-05-2024            5    0.223319   \n",
              "9       Empires of the Undergrowth  07-06-2024            6    0.235618   \n",
              "\n",
              "      price   revenue  avgPlaytime  reviewScore  publisherClass  \\\n",
              "0  6.523328  0.195055     1.383908    -0.213947               1   \n",
              "1  3.359370  0.188834     0.793516    -0.789810               3   \n",
              "2  2.568381  0.186428    -0.005113     0.485316               3   \n",
              "3  0.195413  0.184311     0.568150    -0.008281               3   \n",
              "4  3.359370  0.179737     1.007467     0.814380               0   \n",
              "5  0.986402  0.176547     3.860466     0.115118               3   \n",
              "6  0.986402  0.176324     0.199946     0.197384               3   \n",
              "7  0.986402  0.174438     1.339967     0.073985               3   \n",
              "8  0.986402  0.160405     0.698137     0.115118               3   \n",
              "9  0.986402  0.155339     1.209168     0.773247               0   \n",
              "\n",
              "                    publishers  \\\n",
              "0                           2K   \n",
              "1                  D3PUBLISHER   \n",
              "2       Stardock Entertainment   \n",
              "3  Paras Games,Obb Studio Inc.   \n",
              "4                         SEGA   \n",
              "5                Qooland Games   \n",
              "6                      Crytivo   \n",
              "7  Donkey Crew,Snail Games USA   \n",
              "8               Jackto Studios   \n",
              "9      Hooded Horse,Slug Disco   \n",
              "\n",
              "                                          developers  steamId  \n",
              "0                                    Visual Concepts  2315690  \n",
              "1                                            SANDLOT  2291060  \n",
              "2  Ironclad Games Corporation,Stardock Entertainment  1575940  \n",
              "3                                    Obb Studio Inc.  1859910  \n",
              "4                                              ATLUS  1875830  \n",
              "5                                    CampFire Studio  2646460  \n",
              "6                                            Crytivo   352720  \n",
              "7                                        Donkey Crew  1812450  \n",
              "8                                     Jackto Studios  1377380  \n",
              "9                                         Slug Disco   463530  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-4389305d-20a3-40dc-bade-3cbf928bfb33\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>name</th>\n",
              "      <th>releaseDate</th>\n",
              "      <th>bulan rilis</th>\n",
              "      <th>copiesSold</th>\n",
              "      <th>price</th>\n",
              "      <th>revenue</th>\n",
              "      <th>avgPlaytime</th>\n",
              "      <th>reviewScore</th>\n",
              "      <th>publisherClass</th>\n",
              "      <th>publishers</th>\n",
              "      <th>developers</th>\n",
              "      <th>steamId</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>WWE 2K24</td>\n",
              "      <td>07-03-2024</td>\n",
              "      <td>3</td>\n",
              "      <td>0.021034</td>\n",
              "      <td>6.523328</td>\n",
              "      <td>0.195055</td>\n",
              "      <td>1.383908</td>\n",
              "      <td>-0.213947</td>\n",
              "      <td>1</td>\n",
              "      <td>2K</td>\n",
              "      <td>Visual Concepts</td>\n",
              "      <td>2315690</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>EARTH DEFENSE FORCE 6</td>\n",
              "      <td>25-07-2024</td>\n",
              "      <td>7</td>\n",
              "      <td>0.016181</td>\n",
              "      <td>3.359370</td>\n",
              "      <td>0.188834</td>\n",
              "      <td>0.793516</td>\n",
              "      <td>-0.789810</td>\n",
              "      <td>3</td>\n",
              "      <td>D3PUBLISHER</td>\n",
              "      <td>SANDLOT</td>\n",
              "      <td>2291060</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Sins of a Solar Empire II</td>\n",
              "      <td>15-08-2024</td>\n",
              "      <td>8</td>\n",
              "      <td>0.064209</td>\n",
              "      <td>2.568381</td>\n",
              "      <td>0.186428</td>\n",
              "      <td>-0.005113</td>\n",
              "      <td>0.485316</td>\n",
              "      <td>3</td>\n",
              "      <td>Stardock Entertainment</td>\n",
              "      <td>Ironclad Games Corporation,Stardock Entertainment</td>\n",
              "      <td>1575940</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Legend of Mortal</td>\n",
              "      <td>14-06-2024</td>\n",
              "      <td>6</td>\n",
              "      <td>0.264501</td>\n",
              "      <td>0.195413</td>\n",
              "      <td>0.184311</td>\n",
              "      <td>0.568150</td>\n",
              "      <td>-0.008281</td>\n",
              "      <td>3</td>\n",
              "      <td>Paras Games,Obb Studio Inc.</td>\n",
              "      <td>Obb Studio Inc.</td>\n",
              "      <td>1859910</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Shin Megami Tensei V: Vengeance</td>\n",
              "      <td>13-06-2024</td>\n",
              "      <td>6</td>\n",
              "      <td>-0.000156</td>\n",
              "      <td>3.359370</td>\n",
              "      <td>0.179737</td>\n",
              "      <td>1.007467</td>\n",
              "      <td>0.814380</td>\n",
              "      <td>0</td>\n",
              "      <td>SEGA</td>\n",
              "      <td>ATLUS</td>\n",
              "      <td>1875830</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>Soulmask</td>\n",
              "      <td>30-05-2024</td>\n",
              "      <td>5</td>\n",
              "      <td>0.144124</td>\n",
              "      <td>0.986402</td>\n",
              "      <td>0.176547</td>\n",
              "      <td>3.860466</td>\n",
              "      <td>0.115118</td>\n",
              "      <td>3</td>\n",
              "      <td>Qooland Games</td>\n",
              "      <td>CampFire Studio</td>\n",
              "      <td>2646460</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>The Universim</td>\n",
              "      <td>22-01-2024</td>\n",
              "      <td>1</td>\n",
              "      <td>0.165547</td>\n",
              "      <td>0.986402</td>\n",
              "      <td>0.176324</td>\n",
              "      <td>0.199946</td>\n",
              "      <td>0.197384</td>\n",
              "      <td>3</td>\n",
              "      <td>Crytivo</td>\n",
              "      <td>Crytivo</td>\n",
              "      <td>352720</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>Bellwright</td>\n",
              "      <td>23-04-2024</td>\n",
              "      <td>4</td>\n",
              "      <td>0.123168</td>\n",
              "      <td>0.986402</td>\n",
              "      <td>0.174438</td>\n",
              "      <td>1.339967</td>\n",
              "      <td>0.073985</td>\n",
              "      <td>3</td>\n",
              "      <td>Donkey Crew,Snail Games USA</td>\n",
              "      <td>Donkey Crew</td>\n",
              "      <td>1812450</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>Night of the Dead</td>\n",
              "      <td>31-05-2024</td>\n",
              "      <td>5</td>\n",
              "      <td>0.223319</td>\n",
              "      <td>0.986402</td>\n",
              "      <td>0.160405</td>\n",
              "      <td>0.698137</td>\n",
              "      <td>0.115118</td>\n",
              "      <td>3</td>\n",
              "      <td>Jackto Studios</td>\n",
              "      <td>Jackto Studios</td>\n",
              "      <td>1377380</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>Empires of the Undergrowth</td>\n",
              "      <td>07-06-2024</td>\n",
              "      <td>6</td>\n",
              "      <td>0.235618</td>\n",
              "      <td>0.986402</td>\n",
              "      <td>0.155339</td>\n",
              "      <td>1.209168</td>\n",
              "      <td>0.773247</td>\n",
              "      <td>0</td>\n",
              "      <td>Hooded Horse,Slug Disco</td>\n",
              "      <td>Slug Disco</td>\n",
              "      <td>463530</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4389305d-20a3-40dc-bade-3cbf928bfb33')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-4389305d-20a3-40dc-bade-3cbf928bfb33 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-4389305d-20a3-40dc-bade-3cbf928bfb33');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-16125e78-e2a8-42c9-b96f-46c41352711a\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-16125e78-e2a8-42c9-b96f-46c41352711a')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-16125e78-e2a8-42c9-b96f-46c41352711a button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df_standarscaler",
              "summary": "{\n  \"name\": \"df_standarscaler\",\n  \"rows\": 1500,\n  \"fields\": [\n    {\n      \"column\": \"name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1500,\n        \"samples\": [\n          \"Out of the Park Baseball 25\",\n          \"Tomorrow's Love Puzzle\",\n          \"HAREM\\uff01RANCH LIFE\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"releaseDate\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 235,\n        \"samples\": [\n          \"22-08-2024\",\n          \"23-03-2024\",\n          \"08-06-2024\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"bulan rilis\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2,\n        \"min\": 1,\n        \"max\": 9,\n        \"num_unique_values\": 9,\n        \"samples\": [\n          9,\n          7,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"copiesSold\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0003335000926468,\n        \"min\": -0.12441909334322045,\n        \"max\": 27.020692810829072,\n        \"num_unique_values\": 1460,\n        \"samples\": [\n          -0.11974574639516515,\n          -0.06864271518011154,\n          -0.12048666440148004\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"price\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0003335000926492,\n        \"min\": -1.3857748356384683,\n        \"max\": 6.5233276136775,\n        \"num_unique_values\": 58,\n        \"samples\": [\n          6.5233276136775,\n          0.5909075346826245,\n          -1.2283679562091374\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"revenue\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0003335000926468,\n        \"min\": -0.09394305921224555,\n        \"max\": 30.040715636658003,\n        \"num_unique_values\": 1497,\n        \"samples\": [\n          -0.09385237891649882,\n          -0.07701159840651856,\n          -0.08276995905130319\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"avgPlaytime\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0003335000926472,\n        \"min\": -0.5833623912829787,\n        \"max\": 13.177166108053413,\n        \"num_unique_values\": 1500,\n        \"samples\": [\n          3.383187041677267,\n          -0.39634734092693447,\n          -0.4145963219292304\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"reviewScore\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0003335000926465,\n        \"min\": -3.1343958261415907,\n        \"max\": 0.9789125492257571,\n        \"num_unique_values\": 72,\n        \"samples\": [\n          0.8143802142110631,\n          -1.2834070572262843,\n          0.5264486279353487\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"publisherClass\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 3,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          3,\n          2,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"publishers\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1132,\n        \"samples\": [\n          \"KOMODO\",\n          \"Nutaku Publishing\",\n          \"Alpherior\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"developers\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1408,\n        \"samples\": [\n          \"\\u4e0a\\u6d77\\u6d32\\u7ade\\u7f51\\u7edc\\u79d1\\u6280\\u6709\\u9650\\u516c\\u53f8\",\n          \"Family Devs\",\n          \"TYPE-MOON,fuzz Inc.\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"steamId\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 606772,\n        \"min\": 24880,\n        \"max\": 3107330,\n        \"num_unique_values\": 1500,\n        \"samples\": [\n          2384620,\n          2726890,\n          2420240\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 204
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Pilih kolom yang akan diplot\n",
        "cols_to_plot = [\"bulan rilis\", \"copiesSold\", \"price\", \"revenue\", \"avgPlaytime\", \"reviewScore\"]\n",
        "\n",
        "# Membuat subplots yang sesuai dengan jumlah kolom yang dipilih\n",
        "num_cols = len(cols_to_plot)\n",
        "rows = (num_cols // 3) + (num_cols % 3 > 0)  # Mengatur jumlah baris secara dinamis\n",
        "fig, axes = plt.subplots(nrows=rows, ncols=3, figsize=(15, 10))\n",
        "\n",
        "fig.suptitle('Box Plots Outlier (df_standarscaler)', fontsize=16)\n",
        "\n",
        "# Flatten axes jika hanya satu baris\n",
        "axes = axes.flatten() if num_cols > 1 else [axes]\n",
        "\n",
        "# Plot setiap kolom yang dipilih\n",
        "for i, col in enumerate(cols_to_plot):\n",
        "    df_standarscaler.boxplot(column=col, ax=axes[i])\n",
        "    axes[i].set_title(f'{col}')\n",
        "\n",
        "# Hapus subplot kosong jika ada\n",
        "for j in range(i + 1, len(axes)):\n",
        "    fig.delaxes(axes[j])\n",
        "\n",
        "plt.tight_layout(rect=[0, 0.03, 1, 0.95])\n",
        "plt.show()\n"
      ],
      "metadata": {
        "id": "RcWmcIjNa0pc",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "ee661e73-50a5-48bd-abb8-13106dc4359e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1500x1000 with 6 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Winsorizing Handling"
      ],
      "metadata": {
        "id": "C61NZeitIJWJ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df_winsorizing=df.copy()"
      ],
      "metadata": {
        "id": "C67aPs_PfUGd"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df_winsorizing.head(10)"
      ],
      "metadata": {
        "id": "AE0lIJZ7Hyop",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "67e755c8-23f7-47ad-f3ee-7c82a0ccc621"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                              name releaseDate  bulan rilis  copiesSold  \\\n",
              "0                         WWE 2K24  07-03-2024            3      165301   \n",
              "1            EARTH DEFENSE FORCE 6  25-07-2024            7      159806   \n",
              "2        Sins of a Solar Empire II  15-08-2024            8      214192   \n",
              "3                 Legend of Mortal  14-06-2024            6      440998   \n",
              "4  Shin Megami Tensei V: Vengeance  13-06-2024            6      141306   \n",
              "5                         Soulmask  30-05-2024            5      304685   \n",
              "6                    The Universim  22-01-2024            1      328945   \n",
              "7                       Bellwright  23-04-2024            4      280955   \n",
              "8                Night of the Dead  31-05-2024            5      394364   \n",
              "9       Empires of the Undergrowth  07-06-2024            6      408292   \n",
              "\n",
              "   price    revenue  avgPlaytime  reviewScore  publisherClass  \\\n",
              "0  99.99  8055097.0    42.365140           71               1   \n",
              "1  59.99  7882151.0    29.651061           57               3   \n",
              "2  49.99  7815247.0    12.452593           88               3   \n",
              "3  19.99  7756399.0    24.797817           76               3   \n",
              "4  59.99  7629252.0    34.258496           96               0   \n",
              "5  29.99  7540563.0    95.697813           79               3   \n",
              "6  29.99  7534369.0    16.868531           81               3   \n",
              "7  29.99  7481940.0    41.418885           78               3   \n",
              "8  29.99  7091792.0    27.597072           79               3   \n",
              "9  29.99  6950952.0    38.602124           95               0   \n",
              "\n",
              "                    publishers  \\\n",
              "0                           2K   \n",
              "1                  D3PUBLISHER   \n",
              "2       Stardock Entertainment   \n",
              "3  Paras Games,Obb Studio Inc.   \n",
              "4                         SEGA   \n",
              "5                Qooland Games   \n",
              "6                      Crytivo   \n",
              "7  Donkey Crew,Snail Games USA   \n",
              "8               Jackto Studios   \n",
              "9      Hooded Horse,Slug Disco   \n",
              "\n",
              "                                          developers  steamId  \n",
              "0                                    Visual Concepts  2315690  \n",
              "1                                            SANDLOT  2291060  \n",
              "2  Ironclad Games Corporation,Stardock Entertainment  1575940  \n",
              "3                                    Obb Studio Inc.  1859910  \n",
              "4                                              ATLUS  1875830  \n",
              "5                                    CampFire Studio  2646460  \n",
              "6                                            Crytivo   352720  \n",
              "7                                        Donkey Crew  1812450  \n",
              "8                                     Jackto Studios  1377380  \n",
              "9                                         Slug Disco   463530  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-d3883698-0793-495c-bec2-6e64e0b03970\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>name</th>\n",
              "      <th>releaseDate</th>\n",
              "      <th>bulan rilis</th>\n",
              "      <th>copiesSold</th>\n",
              "      <th>price</th>\n",
              "      <th>revenue</th>\n",
              "      <th>avgPlaytime</th>\n",
              "      <th>reviewScore</th>\n",
              "      <th>publisherClass</th>\n",
              "      <th>publishers</th>\n",
              "      <th>developers</th>\n",
              "      <th>steamId</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>WWE 2K24</td>\n",
              "      <td>07-03-2024</td>\n",
              "      <td>3</td>\n",
              "      <td>165301</td>\n",
              "      <td>99.99</td>\n",
              "      <td>8055097.0</td>\n",
              "      <td>42.365140</td>\n",
              "      <td>71</td>\n",
              "      <td>1</td>\n",
              "      <td>2K</td>\n",
              "      <td>Visual Concepts</td>\n",
              "      <td>2315690</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>EARTH DEFENSE FORCE 6</td>\n",
              "      <td>25-07-2024</td>\n",
              "      <td>7</td>\n",
              "      <td>159806</td>\n",
              "      <td>59.99</td>\n",
              "      <td>7882151.0</td>\n",
              "      <td>29.651061</td>\n",
              "      <td>57</td>\n",
              "      <td>3</td>\n",
              "      <td>D3PUBLISHER</td>\n",
              "      <td>SANDLOT</td>\n",
              "      <td>2291060</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Sins of a Solar Empire II</td>\n",
              "      <td>15-08-2024</td>\n",
              "      <td>8</td>\n",
              "      <td>214192</td>\n",
              "      <td>49.99</td>\n",
              "      <td>7815247.0</td>\n",
              "      <td>12.452593</td>\n",
              "      <td>88</td>\n",
              "      <td>3</td>\n",
              "      <td>Stardock Entertainment</td>\n",
              "      <td>Ironclad Games Corporation,Stardock Entertainment</td>\n",
              "      <td>1575940</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Legend of Mortal</td>\n",
              "      <td>14-06-2024</td>\n",
              "      <td>6</td>\n",
              "      <td>440998</td>\n",
              "      <td>19.99</td>\n",
              "      <td>7756399.0</td>\n",
              "      <td>24.797817</td>\n",
              "      <td>76</td>\n",
              "      <td>3</td>\n",
              "      <td>Paras Games,Obb Studio Inc.</td>\n",
              "      <td>Obb Studio Inc.</td>\n",
              "      <td>1859910</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Shin Megami Tensei V: Vengeance</td>\n",
              "      <td>13-06-2024</td>\n",
              "      <td>6</td>\n",
              "      <td>141306</td>\n",
              "      <td>59.99</td>\n",
              "      <td>7629252.0</td>\n",
              "      <td>34.258496</td>\n",
              "      <td>96</td>\n",
              "      <td>0</td>\n",
              "      <td>SEGA</td>\n",
              "      <td>ATLUS</td>\n",
              "      <td>1875830</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>Soulmask</td>\n",
              "      <td>30-05-2024</td>\n",
              "      <td>5</td>\n",
              "      <td>304685</td>\n",
              "      <td>29.99</td>\n",
              "      <td>7540563.0</td>\n",
              "      <td>95.697813</td>\n",
              "      <td>79</td>\n",
              "      <td>3</td>\n",
              "      <td>Qooland Games</td>\n",
              "      <td>CampFire Studio</td>\n",
              "      <td>2646460</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>The Universim</td>\n",
              "      <td>22-01-2024</td>\n",
              "      <td>1</td>\n",
              "      <td>328945</td>\n",
              "      <td>29.99</td>\n",
              "      <td>7534369.0</td>\n",
              "      <td>16.868531</td>\n",
              "      <td>81</td>\n",
              "      <td>3</td>\n",
              "      <td>Crytivo</td>\n",
              "      <td>Crytivo</td>\n",
              "      <td>352720</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>Bellwright</td>\n",
              "      <td>23-04-2024</td>\n",
              "      <td>4</td>\n",
              "      <td>280955</td>\n",
              "      <td>29.99</td>\n",
              "      <td>7481940.0</td>\n",
              "      <td>41.418885</td>\n",
              "      <td>78</td>\n",
              "      <td>3</td>\n",
              "      <td>Donkey Crew,Snail Games USA</td>\n",
              "      <td>Donkey Crew</td>\n",
              "      <td>1812450</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>Night of the Dead</td>\n",
              "      <td>31-05-2024</td>\n",
              "      <td>5</td>\n",
              "      <td>394364</td>\n",
              "      <td>29.99</td>\n",
              "      <td>7091792.0</td>\n",
              "      <td>27.597072</td>\n",
              "      <td>79</td>\n",
              "      <td>3</td>\n",
              "      <td>Jackto Studios</td>\n",
              "      <td>Jackto Studios</td>\n",
              "      <td>1377380</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>Empires of the Undergrowth</td>\n",
              "      <td>07-06-2024</td>\n",
              "      <td>6</td>\n",
              "      <td>408292</td>\n",
              "      <td>29.99</td>\n",
              "      <td>6950952.0</td>\n",
              "      <td>38.602124</td>\n",
              "      <td>95</td>\n",
              "      <td>0</td>\n",
              "      <td>Hooded Horse,Slug Disco</td>\n",
              "      <td>Slug Disco</td>\n",
              "      <td>463530</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d3883698-0793-495c-bec2-6e64e0b03970')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-d3883698-0793-495c-bec2-6e64e0b03970 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-d3883698-0793-495c-bec2-6e64e0b03970');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-26f52f43-effa-4d4e-8960-ec6a3226334a\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-26f52f43-effa-4d4e-8960-ec6a3226334a')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-26f52f43-effa-4d4e-8960-ec6a3226334a button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df_winsorizing",
              "summary": "{\n  \"name\": \"df_winsorizing\",\n  \"rows\": 1500,\n  \"fields\": [\n    {\n      \"column\": \"name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1500,\n        \"samples\": [\n          \"Out of the Park Baseball 25\",\n          \"Tomorrow's Love Puzzle\",\n          \"HAREM\\uff01RANCH LIFE\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"releaseDate\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 235,\n        \"samples\": [\n          \"22-08-2024\",\n          \"23-03-2024\",\n          \"08-06-2024\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"bulan rilis\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2,\n        \"min\": 1,\n        \"max\": 9,\n        \"num_unique_values\": 9,\n        \"samples\": [\n          9,\n          7,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"copiesSold\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1132756,\n        \"min\": 593,\n        \"max\": 30739148,\n        \"num_unique_values\": 1460,\n        \"samples\": [\n          5885,\n          63753,\n          5046\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"price\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 12.646611586491048,\n        \"min\": 0.0,\n        \"max\": 99.99,\n        \"num_unique_values\": 58,\n        \"samples\": [\n          99.99,\n          24.99,\n          1.99\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"revenue\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 27810239.622256387,\n        \"min\": 20674.0,\n        \"max\": 837793356.0,\n        \"num_unique_values\": 1497,\n        \"samples\": [\n          23195.0,\n          491385.0,\n          331297.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"avgPlaytime\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 21.54217256267663,\n        \"min\": 0.0,\n        \"max\": 296.3328524525871,\n        \"num_unique_values\": 1500,\n        \"samples\": [\n          85.41960491706307,\n          4.02736735920015,\n          3.634375724102398\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"reviewScore\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 24,\n        \"min\": 0,\n        \"max\": 100,\n        \"num_unique_values\": 72,\n        \"samples\": [\n          96,\n          45,\n          89\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"publisherClass\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 3,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          3,\n          2,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"publishers\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1132,\n        \"samples\": [\n          \"KOMODO\",\n          \"Nutaku Publishing\",\n          \"Alpherior\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"developers\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1408,\n        \"samples\": [\n          \"\\u4e0a\\u6d77\\u6d32\\u7ade\\u7f51\\u7edc\\u79d1\\u6280\\u6709\\u9650\\u516c\\u53f8\",\n          \"Family Devs\",\n          \"TYPE-MOON,fuzz Inc.\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"steamId\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 606772,\n        \"min\": 24880,\n        \"max\": 3107330,\n        \"num_unique_values\": 1500,\n        \"samples\": [\n          2384620,\n          2726890,\n          2420240\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 207
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from scipy.stats.mstats import winsorize\n",
        "\n",
        "# Pilih kolom yang akan di-winsorize\n",
        "cols_to_winsorize = [\"copiesSold\", \"price\", \"revenue\", \"avgPlaytime\", \"reviewScore\"]\n",
        "\n",
        "# Lakukan winsorizing pada setiap kolom yang dipilih\n",
        "for col in cols_to_winsorize:\n",
        "  df_winsorizing[col] = winsorize(df_winsorizing[col], limits=[0.05, 0.05])  # Mengubah 5% data terkecil dan terbesar\n",
        "\n",
        "# Tampilkan hasil\n",
        "df_winsorizing.head(10)\n"
      ],
      "metadata": {
        "id": "NomC34B-fuVy",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "75132b4f-929a-4902-999d-2f62963d00f2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                              name releaseDate  bulan rilis  copiesSold  \\\n",
              "0                         WWE 2K24  07-03-2024            3      165301   \n",
              "1            EARTH DEFENSE FORCE 6  25-07-2024            7      159806   \n",
              "2        Sins of a Solar Empire II  15-08-2024            8      214192   \n",
              "3                 Legend of Mortal  14-06-2024            6      305891   \n",
              "4  Shin Megami Tensei V: Vengeance  13-06-2024            6      141306   \n",
              "5                         Soulmask  30-05-2024            5      304685   \n",
              "6                    The Universim  22-01-2024            1      305891   \n",
              "7                       Bellwright  23-04-2024            4      280955   \n",
              "8                Night of the Dead  31-05-2024            5      305891   \n",
              "9       Empires of the Undergrowth  07-06-2024            6      305891   \n",
              "\n",
              "   price    revenue  avgPlaytime  reviewScore  publisherClass  \\\n",
              "0  39.99  4552032.0    39.894615           71               1   \n",
              "1  39.99  4552032.0    29.651061           57               3   \n",
              "2  39.99  4552032.0    12.452593           88               3   \n",
              "3  19.99  4552032.0    24.797817           76               3   \n",
              "4  39.99  4552032.0    34.258496           96               0   \n",
              "5  29.99  4552032.0    39.894615           79               3   \n",
              "6  29.99  4552032.0    16.868531           81               3   \n",
              "7  29.99  4552032.0    39.894615           78               3   \n",
              "8  29.99  4552032.0    27.597072           79               3   \n",
              "9  29.99  4552032.0    38.602124           95               0   \n",
              "\n",
              "                    publishers  \\\n",
              "0                           2K   \n",
              "1                  D3PUBLISHER   \n",
              "2       Stardock Entertainment   \n",
              "3  Paras Games,Obb Studio Inc.   \n",
              "4                         SEGA   \n",
              "5                Qooland Games   \n",
              "6                      Crytivo   \n",
              "7  Donkey Crew,Snail Games USA   \n",
              "8               Jackto Studios   \n",
              "9      Hooded Horse,Slug Disco   \n",
              "\n",
              "                                          developers  steamId  \n",
              "0                                    Visual Concepts  2315690  \n",
              "1                                            SANDLOT  2291060  \n",
              "2  Ironclad Games Corporation,Stardock Entertainment  1575940  \n",
              "3                                    Obb Studio Inc.  1859910  \n",
              "4                                              ATLUS  1875830  \n",
              "5                                    CampFire Studio  2646460  \n",
              "6                                            Crytivo   352720  \n",
              "7                                        Donkey Crew  1812450  \n",
              "8                                     Jackto Studios  1377380  \n",
              "9                                         Slug Disco   463530  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-183e1775-0ffd-4ba8-b413-43f38a804a2a\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>name</th>\n",
              "      <th>releaseDate</th>\n",
              "      <th>bulan rilis</th>\n",
              "      <th>copiesSold</th>\n",
              "      <th>price</th>\n",
              "      <th>revenue</th>\n",
              "      <th>avgPlaytime</th>\n",
              "      <th>reviewScore</th>\n",
              "      <th>publisherClass</th>\n",
              "      <th>publishers</th>\n",
              "      <th>developers</th>\n",
              "      <th>steamId</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>WWE 2K24</td>\n",
              "      <td>07-03-2024</td>\n",
              "      <td>3</td>\n",
              "      <td>165301</td>\n",
              "      <td>39.99</td>\n",
              "      <td>4552032.0</td>\n",
              "      <td>39.894615</td>\n",
              "      <td>71</td>\n",
              "      <td>1</td>\n",
              "      <td>2K</td>\n",
              "      <td>Visual Concepts</td>\n",
              "      <td>2315690</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>EARTH DEFENSE FORCE 6</td>\n",
              "      <td>25-07-2024</td>\n",
              "      <td>7</td>\n",
              "      <td>159806</td>\n",
              "      <td>39.99</td>\n",
              "      <td>4552032.0</td>\n",
              "      <td>29.651061</td>\n",
              "      <td>57</td>\n",
              "      <td>3</td>\n",
              "      <td>D3PUBLISHER</td>\n",
              "      <td>SANDLOT</td>\n",
              "      <td>2291060</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Sins of a Solar Empire II</td>\n",
              "      <td>15-08-2024</td>\n",
              "      <td>8</td>\n",
              "      <td>214192</td>\n",
              "      <td>39.99</td>\n",
              "      <td>4552032.0</td>\n",
              "      <td>12.452593</td>\n",
              "      <td>88</td>\n",
              "      <td>3</td>\n",
              "      <td>Stardock Entertainment</td>\n",
              "      <td>Ironclad Games Corporation,Stardock Entertainment</td>\n",
              "      <td>1575940</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Legend of Mortal</td>\n",
              "      <td>14-06-2024</td>\n",
              "      <td>6</td>\n",
              "      <td>305891</td>\n",
              "      <td>19.99</td>\n",
              "      <td>4552032.0</td>\n",
              "      <td>24.797817</td>\n",
              "      <td>76</td>\n",
              "      <td>3</td>\n",
              "      <td>Paras Games,Obb Studio Inc.</td>\n",
              "      <td>Obb Studio Inc.</td>\n",
              "      <td>1859910</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Shin Megami Tensei V: Vengeance</td>\n",
              "      <td>13-06-2024</td>\n",
              "      <td>6</td>\n",
              "      <td>141306</td>\n",
              "      <td>39.99</td>\n",
              "      <td>4552032.0</td>\n",
              "      <td>34.258496</td>\n",
              "      <td>96</td>\n",
              "      <td>0</td>\n",
              "      <td>SEGA</td>\n",
              "      <td>ATLUS</td>\n",
              "      <td>1875830</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>Soulmask</td>\n",
              "      <td>30-05-2024</td>\n",
              "      <td>5</td>\n",
              "      <td>304685</td>\n",
              "      <td>29.99</td>\n",
              "      <td>4552032.0</td>\n",
              "      <td>39.894615</td>\n",
              "      <td>79</td>\n",
              "      <td>3</td>\n",
              "      <td>Qooland Games</td>\n",
              "      <td>CampFire Studio</td>\n",
              "      <td>2646460</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>The Universim</td>\n",
              "      <td>22-01-2024</td>\n",
              "      <td>1</td>\n",
              "      <td>305891</td>\n",
              "      <td>29.99</td>\n",
              "      <td>4552032.0</td>\n",
              "      <td>16.868531</td>\n",
              "      <td>81</td>\n",
              "      <td>3</td>\n",
              "      <td>Crytivo</td>\n",
              "      <td>Crytivo</td>\n",
              "      <td>352720</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>Bellwright</td>\n",
              "      <td>23-04-2024</td>\n",
              "      <td>4</td>\n",
              "      <td>280955</td>\n",
              "      <td>29.99</td>\n",
              "      <td>4552032.0</td>\n",
              "      <td>39.894615</td>\n",
              "      <td>78</td>\n",
              "      <td>3</td>\n",
              "      <td>Donkey Crew,Snail Games USA</td>\n",
              "      <td>Donkey Crew</td>\n",
              "      <td>1812450</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>Night of the Dead</td>\n",
              "      <td>31-05-2024</td>\n",
              "      <td>5</td>\n",
              "      <td>305891</td>\n",
              "      <td>29.99</td>\n",
              "      <td>4552032.0</td>\n",
              "      <td>27.597072</td>\n",
              "      <td>79</td>\n",
              "      <td>3</td>\n",
              "      <td>Jackto Studios</td>\n",
              "      <td>Jackto Studios</td>\n",
              "      <td>1377380</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>Empires of the Undergrowth</td>\n",
              "      <td>07-06-2024</td>\n",
              "      <td>6</td>\n",
              "      <td>305891</td>\n",
              "      <td>29.99</td>\n",
              "      <td>4552032.0</td>\n",
              "      <td>38.602124</td>\n",
              "      <td>95</td>\n",
              "      <td>0</td>\n",
              "      <td>Hooded Horse,Slug Disco</td>\n",
              "      <td>Slug Disco</td>\n",
              "      <td>463530</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-183e1775-0ffd-4ba8-b413-43f38a804a2a')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-183e1775-0ffd-4ba8-b413-43f38a804a2a button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-183e1775-0ffd-4ba8-b413-43f38a804a2a');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-26dab7a0-f659-44b5-8504-58bfe0c0a4bd\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-26dab7a0-f659-44b5-8504-58bfe0c0a4bd')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-26dab7a0-f659-44b5-8504-58bfe0c0a4bd button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df_winsorizing",
              "summary": "{\n  \"name\": \"df_winsorizing\",\n  \"rows\": 1500,\n  \"fields\": [\n    {\n      \"column\": \"name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1500,\n        \"samples\": [\n          \"Out of the Park Baseball 25\",\n          \"Tomorrow's Love Puzzle\",\n          \"HAREM\\uff01RANCH LIFE\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"releaseDate\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 235,\n        \"samples\": [\n          \"22-08-2024\",\n          \"23-03-2024\",\n          \"08-06-2024\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"bulan rilis\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2,\n        \"min\": 1,\n        \"max\": 9,\n        \"num_unique_values\": 9,\n        \"samples\": [\n          9,\n          7,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"copiesSold\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 76903,\n        \"min\": 1865,\n        \"max\": 305891,\n        \"num_unique_values\": 1310,\n        \"samples\": [\n          2675,\n          224772,\n          13157\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"price\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 10.449378701146939,\n        \"min\": 0.0,\n        \"max\": 39.99,\n        \"num_unique_values\": 52,\n        \"samples\": [\n          7.99,\n          27.99,\n          25.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"revenue\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1136287.765194405,\n        \"min\": 23873.0,\n        \"max\": 4552032.0,\n        \"num_unique_values\": 1348,\n        \"samples\": [\n          104827.0,\n          36435.0,\n          36601.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"avgPlaytime\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 10.309707785954428,\n        \"min\": 1.458558207454325,\n        \"max\": 39.89461498709381,\n        \"num_unique_values\": 1350,\n        \"samples\": [\n          8.163045434052988,\n          11.52473408115772,\n          5.88196947795539\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"reviewScore\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 24,\n        \"min\": 0,\n        \"max\": 98,\n        \"num_unique_values\": 70,\n        \"samples\": [\n          87,\n          71,\n          43\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"publisherClass\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 3,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          3,\n          2,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"publishers\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1132,\n        \"samples\": [\n          \"KOMODO\",\n          \"Nutaku Publishing\",\n          \"Alpherior\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"developers\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1408,\n        \"samples\": [\n          \"\\u4e0a\\u6d77\\u6d32\\u7ade\\u7f51\\u7edc\\u79d1\\u6280\\u6709\\u9650\\u516c\\u53f8\",\n          \"Family Devs\",\n          \"TYPE-MOON,fuzz Inc.\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"steamId\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 606772,\n        \"min\": 24880,\n        \"max\": 3107330,\n        \"num_unique_values\": 1500,\n        \"samples\": [\n          2384620,\n          2726890,\n          2420240\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 208
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "# Pilih kolom yang akan diplot\n",
        "cols_to_plot = [\"bulan rilis\", \"copiesSold\", \"price\", \"revenue\", \"avgPlaytime\", \"reviewScore\"]\n",
        "\n",
        "# Membuat subplots yang sesuai dengan jumlah kolom yang dipilih\n",
        "num_cols = len(cols_to_plot)\n",
        "rows = (num_cols // 3) + (num_cols % 3 > 0)  # Mengatur jumlah baris secara dinamis\n",
        "fig, axes = plt.subplots(nrows=rows, ncols=3, figsize=(15, 10))\n",
        "\n",
        "fig.suptitle('Box Plots Outlier (df_winsorizing)', fontsize=16)\n",
        "\n",
        "# Flatten axes jika hanya satu baris\n",
        "axes = axes.flatten() if num_cols > 1 else [axes]\n",
        "\n",
        "# Plot setiap kolom yang dipilih\n",
        "for i, col in enumerate(cols_to_plot):\n",
        "    df_winsorizing.boxplot(column=col, ax=axes[i])\n",
        "    axes[i].set_title(f'{col}')\n",
        "\n",
        "# Hapus subplot kosong jika ada\n",
        "for j in range(i + 1, len(axes)):\n",
        "    fig.delaxes(axes[j])\n",
        "\n",
        "plt.tight_layout(rect=[0, 0.03, 1, 0.95])\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "Vl13uy4zd8zN",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "e37cb839-04b4-4105-ba28-81ee0459f9ff"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1500x1000 with 6 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAABdEAAAO7CAYAAAC76s0MAAAAOnRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjEwLjAsIGh0dHBzOi8vbWF0cGxvdGxpYi5vcmcvlHJYcgAAAAlwSFlzAAAPYQAAD2EBqD+naQABAABJREFUeJzs3XlcFXX////nYQcRVBTUcCGs3FITN1xxxV1D2xe1zbxQL8XK9GMubZapWWlaXaV2XVqmuZQ7LiCmlmnmlksmagnijgICwvz+8Md8OcJRUOAgPu63GzfOzPs1M68znGHOvM77vMdiGIYhAAAAAAAAAACQg4O9EwAAAAAAAAAAoLiiiA4AAAAAAAAAgA0U0QEAAAAAAAAAsIEiOgAAAAAAAAAANlBEBwAAAAAAAADABoroAAAAAAAAAADYQBEdAAAAAAAAAAAbKKIDAAAAAAAAAGADRXQAAAAAAAAAAGygiA4AAO5o1atXl8ViyfHj6emp+vXra9SoUTp79qy907Rpzpw5OXJ3cHCQt7e3mjRponfeeUeXL1/OsVxW7J1u27ZteuGFF3TffffJ09NTpUqVUo0aNfT8889ry5YtdskpKipKFotFISEhOdqK634/efKkSpcurR49euRrudjYWFksFlWvXj3X9tmzZ6tRo0YqVaqU+dxjY2NvP+FblHW82zOHwlJQr63i8hp94YUX5OTkpD179tg7FQAAgNvmZO8EAAAACkKLFi1Uo0YNSVJmZqZOnjypLVu26L333tPXX3+tmJgY3XvvvXbO0rZSpUqpb9++kqSMjAz99ddf2rZtm7Zv366vv/5amzZtkp+fX6FsOzY2VgEBAapWrVqRFSfT0tI0aNAgffXVV5KkwMBAhYaGymKxaPfu3frqq6/01VdfacCAAZo1a5ZcXFwKbNtZBUbDMApsnfb26quvKjk5We+++26BrXPFihV67rnn5Obmpg4dOsjHx0eS5OnpWWDbQMk1fvx4zZs3T0OHDtXGjRvtnQ4AAMBtoYgOAABKhBdeeEH9+/e3mhcfH682bdro0KFDeu2117Ro0SL7JJcH5cuX15w5c6zm/fLLL2rfvr0OHTqkV199VV9//bV9kisEjz/+uJYsWSIfHx/NmTNH3bt3t2pftWqV+vXrp9mzZ+vixYv6/vvv7ZSptT/++MPeKeSwfft2zZ8/X4888ogefPDBAlvvwoULJUkff/yxXnzxxQJb7+1Yv3690tPTdc8999g7lQJXUK+t4vIa9ff31wsvvKDp06frhx9+UM+ePe2dEgAAwC1jOBcAAFBiVaxYUa+++qqka8W3O02TJk00YsQISdLixYt19epVO2dUML744gstWbJEzs7OWr16dY4CuiR16dJFa9askbOzsxYvXqwvv/zSDpnmVLNmTdWsWdPeaViZNm2aJOn5558v0PUeP35cknTfffcV6HpvR2BgoGrWrClnZ2d7p1LgCuq1VZxeo1mvyazXKAAAwJ2KIjoAACjRKlasKEk2C9DJycl677331LBhQ5UuXVoeHh6qU6eOxowZo/Pnz1vFLlq0SBaLRRUqVNDff/+dY11r1qyRo6OjvL29dfjw4QLJPygoSJKUlJSkM2fO5GmZc+fOafTo0apTp448PDxUunRpBQUFadKkSUpJSbGK7d+/vwICAiRJx44dyzE+e5bMzEx9/vnnatGihcqUKSNnZ2f5+vqqfv36GjJkSJ6HgTEMQxMnTpQkvfzyy2rUqJHN2IceekiDBg2SJL377rtWw69kjSV//bcPsuQ21vf48eOtntP1zzUvz+FG401fvXpV//nPfxQSEqJy5crJ1dVVAQEBGjRokE6cOJEjPvvY68nJyRo7dqxq1aolDw8Pm2OUX+/UqVNatGiRKleurI4dO9qMW758udq0aaPSpUvL29tbrVq10rJly3KN7d+/vywWizkER9u2bc3nbWt/27J7925ZLBbVq1cvR9ukSZPM9e7fv9+q7fjx47JYLKpatarVfFtjooeEhMhisSgqKkq7du1SWFiYypcvL1dXV9WuXVtTpkzJdfie1NRUffDBBwoKClLp0qXl4uKiihUrqnHjxnrttdd07ty5HMv8/fffGjJkiO677z65ubnJ29tbLVq00GeffaaMjIwc8dlfq+fOndOwYcMUGBgoV1dXq3H3c3ttZf0tbvRz/WvF1ms0+77buHGjOnXqpLJly8rd3V0NGza84Tddzp49q6FDh6pq1apydXVVtWrVNGzYMF24cMHM8fpv0khSgwYNVL9+fW3cuLHY9JAHAAC4FQznAgAASrRffvlFklSnTp0cbefOnVP79u21a9cueXl5qV27dnJ2dlZ0dLTeeecdzZ8/Xxs2bDCLVH379tWQIUP0ySef6IknntDGjRvl5HTt7dQ///yjZ555RpmZmfriiy8KrPduYmKi+djV1fWm8X/99ZfatWunY8eOqUKFCuratavS09O1ceNGjRw5UgsWLNC6detUtmxZSVLLli11+fJlff/991bjsl/vhRde0OzZs+Xm5qaWLVuqQoUKOnfunP766y9Nnz5d7du3z1Phd/fu3Tp69Kgk6dlnn71p/LPPPquPP/5Yf/31l/bu3Xtbw5U0aNBA/fr109y5cyVJ/fr1s2q/nbG+L126pJ49eyoqKkqenp4KCgpShQoVtGfPHs2aNUsLFy5UZGSkHnrooRzLXrlyRSEhIdq/f79at26t+vXr5/lmuCtXrlRaWpratWsnB4fc+8d8+OGHioiIkHTt2w2BgYE6fPiwevfubc7PrmXLlpKk1atX69SpUwoNDTU/jMpqy6sHH3xQvr6+2rt3rxISEuTr62u2rVu3zupx7dq1c7R16NAhX9tbs2aNpk6dqsDAQHXs2FFxcXHavHmzXnnlFZ04ccKqR3RmZqa6deum9evXy8vLS61atVKZMmV0+vRpHT58WB988IGefPJJlStXzlxm+/bt6ty5s86dO6eqVauqd+/eunjxoqKiorRlyxYtWbJEP/zwQ65j+J85c0aNGjXShQsX1KpVKwUFBd10rP8b7e8dO3Zo7969cnR0zNc++uqrr/T222+rYcOG6ty5s2JjY7Vt2zb169fPLPJnFxcXp1atWunIkSMqV66cunfvrszMTH399ddavXq1atWqdcPtdezYUb///ruWLl1601gAAIBiywAAALiDVatWzZBkzJ4925yXkZFh/P3338Ynn3xiuLq6Go6OjsaPP/6YY9nHHnvMkGQ0bdrUOHPmjDn/0qVLRpcuXQxJRvPmza2WSU1NNZo0aWJIMkaOHGkYhmGkp6cbLVu2NCQZ4eHh+cp/9uzZhiSjWrVqubb37dvXkGRUrVrVar4kI7e3ck2bNjUkGT179jQuX75szk9ISDAaNmxoSDKefPJJq2WOHj16wxyOHTtmSDL8/f2NuLi4HO379+83jh07dpNnes2XX35pSDJcXFyM9PT0m8anp6cbLi4uhiTjq6++Mudn7bd+/frlutyNnpOtfZdl48aNhiSjTZs2eV72ySefNCQZ3bt3N06dOmXV9uGHHxqSjPvuu8+4evVqju1IMurVq5frvr2Zp59+2pBkzJgxI9f233//3XB0dDQcHByMhQsXWrX973//MywWi8391KZNG0OSsXHjxnznld0TTzxhSDLmzZtnzrty5Yrh7u5u1KlTx3BwcDB69Ohx02UM4/8d70ePHs01V0nGrFmzrNrWr19vWCwWw9HR0Thx4oQ5Pzo62pBkPPTQQ0ZiYmKOvLdv3271f+HKlSvm9l9++WUjLS3NbDty5IhRvXp1Q5IxevRoq/VkvVYlGe3btzcuXryY63662esyu507dxqenp6Go6OjsWzZsjytJyt3Z2fnHP8Ps3L09vY2kpOTrdoefvhhQ5IREhJilfv58+fN/3vX/w/ObvHixeZzBwAAuFMxnAsAACgRBgwYYA5j4OjoKH9/fw0ZMkT16tVTdHR0jnG3jx8/roULF8pisejzzz+Xj4+P2ebp6akvvvhCbm5u2rJli7Zs2WK2ubi4aMGCBSpbtqwmTZqklStX6v/+7/+0efNmBQUFacqUKbf9XDIyMvTnn39q2LBh5s1Qr+8dmpvNmzfr559/loeHhz7//HOVKlXKbKtQoYI+//xzSdK3336b63A0tpw6dUqS1LBhQ7NHcna1atXKMeyGLadPn5YklStXzuzFfyNOTk5mT+CsZYubP/74Q998840qV66s+fPnW/W2lq797bp27arDhw9r1apVua5j+vTpue7bm/ntt98kyWYP308++UQZGRl65JFHcnzL4KmnniqSmz1m9SaPjIw05/30009KSUlR3759FRQUpKioKHPIJcMwtGHDBlksFrVv3z5f2woLC9PAgQOt5rVr106hoaHKyMgwh6iR/t/rulWrVipdunSOdTVq1Mjq/8LChQt17NgxVa5cWdOmTbMal/3ee+/V5MmTJV3b51euXMmxPmdnZ33++efy8vLK13O63rFjx9StWzddvnxZH3/8cb7/hkOGDMnx/7B///6qWbOmLl68qF9//dVqW0uXLpWDg4NmzpxplXuZMmU0c+ZMm8MbZcn6FtDOnTvzlScAAEBxQhEdAACUCC1atFC/fv3Mn27duqlKlSravn27hg8fnmOM8k2bNikzM1MPPfRQruM133PPPQoNDZUkq8KbdG1s4azxf5944gl98MEH8vb21nfffZenIVdyk308cicnJ91333366KOP5ODgoIiIiDwV0aOioiRJnTt3lp+fX472oKAg1a9fX5mZmYqOjs5zbjVr1lTp0qW1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V1dXhYWFafPmzfL19aWIDgAAABQCxkQHAAAAijlHR0fNmjVLffr00fr167V8+XKzLWtM9JkzZ8rR0dFeKQIAAAAlFj3RAQAAgDtAWFiYvv/++1zHRP/+++8VFhZmp8wAAACAko2e6AAAAMAdIiwsTL169dLGjRu1atUqdenSRW3btqUHOgAAAFCIKKIDAAAAdxBHR0e1adNGSUlJatOmDQV0AACKueTkZB04cOCWl7+ckqote46obPlf5enuesvrqVmzpjkMHID8oYgOAAAAAAAAFJIDBw4oKCjottcz6TaX37Fjhxo2bHjbeQB3I4roAAAUkYkTJ2rx4sU6cOCA3N3d1bx5c73//vt64IEHzJiQkBBFR0dbLTdw4EDNmjXLnD5+/LgGDRqkjRs3ytPTU/369dPEiRPl5PT/TutRUVGKiIjQvn37VKVKFY0ZM0b9+/e3Wu+MGTP0wQcfKD4+XvXr19cnn3yiJk2amO1XrlzRiBEj9O233yo1NVWhoaH69NNP5efnV8B7BgAAACi5atasqR07dtzy8gfjLihi4R5NfeRBPVCpzG3lAeDWUEQHAKCIREdHKzw8XI0bN9bVq1c1evRoderUSfv371epUqXMuBdffFFvvvmmOZ39K5cZGRnq1q2bKlasqC1btiguLk7PPvusnJ2d9e6770qSjh49qm7duunll1/WvHnztH79er3wwguqVKmSQkNDJUkLFixQRESEZs2apaZNm2ratGkKDQ3VwYMHzZsWDh8+XCtWrNDChQvl7e2twYMHKywsTD/99FNR7C4AAACgRPDw8LitHuAOx87KNSZFterWV4NqPgWYGYC8oogOAEARWb16tdX0nDlz5Ovrqx07dqh169bmfA8PD1WsWDHXdaxdu1b79+/XunXr5OfnpwYNGuitt97SyJEjNX78eLm4uGjWrFkKCAjQlClTJEm1atXS5s2b9eGHH5pF9KlTp+rFF1/UgAEDJEmzZs3SihUr9NVXX+n111/XxYsX9eWXX2r+/Plq166dJGn27NmqVauWtm3bpmbNmhX4/gEAAAAAoDhysHcCAADcrS5evChJKleunNX8efPmqXz58qpbt65GjRql5ORks23r1q168MEHrYZUCQ0NVWJiovbt22fGdOjQwWqdoaGh2rp1qyQpLS1NO3bssIpxcHBQhw4dzJgdO3YoPT3dKqZm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ypUrJy8vLw0ZMkTBwcG53lQUAIC7Tb6K6H///beeeOIJnT17VhUqVFDLli21bds2s2cMAAC4ddl7eD/44IOqV6+eAgMDFRUVpfbt29sxs7xhbFSg8Kxbt8583KJFC/Xt21enTp1S3759FRsbaxbOPT09rb5FAiD/CuI+KMXNzJkzJSnHPRNmz56t/v37S5I+/PBD86blqampCg0N1aefflrEmQIAUDzlq4j+7bffFlYeAADgOvfee6/Kly+vP//8U+3bt1fFihWVkJBgFXP16lWdO3fOHK+0YsWKOnXqlFVM1vTNYrK3Z82rVKmSVUyDBg1s5svYqEDhybp58PPPP6/169erXbt2ZltAQIAGDBig2bNna/78+Te99wKAGyuJ56ysGxPfiJubm2bMmKEZM2YUQUYAANxZHOydAAAAyN3ff/+ts2fPmoXs4OBgXbhwQTt27DBjNmzYoMzMTDVt2tSM2bRpk9V4rpGRkXrggQdUtmxZM2b9+vVW24qMjDTHPA0ICFDFihWtYhITE/Xzzz8zLipgJ5cvX5YkPfzww/rzzz8VGRmpiIgIRUZG6vDhw+rdu7dVHAAAAICCQxEdAIAicvnyZe3atUu7du2SdO0Gnrt27dLx48d1+fJlvfrqq9q2bZtiY2O1fv169erVSzVq1FBoaKgkqVatWurcubNefPFF/fLLL/rpp580ePBgPf7446pcubIk6cknn5SLi4uef/557du3TwsWLNBHH31kNczKv//9b61evVpTpkzRgQMHNH78eP36668aPHiwJMlisWjYsGF6++239cMPP2jPnj169tlnVblyZbNQB6BotWzZUpI0evRoZWZmWrVlZmbqjTfesIoDAAAAUHDyNZwLAAC4db/++qvatm1rTmcVtvv166eZM2dq9+7dmjt3ri5cuKDKlSurU6dOeuutt6yGSJk3b54GDx6s9u3bm+OWfvzxx2a7t7e31q5dq/DwcAUFBal8+fIaO3asXnrpJTOmefPmmj9/vsaMGaPRo0frvvvu09KlS1W3bl0z5rXXXlNSUpJeeuklXbhwQS1bttTq1avl5uZWmLsIgA1DhgzRa6+9pt27d8vb21spKSmSpKlTp8rd3V0pKSlycHDQkCFD7JwpAAAAUPJQRAcAoIiEhITccEzSNWvW3HQd5cqVM8dGtqVevXqKiYm5YcwjjzyiRx55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drOx39nfXQAAKKkYY4Giw83ZCQAoWhYtWiR3d/dc+0+fPq3AwMBCzAgAgDvHzcbh/Fq8eLHefPNN/f7778rMzFTlypXVvn17ux/IAQBA0VSpUiWdPn1a5cqVc3YqwB2PIjoASdLVq1fl4eGhMmXK/G1cSEhIIWUEAMCd52bjcH6sW7dOffr00euvv65//vOfslgs+u2337RmzRqHHQMAABSMrHN0zsGBooHlXAAHy8jI0LBhwxQQEKBy5crppZdekmEYZn9Ol0SXLl1an376aY77s9lseuyxxxQeHi5vb2/VrFlT06dPt4t55JFHFBsbq8mTJys0NFRly5bV0KFDZbVac83z5ZdfVqNGjfTxxx8rPDxcXl5ekm5+Gfn1+V+9elXDhg1TaGiovLy8FBYWpokTJ+b+5gAAUMxlZmZq0qRJqlatmjw9PVW5cmW9/vrrkqS9e/eqTZs28vb2VtmyZTV48GAlJSWZz80arydMmKDy5cvL399fTzzxhK5evWrG3DgOp6ena/To0brrrrvk6+uriIgIbdiwwew/duyYunbtqsDAQPn6+qpu3bpavny5JOm7775T8+bNNWbMGNWsWVM1atRQbGysZsyYYfeaZs6cqapVq8rDw0M1a9bU559//rfvwY8//qjGjRvLy8tLTZs21U8//XSrbycAAHeM6OhoDRs2LNd6QZUqVfTqq6/q4Ycflr+/vwYPHpzjci6//vqrunTpIn9/f5UqVUpRUVE6fPiw2f/xxx+rdu3a8vLyUq1atfT+++8X9ksFSiRmogMONmfOHD322GP68ccftXPnTg0ePFiVK1fWoEGDbml/mZmZqlixohYsWKCyZctqy5YtGjx4sEJDQ9W7d28z7vvvv1doaKi+//57HTp0SH369FGjRo3+9riHDh3SN998o0WLFsnV1TXfub3zzjv69ttv9fXXX6ty5co6fvy4jh8/fkuvEwCA4mDs2LH66KOP9Pbbb6tFixY6ffq09u/fr+TkZMXExCgyMlI7duxQQkKC/vWvf2nYsGF2P5SvW7dOXl5e2rBhg44ePaqBAweqbNmyZiH+RsOGDdNvv/2mr776ShUqVNDixYt1//33a+/evapevbqGDh2qq1evatOmTfL19dVvv/0mPz8/SdeuHps3b5727dunevXq5bj/xYsX65lnntG0adPUrl07LV26VAMHDlTFihXVunXrbPFJSUnq0qWL2rdvry+++EJHjhzRM888c/tvLAAAd4Cb1QsmT56scePGafz48Tk+/+TJk2rZsqWio6O1fv16+fv7a/PmzcrIyJAkzZ07V+PGjdN7772nxo0b66efftKgQYPk6+urAQMGFNrrBEokA4DDtGrVyqhdu7aRmZlptj333HNG7dq1zW1JxuLFi+2eFxAQYMyePdswDMM4cuSIIcn46aefcj3O0KFDjR49epjbAwYMMMLCwoyMjAyzrVevXkafPn1y3cf48eMNd3d3IyEhIdtreOaZZ8ztsLAw4+23384x/6eeespo06aN3esFAKCkSkxMNDw9PY2PPvooW9+HH35oBAYGGklJSWbbsmXLDBcXFyM+Pt4wjGvjdZkyZYzk5GQzZubMmYafn59hs9kMw7Afh48dO2a4uroaJ0+etDtW27ZtjbFjxxqGYRj169c3Xn755RzzTUpKMjp16mRIMsLCwow+ffoYn3zyiZGWlmbG3HfffcagQYPsnterVy+jU6dO5vb1Y/8HH3xglC1b1khNTbV7DTf77gIAwJ3uZvWCsLAwIzY21u45N9YHxo4da4SHhxtXr17N8RhVq1Y15s2bZ9f26quvGpGRkQ58JcCdieVcAAe79957ZbFYzO3IyEgdPHhQNpvtlvc5Y8YMNWnSROXLl5efn58+/PBD/fXXX3YxdevWtZtNHhoaqoSEhL/db1hYmMqXL3/LeT3yyCPas2ePatasqaefflqrV6++5X0BAFDU/f7770pPT1fbtm1z7GvYsKF8fX3NtubNmyszM1MHDhww2xo2bCgfHx9zOzIyUklJSTleybV3717ZbDbVqFFDfn5+5p+NGzeal20//fTTeu2119S8eXONHz9ev/zyi/l8X19fLVu2TIcOHdKLL74oPz8/jRo1Sv/4xz+UkpJi5t28eXO74zZv3ly///57ru9BgwYNzGXgsl4DAAC4uZvVC5o2bfq3z9+zZ4+ioqJyvAl5cnKyDh8+rMcee8zue8Nrr71mt9wLgFvDci5AIbNYLHZrpEv627XLv/rqK40ePVpTpkxRZGSkSpUqpbfeekvbt2+3i7txELVYLMrMzPzbXK4/0b8V99xzj44cOaIVK1Zo7dq16t27t9q1a6eFCxfe1n4BACiKvL29C/V4SUlJcnV11a5du7Itu5a1ZMu//vUvxcTEaNmyZVq9erUmTpyoKVOm6KmnnjJjq1atqqpVq+pf//qXXnjhBdWoUUPz58/XwIEDC/X1AACAv3ezc/S/+y6SdR+Wjz76SBEREXZ9t7J8KwB7zEQHHOzG4va2bdtUvXp1c9AqX768Tp8+bfYfPHjQnA2Wk82bN+u+++7Tk08+qcaNG6tatWpF6ldkf39/9enTRx999JHmz5+vb775RhcuXHB2WgAAOFz16tXl7e2tdevWZeurXbu2fv75ZyUnJ5ttmzdvlouLi2rWrGm2/fzzz0pNTTW3t23bJj8/P1WqVCnbPhs3biybzaaEhARVq1bN7k9ISIgZV6lSJT3xxBNatGiRRo0apY8++ijX11ClShX5+PiYedauXVubN2+2i9m8ebPq1KmT4/Nr166tX375RWlpaXavAQAA3NzN6gU306BBA8XFxeU4ES84OFgVKlTQn3/+me17Q3h4uEPyB+5kzEQHHOyvv/7SyJEj9fjjj2v37t169913NWXKFLO/TZs2eu+99xQZGSmbzabnnnsux0uxslSvXl2fffaZVq1apfDwcH3++efasWNHkRgEp06dqtDQUDVu3FguLi5asGCBQkJCVLp0aWenBgCAw3l5eem5557Ts88+Kw8PDzVv3lxnz57Vr7/+qv79+2v8+PEaMGCAXn75ZZ09e1ZPPfWUHnroIQUHB5v7uHr1qh577DG9+OKLOnr0qMaPH69hw4bJxSX73JYaNWqof//+evjhhzVlyhQ1btxYZ8+e1bp169SgQQN17txZw4cPV8eOHVWjRg1dvHhR33//vWrXri1Jevnll5WSkqJOnTopLCxMly5d0jvvvCOr1ar27dtLksaMGaPevXurcePGateunb777jstWrRIa9euzfE9eOCBB/TCCy9o0KBBGjt2rI4eParJkycXwLsNAEDJc7N6wc0MGzZM7777rvr27auxY8cqICBA27Zt0z/+8Q/VrFlTEyZM0NNPP62AgADdf//9Sk9P186dO3Xx4kWNHDmyAF8ZUPJRRAcc7OGHH1Zqaqr+8Y9/yNXVVc8884wGDx5s9k+ZMkUDBw5UVFSUKlSooOnTp2vXrl257u/xxx/XTz/9pD59+shisahfv3568skntWLFisJ4OX+rVKlSmjRpkg4ePChXV1c1a9ZMy5cvz7EQAABASfDSSy/Jzc1N48aN06lTpxQaGqonnnhCPj4+WrVqlZ555hk1a9ZMPj4+6tGjh6ZOnWr3/LZt26p69epq2bKl0tPT1a9fP7388su5Hm/27Nl67bXXNGrUKJ08eVLlypXTvffeqy5dukiSbDabhg4dqhMnTsjf31/333+/3n77bUlSq1atNGPGDD388MM6c+aMAgMD1bhxY61evdqcHR8bG6vp06dr8uTJeuaZZxQeHq7Zs2crOjo6x3z8/Pz03Xff6YknnlDjxo1Vp04dvfnmm+rRo8ftv7kAAJRwN6sX3EzZsmW1fv16jRkzRq1atZKrq6saNWpk3t/kX//6l3x8fPTWW29pzJgx8vX1Vf369TV8+PACekXAncNi3Lg4MwAAAACHe+SRR3Tp0iUtWbLE2akAAIBCFh0drUaNGmnatGnOTgXALWC6KAAAAAAAAAAAuaCIDgAAAAAAAABALljOBQAAAAAAAACAXDATHQAAAAAAAACAXFBEBwAAAAAAAAAgFxTRAQAAAAAAAADIBUV0AAAAAAAAAAByQREdAAAAAAAAAIBcUEQHAAAAAAAAACAXFNEBAAAAAAAAAMgFRXQAAAAAAAAAAHJBER0AAAAAAAAAgFxQRAcAAAAAAAAAIBcU0QEAAAAAAAAAyAVFdAAAAAAAAAAAckERHQAAAAAAAACAXFBEBwAAAAAAAAAgFxTRAQAAgCImOjpa0dHRTjn2I488oipVqjjl2AAAFGfOHL8BFCyK6AAAAEAhqVKliiwWi/knKChIUVFRWrx4caHmcerUKb388svas2dPoR4XAAA41tGjRzVw4EBVrVpVXl5eCgkJUcuWLTV+/HhnpwaUKBbDMAxnJwEAAADcCapUqaLAwECNGjVK0rVi9gcffKA///xTM2fO1BNPPCFJ5iy2DRs2FEgeO3fuVLNmzTR79mw98sgjdn1Wq1WZmZny9PQskGMDAFBSXb16VZLk4eFRKMc7dOiQmjVrJm9vbz366KOqUqWKTp8+rd27d2vFihVKS0srlDyAO4GbsxMASrrk5GT5+vo6Ow0AAFBE3HXXXXrwwQfN7YcffljVqlXT22+/bRbRncnd3d3ZKQAAUOAK4ly9sIrnWd5++20lJSVpz549CgsLs+tLSEgo1FyofaCkYzkXwIFefvllWSwW/fbbb3rggQcUGBioFi1aSJK++OILNWnSRN7e3ipTpoz69u2r48ePm88dNmyY/Pz8lJKSkm2//fr1U0hIiGw2m9m2YsUKRUVFydfXV6VKlVLnzp3166+/2j3vkUcekZ+fn06ePKnY2Fj5+fmpfPnyGj16tN2+NmzYIIvFkm2229GjR2WxWPTpp5/ate/fv189e/ZUmTJl5OXlpaZNm+rbb7+91bcNAIBCdezYMT355JOqWbOmvL29VbZsWfXq1UtHjx41Y3bu3CmLxaI5c+Zke/6qVatksVi0dOlSs23Dhg1q2rSpvLy8VLVqVX3wwQfm94KbCQkJUe3atXXkyJFcY65evapx48apSZMmCggIkK+vr6KiovT999+bMYZhqEqVKurWrVu256elpSkgIECPP/64NmzYoGbNmkmSBg4caC4tkzXe37gmetb3gcmTJ2vGjBm6++675ePjow4dOuj48eMyDEOvvvqqKlasKG9vb3Xr1k0XLlzIlkNevrsAAFAQCutcPac10dPT0zV+/HhVq1ZNnp6eqlSpkp599lmlp6ebMd27d9c999xj97yuXbvKYrHYnWtv375dFotFK1askCQdPnxYFStWzFZAl6SgoKBsbStWrFCrVq1UqlQp+fv7q1mzZpo3b55dzIIFC8z3o1y5cnrwwQd18uRJu5isWsPhw4fVqVMnlSpVSv3795ckZWZmatq0aapbt668vLwUHBysxx9/XBcvXsyWD1CcUEQHCkCvXr2UkpKiN954Q4MGDdLrr7+uhx9+WNWrV9fUqVM1fPhwrVu3Ti1bttSlS5ckSX369FFycrKWLVtmt6+UlBR999136tmzp1xdXSVJn3/+uTp37iw/Pz+9+eabeumll/Tbb7+pRYsWdgUASbLZbIqJiVHZsmU1efJktWrVSlOmTNGHH354S6/t119/1b333qvff/9d//73vzVlyhT5+voqNja20NdzBQDgVuzYsUNbtmxR37599c477+iJJ57QunXrFB0dbZ4gN23aVHfffbe+/vrrbM+fP3++AgMDFRMTI0n66aefdP/99+v8+fOaMGGCHnvsMb3yyitasmRJnvKxWq06fvy4ypYtm2tMYmKiPv74Y0VHR+vNN9/Uyy+/rLNnzyomJsZc19xisejBBx/UihUrshWxv/vuOyUmJurBBx9U7dq19corr0iSBg8erM8//1yff/65WrZs+bd5zp07V++//76eeuopjRo1Shs3blTv3r314osvauXKlXru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X19fSdl/QC8IBfHdBQCA2+Xoc/Wc9O7dWydPnrRbnzxLamqqkpOTze2IiAi5u7vrzTffVJkyZVS3bl1J14rr27Zt08aNG7PNQo+Li8txbF2+fLmk/1uapUOHDipVqpQmTpyotLS0bK9VulZ4DwoK0qxZs5Senm72r1ixQr///rs6d+6cp9drs9n06quvZuvLyMgolO8dQEEpktdO/vXXX5o9e7b++usv8wZNo0eP1sqVKzV79my98cYb+vPPP3Xs2DEtWLBAn332mWw2m0aMGKGePXtq/fr1Tn4FwP+pWrWqXnvtNY0dO1ZHjx5VbGysSpUqpSNHjmjx4sUaPHiwRo8ebcbfc889qlatml544QWlp6dnuzzM399fM2fO1EMPPaR77rlHffv2Vfny5fXXX39p2bJlat68ud5777185RgQEKBevXrp3XfflcViUdWqVbV06dIc1yubMWOGWrRoofr162vQoEG6++67debMGW3dulUnTpzQzz//fGtvFAAAhaRLly76/PPPFRAQoDp16mjr1q1au3atypYtm2N8nz59NG7cOHl5eemxxx7Ldunyyy+/rNWrV6t58+YaMmSIbDab3nvvPdWrV0979uxxWM6LFi3S//zP/6hz5846cuSIZs2apTp16tjd5CxL586dVbZsWS1YsEAdO3ZUUFCQXX/VqlVVunRpzZo1S6VKlZKvr68iIiIK5MrOgvjuAgDA7XL0uXpOHnroIX399dd64okn9P3336t58+ay2Wzav3+/vv76a61atcqcNe7j46MmTZpo27Zt6tq1qzlzvWXLlkpOTlZycnK2Ivqbb76pXbt2qXv37mrQoIEkaffu3frss89UpkwZDR8+XNK1sfjtt9/Wv/71LzVr1kwPPPCAAgMD9fPPPyslJUVz5swxC/gDBw5Uq1at1K9fP505c0bTp09XlSpVNGLEiJu+3latWunxxx/XxIkTtWfPHnXo0EHu7u46ePCgFixYoOnTp6tnz555+u8DFDlGESDJWLx4sbm9dOlSQ5Lh6+tr98fNzc3o3bu3YRiGMWjQIEOSceDAAfN5u3btMiQZ+/fvL+yXABiGYRjjx483JBlnz57N1vfNN98YLVq0MP8916pVyxg6dKjdv+EsL7zwgiHJqFatWq7H+v77742YmBgjICDA8PLyMqpWrWo88sgjxs6dO82YAQMGGL6+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Va9eXatXr9ayZcs0ZMgQdevWjdnoAAAAAAAAwC1gJjpQjG3YsEFnz55VixYt9O2332rIkCFq166dhgwZom+//VYtWrRQQkKCNmzY4OxUARQxEydOVLNmzVSqVCkFBQUpNjZWBw4csIuJjo6WxWKx+5P1wx0AACg+Tp48qQcffFBly5aVt7e36tevr507d5r9hmFo3LhxCg0Nlbe3t9q1a6eDBw86MWMAAIoWiuhAMZZVHJ8wYYIMw9DGjRu1adMmbdy4UYZhaPz48XZxAJBl48aNGjp0qLZt26Y1a9bIarWqQ4cOSk5OtosbNGiQTp8+bf6ZNGmSkzIGAAC34uLFi2revLnc3d21YsUK/fbbb5oyZYoCAwPNmEmTJumdd97RrFmztH37dvn6+iomJsa85xIAAHc6lnMBSoC4uDg9+uijOnbsmCRp6tSpCgsL04ABA5ycGYCiauXKlXbbn376qYKCgrRr1y61bNnSbPfx8VFISEhhpwcAABzkzTffVKVKlTR79myzLTw83HxsGIamTZumF198Ud26dZMkffbZZwoODtaSJUvUt2/fQs8ZAICihiI6UIxFR0frtdde08svvyxvb2+7voSEBL3yyitmHAD8ncuXL0uSypQpY9c+d+5cffHFFwoJCVHXrl310ksvycfHJ8d9pKen293UODExUZJktVpltVoLKHPgzpSRkWH+zecLcKyS9pn69ttvFRMTo169emnjxo2666679OSTT2rQoEGSpCNHjig+Pl7t2rUznxMQEKCIiAht3bo11yI64z5QeBj3gYKT188URXSgGIuKipLFYpFhGPLz89MTTzyhlJQU+fj46IsvvlBqaqosFouioqKcnSqAIiwzM1PDhw9X8+bNVa9ePbP9gQceUFhYmCpUqKBffvlFzz33nA4cOKBFixbluJ+JEydqwoQJ2dpXr16da+EdwK05niRJbtq2bZtO7nN2NkDJkpKS4uwUHOrPP//UzJkzNXLkSD3//PPasWOHnn76aXl4eGjAgAGKj4+XJAUHB9s9Lzg42OzLCeM+UHgY94GCk9dx32IYhlHAudhJTExUQECALl++LH9//8I8NFDirFu3zpwxklVMz3L99tq1a9W2bVun5AiUFCV5/BoyZIhWrFihH374QRUrVsw1bv369Wrbtq0OHTqkqlWrZuvPaUZapUqVdO7cuRL3ngHO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ed/oOAAA1CQ5OTmKiorS7t27tWXLFrm5uen+++9XcXGxxo0bpxUrVshms9njV65cqaZNm6pv376SpEceeURnzpzR1q1b9eWXX+rjjz/W2bNnf3VMDw8Pmc3mcmd5/VpOkvTkk09q2bJlKigosL/m888/12233abw8HDFxsaqWbNm9tnvqamp5eZy7NgxbdiwQRs3btTy5cv197//XcOGDdPp06cVHx+vt99+Wy+99JK+++47+2t+//vf6+zZs9qwYYOSk5PVtWtX3XvvvRX6uwMAAKNU9nv26y1dulSvvPKK/vrXv+rnn3/Wm2++qZdfflmfffaZJKlfv37aunWrPT4+Pl6NGjWyt+3atUtWq1W9e/eWr6+vfH19tXr1aofr/rWKi4s1ZMgQbd++XZ9//rkOHDigt956S+7u7pKk5ORkPfDAA3rooYe0b98+vfrqq3r55Ze1ZMkSh+PMmTNHnTt31g8//KCXX35Zx44d03333afRo0dr7969WrlypbZt21bqg3ygxrEBqHL9+vWz3XXXXfb9119/3TZo0CCHmFOnTtkk2Q4dOmSz2Wy2kSNH2saPH2/v/+ijj2xNmza1FRUV2Ww2m+3ee++1vfnmmw7H+N///V9bkyZN7PuSbC+99JJ9Pzs72ybJtmHDBpvNZrMtXrzY5u/v73CMr776ynbtfw03Mg4AADXduXPnbJJs+/bts509e9bm4eFhS0hIsPeHhobaXnzxRZvNZrP9/PPPNkm2Xbt22fuPHDlik2SbN2+eva1ly5b2/YKCAtubb75pk2Rbu3atzWaz2R599FHbyJEjbygnm81my8vLs9WvX9+2cuVKe0ynTp1sr776apljlrj+74FZs2bZfHx8bFlZWfa2wYMH21q1amX/O8Rms9natWtni4mJsdlsNltiYqLNz8/Plp+f73Ds1q1b2z766KNyvwcAAKqDqnjPPmvWLFvnzp3t/a1bt7YtW7bM4Zivv/66LTQ01Gaz2Wx79+61mUwm29mzZ22ZmZk2T09P2+uvv2578MEHbTabzfbGG2/YevfubX/tqlWrbPXr17d5eXnZevfubZsxY4btxx9/tPdv2rTJ5ubmZs/3eg8//LAtIiLCoW369Om2O+64w77fsmVLW2RkpEPME088YXv66acd2hITE21ubm62vLy8MscCagJmogNO0q1bN/v2jz/+qG+//db+6bGvr6/at28vSfbbsseNG6cvv/zS/qny0qVL9dBDD8nNzc1+jNdee83hGE899ZRSU1OVm5trH6tTp0727Tp16sjPz+83Z8Jd60bHAQCgJjly5IjGjh2r3/3ud/Lz81OrVq0kSSdPnlTjxo01aNAgLV26VJKUkpKinTt32meeHTp0SB4eHuratav9eG3atFH9+vVLjfPiiy/K19dXPj4+evvtt/XWW29p2LBhFc5Jkry8vPTHP/5RixYtkiR9//332r9/vx577LEKf/+tWrVS3bp17fuBgYG644477H+HlLSV/E3x448/Kjs7Ww0bNnT4myElJcVhyRkAAKqryn7Pfq2cnBwdO3ZMTzzxhMMx33jjDfvxOnbsqAYNGig+Pl6JiYm66667NHz4cMXHx0u6OjO9f//+9mOOHj1aZ86c0b/+9S/dd9992rp1q7p27WqfSb5nzx41a9ZMbdu2LfP7/fnnn3XPPfc4tN1zzz06cuSIioqK7G3du3d3iPnxxx+1ZMkSh+9j8ODBKi4uVkpKym/+nAFX5WF0AkBtUadOHft2dna2RowYobfffrtUXJMmTSRJI0aMkM1m07p169SjRw8lJiZq3rx5DseIjo7WqFGjSh3Dy8vLvm02mx36TCaT/bZvNzc3h1vRJclqtTrs3+g4AADUJCNGjFDLli31ySef2Nc87dixo32plXHjxun555/X3/72Ny1btkwhISEKCQmp8DjTp0/XY489Zl9v9frnklQkJ+nqki5dunTR6dOntXjxYoWHh6tly5YVzqusvx9+7W+K7OxsNWnSxOE29BLXP38FAIDqqLLfs18rOztbkvTJJ5+oZ8+eDn0ly6uYTCaFhYVp69atslgs6t+/vzp16qSCggLt379fO3bs0LRp0xxe6+XlpYiICEVEROjll1/Wk08+qVmzZumxxx6Tt7f3zf8wrnHtz6Xke/nTn/6k559/vlRsixYtKmVMoDqiiA4YoGvXrvryyy/VqlUreXiUfRp6eXlp1KhRWrp0qY4ePap27do5zGjr2rWrDh06pDZt2tx0Ho0bN9bly5eVk5NjvzDu2bOnVK63Og4AAK4kIyNDhw4d0ieffGJf43zbtm0OMSNHjtTTTz+tjRs3atmyZXrkkUfsfe3atVNhYaF++OEH+6y2o0eP6sKFC6XGatSo0Q1dY28kJ0kKCQlR9+7d9cknn2jZsmV6//33Hfo9PT0dZpdVlq5duyotLU0eHh72GfIAALiqynjPfq3AwEA1bdpU//3vf8tdM126ui76J598IovFor/+9a9yc3NTWFiY3nnnHRUUFJSaOX69O+64Q6tXr5Z09a7006dP6/Dhw2XORu/QoYO2b9/u0LZ9+3a1bdvWXtgvS9euXXXgwAFqBKh1WM4FMMDEiROVmZmpsWPHateuXTp27Jg2bdqkxx9/3OGN7bhx47Ru3TotWrSo1IX2lVde0T/+8Q9FR0frp59+0s8//6wVK1bopZdeuuE8evbsKR8fH82cOVPHjh3TsmXLSj1EpDLGAQDAldSvX18NGzbUxx9/rKNHj+qbb75RVFSUQ0ydOnUUGRmpl19+WT///LPGjh1r72vfvr0GDhyop59+Wv/5z3/0ww8/6Omnn5a3t/evzjS/1ZxKPPnkk3rrrbdks9l0//33O/S1atVKCQkJ+uWXX3T+/PmbyqUsAwcOVGhoqCIjI7V582YdP35cO3bs0P/7f/9Pu3fvrrRxAABwhsp4z3696OhoxcTE6L333tPhw4e1b98+LV68WHPnzrXH9O/fXwcOHNBPP/2kPn362NuWLl2q7t272ye/ZWRkKDw8XJ9//rn27t2rlJQUffHFF5o9e7ZGjhwp6WpBPiwsTKNHj1ZcXJxSUlLsDw2XpKlTp2rLli16/fXXdfjwYX322Wd6//33S812v96LL76oHTt2aNKkSdqzZ4+OHDmiNWvW8GBR1HgU0QEDNG3aVNu3b1dRUZEGDRqkkJAQTZ48WfXq1XNYPy08PFwNGjTQoUOH9PDDDzscY/DgwVq7dq02b96sHj16qFevXpo3b16Fbtlu0KCBPv/8c61fv14hISFavny5Xn311UofBwAAV+Lm5qYVK1YoOTlZHTt21JQpU/TOO++Uihs3bpx+/PFH9e3bt9Tty//4xz8UGBiosLAw3X///XrqqadUt27dm14K7UZzkqSxY8fKw8NDY8eOLTXea6+9puPHj6t169Zq3LjxTeVSFpPJpPXr1yssLEyPP/642rZtq4ceekgnTpxQYGBgpY0DAIAzVMZ79us9+eST+vTTT7V48WKFhISoX79+WrJkiYKDg+0xISEhqlevnrp06SJfX19JV4voRUVFDuuh+/r6qmfPnpo3b57CwsLUsWNHvfzyy3rqqacc7kL78ssv1aNHD40dO1Z33HGHXnjhBfuHAF27dtU///lPrVixQh07dtQrr7yi11577TefpdKpUyfFx8fr8OHD6tu3r+666y698soratq06Y3+eAGXZLJdvyAyAAAAgEp1+vRpNW/eXP/+97917733VulYJUXyXbt2lXtbOQAAAIAbRxEdAAAAqGTffPONsrOzFRISotTUVL3wwgv65ZdfdPjw4VIP6KwsVqtVGRkZmjZtmlJSUkqtcwoAAADg5vBgUQAAAKCSWa1WzZw5U//9739Vt25d9e7dW0uXLq2yArp09WFgAwYMUNu2bbVq1aoqGwcAAACobZiJDgAAAAAAAABAOXiwKAAAAAAAAAAA5aCIDgAAAAAAAABAOSiiAwAAAAAAAABQDoroAAAAAAAAAACUgyI6AAAAAAAAAADloIgOAAAAAAAAAEA5KKIDAAAAAAAAAFAOiugAAAAAAAAAAJSDIjoAAAAAAAAAAOX4/5U52e0bA2l2AAAAAElFTkSuQmCC\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# RobustScaler Handling"
      ],
      "metadata": {
        "id": "Qwm4B1o7IQSi"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df_robustscaler=df.copy()"
      ],
      "metadata": {
        "id": "MsPtcm6PfVv1"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df_robustscaler.head(10)"
      ],
      "metadata": {
        "id": "AuQR3oaIH6A9",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "d7cfeade-f604-49d1-fb75-509cd923e5c0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                              name releaseDate  bulan rilis  copiesSold  \\\n",
              "0                         WWE 2K24  07-03-2024            3      165301   \n",
              "1            EARTH DEFENSE FORCE 6  25-07-2024            7      159806   \n",
              "2        Sins of a Solar Empire II  15-08-2024            8      214192   \n",
              "3                 Legend of Mortal  14-06-2024            6      440998   \n",
              "4  Shin Megami Tensei V: Vengeance  13-06-2024            6      141306   \n",
              "5                         Soulmask  30-05-2024            5      304685   \n",
              "6                    The Universim  22-01-2024            1      328945   \n",
              "7                       Bellwright  23-04-2024            4      280955   \n",
              "8                Night of the Dead  31-05-2024            5      394364   \n",
              "9       Empires of the Undergrowth  07-06-2024            6      408292   \n",
              "\n",
              "   price    revenue  avgPlaytime  reviewScore  publisherClass  \\\n",
              "0  99.99  8055097.0    42.365140           71               1   \n",
              "1  59.99  7882151.0    29.651061           57               3   \n",
              "2  49.99  7815247.0    12.452593           88               3   \n",
              "3  19.99  7756399.0    24.797817           76               3   \n",
              "4  59.99  7629252.0    34.258496           96               0   \n",
              "5  29.99  7540563.0    95.697813           79               3   \n",
              "6  29.99  7534369.0    16.868531           81               3   \n",
              "7  29.99  7481940.0    41.418885           78               3   \n",
              "8  29.99  7091792.0    27.597072           79               3   \n",
              "9  29.99  6950952.0    38.602124           95               0   \n",
              "\n",
              "                    publishers  \\\n",
              "0                           2K   \n",
              "1                  D3PUBLISHER   \n",
              "2       Stardock Entertainment   \n",
              "3  Paras Games,Obb Studio Inc.   \n",
              "4                         SEGA   \n",
              "5                Qooland Games   \n",
              "6                      Crytivo   \n",
              "7  Donkey Crew,Snail Games USA   \n",
              "8               Jackto Studios   \n",
              "9      Hooded Horse,Slug Disco   \n",
              "\n",
              "                                          developers  steamId  \n",
              "0                                    Visual Concepts  2315690  \n",
              "1                                            SANDLOT  2291060  \n",
              "2  Ironclad Games Corporation,Stardock Entertainment  1575940  \n",
              "3                                    Obb Studio Inc.  1859910  \n",
              "4                                              ATLUS  1875830  \n",
              "5                                    CampFire Studio  2646460  \n",
              "6                                            Crytivo   352720  \n",
              "7                                        Donkey Crew  1812450  \n",
              "8                                     Jackto Studios  1377380  \n",
              "9                                         Slug Disco   463530  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-668fd636-3eea-4b15-b50d-feb56ff55052\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>name</th>\n",
              "      <th>releaseDate</th>\n",
              "      <th>bulan rilis</th>\n",
              "      <th>copiesSold</th>\n",
              "      <th>price</th>\n",
              "      <th>revenue</th>\n",
              "      <th>avgPlaytime</th>\n",
              "      <th>reviewScore</th>\n",
              "      <th>publisherClass</th>\n",
              "      <th>publishers</th>\n",
              "      <th>developers</th>\n",
              "      <th>steamId</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>WWE 2K24</td>\n",
              "      <td>07-03-2024</td>\n",
              "      <td>3</td>\n",
              "      <td>165301</td>\n",
              "      <td>99.99</td>\n",
              "      <td>8055097.0</td>\n",
              "      <td>42.365140</td>\n",
              "      <td>71</td>\n",
              "      <td>1</td>\n",
              "      <td>2K</td>\n",
              "      <td>Visual Concepts</td>\n",
              "      <td>2315690</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>EARTH DEFENSE FORCE 6</td>\n",
              "      <td>25-07-2024</td>\n",
              "      <td>7</td>\n",
              "      <td>159806</td>\n",
              "      <td>59.99</td>\n",
              "      <td>7882151.0</td>\n",
              "      <td>29.651061</td>\n",
              "      <td>57</td>\n",
              "      <td>3</td>\n",
              "      <td>D3PUBLISHER</td>\n",
              "      <td>SANDLOT</td>\n",
              "      <td>2291060</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Sins of a Solar Empire II</td>\n",
              "      <td>15-08-2024</td>\n",
              "      <td>8</td>\n",
              "      <td>214192</td>\n",
              "      <td>49.99</td>\n",
              "      <td>7815247.0</td>\n",
              "      <td>12.452593</td>\n",
              "      <td>88</td>\n",
              "      <td>3</td>\n",
              "      <td>Stardock Entertainment</td>\n",
              "      <td>Ironclad Games Corporation,Stardock Entertainment</td>\n",
              "      <td>1575940</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Legend of Mortal</td>\n",
              "      <td>14-06-2024</td>\n",
              "      <td>6</td>\n",
              "      <td>440998</td>\n",
              "      <td>19.99</td>\n",
              "      <td>7756399.0</td>\n",
              "      <td>24.797817</td>\n",
              "      <td>76</td>\n",
              "      <td>3</td>\n",
              "      <td>Paras Games,Obb Studio Inc.</td>\n",
              "      <td>Obb Studio Inc.</td>\n",
              "      <td>1859910</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Shin Megami Tensei V: Vengeance</td>\n",
              "      <td>13-06-2024</td>\n",
              "      <td>6</td>\n",
              "      <td>141306</td>\n",
              "      <td>59.99</td>\n",
              "      <td>7629252.0</td>\n",
              "      <td>34.258496</td>\n",
              "      <td>96</td>\n",
              "      <td>0</td>\n",
              "      <td>SEGA</td>\n",
              "      <td>ATLUS</td>\n",
              "      <td>1875830</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>Soulmask</td>\n",
              "      <td>30-05-2024</td>\n",
              "      <td>5</td>\n",
              "      <td>304685</td>\n",
              "      <td>29.99</td>\n",
              "      <td>7540563.0</td>\n",
              "      <td>95.697813</td>\n",
              "      <td>79</td>\n",
              "      <td>3</td>\n",
              "      <td>Qooland Games</td>\n",
              "      <td>CampFire Studio</td>\n",
              "      <td>2646460</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>The Universim</td>\n",
              "      <td>22-01-2024</td>\n",
              "      <td>1</td>\n",
              "      <td>328945</td>\n",
              "      <td>29.99</td>\n",
              "      <td>7534369.0</td>\n",
              "      <td>16.868531</td>\n",
              "      <td>81</td>\n",
              "      <td>3</td>\n",
              "      <td>Crytivo</td>\n",
              "      <td>Crytivo</td>\n",
              "      <td>352720</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>Bellwright</td>\n",
              "      <td>23-04-2024</td>\n",
              "      <td>4</td>\n",
              "      <td>280955</td>\n",
              "      <td>29.99</td>\n",
              "      <td>7481940.0</td>\n",
              "      <td>41.418885</td>\n",
              "      <td>78</td>\n",
              "      <td>3</td>\n",
              "      <td>Donkey Crew,Snail Games USA</td>\n",
              "      <td>Donkey Crew</td>\n",
              "      <td>1812450</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>Night of the Dead</td>\n",
              "      <td>31-05-2024</td>\n",
              "      <td>5</td>\n",
              "      <td>394364</td>\n",
              "      <td>29.99</td>\n",
              "      <td>7091792.0</td>\n",
              "      <td>27.597072</td>\n",
              "      <td>79</td>\n",
              "      <td>3</td>\n",
              "      <td>Jackto Studios</td>\n",
              "      <td>Jackto Studios</td>\n",
              "      <td>1377380</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>Empires of the Undergrowth</td>\n",
              "      <td>07-06-2024</td>\n",
              "      <td>6</td>\n",
              "      <td>408292</td>\n",
              "      <td>29.99</td>\n",
              "      <td>6950952.0</td>\n",
              "      <td>38.602124</td>\n",
              "      <td>95</td>\n",
              "      <td>0</td>\n",
              "      <td>Hooded Horse,Slug Disco</td>\n",
              "      <td>Slug Disco</td>\n",
              "      <td>463530</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-668fd636-3eea-4b15-b50d-feb56ff55052')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-668fd636-3eea-4b15-b50d-feb56ff55052 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-668fd636-3eea-4b15-b50d-feb56ff55052');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-f1454b32-9da6-480f-8596-9111d0ab62c0\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-f1454b32-9da6-480f-8596-9111d0ab62c0')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-f1454b32-9da6-480f-8596-9111d0ab62c0 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df_robustscaler",
              "summary": "{\n  \"name\": \"df_robustscaler\",\n  \"rows\": 1500,\n  \"fields\": [\n    {\n      \"column\": \"name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1500,\n        \"samples\": [\n          \"Out of the Park Baseball 25\",\n          \"Tomorrow's Love Puzzle\",\n          \"HAREM\\uff01RANCH LIFE\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"releaseDate\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 235,\n        \"samples\": [\n          \"22-08-2024\",\n          \"23-03-2024\",\n          \"08-06-2024\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"bulan rilis\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2,\n        \"min\": 1,\n        \"max\": 9,\n        \"num_unique_values\": 9,\n        \"samples\": [\n          9,\n          7,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"copiesSold\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1132756,\n        \"min\": 593,\n        \"max\": 30739148,\n        \"num_unique_values\": 1460,\n        \"samples\": [\n          5885,\n          63753,\n          5046\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"price\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 12.646611586491048,\n        \"min\": 0.0,\n        \"max\": 99.99,\n        \"num_unique_values\": 58,\n        \"samples\": [\n          99.99,\n          24.99,\n          1.99\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"revenue\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 27810239.622256387,\n        \"min\": 20674.0,\n        \"max\": 837793356.0,\n        \"num_unique_values\": 1497,\n        \"samples\": [\n          23195.0,\n          491385.0,\n          331297.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"avgPlaytime\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 21.54217256267663,\n        \"min\": 0.0,\n        \"max\": 296.3328524525871,\n        \"num_unique_values\": 1500,\n        \"samples\": [\n          85.41960491706307,\n          4.02736735920015,\n          3.634375724102398\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"reviewScore\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 24,\n        \"min\": 0,\n        \"max\": 100,\n        \"num_unique_values\": 72,\n        \"samples\": [\n          96,\n          45,\n          89\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"publisherClass\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 3,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          3,\n          2,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"publishers\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1132,\n        \"samples\": [\n          \"KOMODO\",\n          \"Nutaku Publishing\",\n          \"Alpherior\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"developers\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1408,\n        \"samples\": [\n          \"\\u4e0a\\u6d77\\u6d32\\u7ade\\u7f51\\u7edc\\u79d1\\u6280\\u6709\\u9650\\u516c\\u53f8\",\n          \"Family Devs\",\n          \"TYPE-MOON,fuzz Inc.\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"steamId\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 606772,\n        \"min\": 24880,\n        \"max\": 3107330,\n        \"num_unique_values\": 1500,\n        \"samples\": [\n          2384620,\n          2726890,\n          2420240\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 211
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.preprocessing import RobustScaler\n",
        "\n",
        "# Pilih kolom yang akan di-handle outliernya\n",
        "cols_to_scale = [\"copiesSold\", \"price\", \"revenue\", \"avgPlaytime\", \"reviewScore\"]\n",
        "\n",
        "# Buat objek RobustScaler\n",
        "scaler = RobustScaler()\n",
        "\n",
        "# Lakukan scaling pada kolom yang dipilih\n",
        "df_robustscaler[cols_to_scale] = scaler.fit_transform(df_robustscaler[cols_to_scale])\n",
        "\n",
        "# Tampilkan hasil\n",
        "df_robustscaler.head(10)"
      ],
      "metadata": {
        "id": "-KNoLR0Yeaoa",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "3e6b75db-95f5-4cb4-fad2-4cdc15d0f791"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                              name releaseDate  bulan rilis  copiesSold  \\\n",
              "0                         WWE 2K24  07-03-2024            3    4.654563   \n",
              "1            EARTH DEFENSE FORCE 6  25-07-2024            7    4.487800   \n",
              "2        Sins of a Solar Empire II  15-08-2024            8    6.138311   \n",
              "3                 Legend of Mortal  14-06-2024            6   13.021441   \n",
              "4  Shin Megami Tensei V: Vengeance  13-06-2024            6    3.926360   \n",
              "5                         Soulmask  30-05-2024            5    8.884601   \n",
              "6                    The Universim  22-01-2024            1    9.620846   \n",
              "7                       Bellwright  23-04-2024            4    8.164441   \n",
              "8                Night of the Dead  31-05-2024            5   11.606188   \n",
              "9       Empires of the Undergrowth  07-06-2024            6   12.028876   \n",
              "\n",
              "   price    revenue  avgPlaytime  reviewScore  publisherClass  \\\n",
              "0    8.5  19.397035     3.732050        -0.60               1   \n",
              "1    4.5  18.974858     2.399285        -1.30               3   \n",
              "2    3.5  18.811539     0.596440         0.25               3   \n",
              "3    0.5  18.667886     1.890540        -0.35               3   \n",
              "4    4.5  18.357508     2.882264         0.65               0   \n",
              "5    1.5  18.141010     9.322697        -0.20               3   \n",
              "6    1.5  18.125890     1.059345        -0.10               3   \n",
              "7    1.5  17.997906     3.632858        -0.25               3   \n",
              "8    1.5  17.045518     2.183974        -0.20               3   \n",
              "9    1.5  16.701714     3.337589         0.60               0   \n",
              "\n",
              "                    publishers  \\\n",
              "0                           2K   \n",
              "1                  D3PUBLISHER   \n",
              "2       Stardock Entertainment   \n",
              "3  Paras Games,Obb Studio Inc.   \n",
              "4                         SEGA   \n",
              "5                Qooland Games   \n",
              "6                      Crytivo   \n",
              "7  Donkey Crew,Snail Games USA   \n",
              "8               Jackto Studios   \n",
              "9      Hooded Horse,Slug Disco   \n",
              "\n",
              "                                          developers  steamId  \n",
              "0                                    Visual Concepts  2315690  \n",
              "1                                            SANDLOT  2291060  \n",
              "2  Ironclad Games Corporation,Stardock Entertainment  1575940  \n",
              "3                                    Obb Studio Inc.  1859910  \n",
              "4                                              ATLUS  1875830  \n",
              "5                                    CampFire Studio  2646460  \n",
              "6                                            Crytivo   352720  \n",
              "7                                        Donkey Crew  1812450  \n",
              "8                                     Jackto Studios  1377380  \n",
              "9                                         Slug Disco   463530  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-1bdfb43f-e4dc-411c-a0ce-4223bbfd000e\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>name</th>\n",
              "      <th>releaseDate</th>\n",
              "      <th>bulan rilis</th>\n",
              "      <th>copiesSold</th>\n",
              "      <th>price</th>\n",
              "      <th>revenue</th>\n",
              "      <th>avgPlaytime</th>\n",
              "      <th>reviewScore</th>\n",
              "      <th>publisherClass</th>\n",
              "      <th>publishers</th>\n",
              "      <th>developers</th>\n",
              "      <th>steamId</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>WWE 2K24</td>\n",
              "      <td>07-03-2024</td>\n",
              "      <td>3</td>\n",
              "      <td>4.654563</td>\n",
              "      <td>8.5</td>\n",
              "      <td>19.397035</td>\n",
              "      <td>3.732050</td>\n",
              "      <td>-0.60</td>\n",
              "      <td>1</td>\n",
              "      <td>2K</td>\n",
              "      <td>Visual Concepts</td>\n",
              "      <td>2315690</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>EARTH DEFENSE FORCE 6</td>\n",
              "      <td>25-07-2024</td>\n",
              "      <td>7</td>\n",
              "      <td>4.487800</td>\n",
              "      <td>4.5</td>\n",
              "      <td>18.974858</td>\n",
              "      <td>2.399285</td>\n",
              "      <td>-1.30</td>\n",
              "      <td>3</td>\n",
              "      <td>D3PUBLISHER</td>\n",
              "      <td>SANDLOT</td>\n",
              "      <td>2291060</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Sins of a Solar Empire II</td>\n",
              "      <td>15-08-2024</td>\n",
              "      <td>8</td>\n",
              "      <td>6.138311</td>\n",
              "      <td>3.5</td>\n",
              "      <td>18.811539</td>\n",
              "      <td>0.596440</td>\n",
              "      <td>0.25</td>\n",
              "      <td>3</td>\n",
              "      <td>Stardock Entertainment</td>\n",
              "      <td>Ironclad Games Corporation,Stardock Entertainment</td>\n",
              "      <td>1575940</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Legend of Mortal</td>\n",
              "      <td>14-06-2024</td>\n",
              "      <td>6</td>\n",
              "      <td>13.021441</td>\n",
              "      <td>0.5</td>\n",
              "      <td>18.667886</td>\n",
              "      <td>1.890540</td>\n",
              "      <td>-0.35</td>\n",
              "      <td>3</td>\n",
              "      <td>Paras Games,Obb Studio Inc.</td>\n",
              "      <td>Obb Studio Inc.</td>\n",
              "      <td>1859910</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Shin Megami Tensei V: Vengeance</td>\n",
              "      <td>13-06-2024</td>\n",
              "      <td>6</td>\n",
              "      <td>3.926360</td>\n",
              "      <td>4.5</td>\n",
              "      <td>18.357508</td>\n",
              "      <td>2.882264</td>\n",
              "      <td>0.65</td>\n",
              "      <td>0</td>\n",
              "      <td>SEGA</td>\n",
              "      <td>ATLUS</td>\n",
              "      <td>1875830</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>Soulmask</td>\n",
              "      <td>30-05-2024</td>\n",
              "      <td>5</td>\n",
              "      <td>8.884601</td>\n",
              "      <td>1.5</td>\n",
              "      <td>18.141010</td>\n",
              "      <td>9.322697</td>\n",
              "      <td>-0.20</td>\n",
              "      <td>3</td>\n",
              "      <td>Qooland Games</td>\n",
              "      <td>CampFire Studio</td>\n",
              "      <td>2646460</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>The Universim</td>\n",
              "      <td>22-01-2024</td>\n",
              "      <td>1</td>\n",
              "      <td>9.620846</td>\n",
              "      <td>1.5</td>\n",
              "      <td>18.125890</td>\n",
              "      <td>1.059345</td>\n",
              "      <td>-0.10</td>\n",
              "      <td>3</td>\n",
              "      <td>Crytivo</td>\n",
              "      <td>Crytivo</td>\n",
              "      <td>352720</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>Bellwright</td>\n",
              "      <td>23-04-2024</td>\n",
              "      <td>4</td>\n",
              "      <td>8.164441</td>\n",
              "      <td>1.5</td>\n",
              "      <td>17.997906</td>\n",
              "      <td>3.632858</td>\n",
              "      <td>-0.25</td>\n",
              "      <td>3</td>\n",
              "      <td>Donkey Crew,Snail Games USA</td>\n",
              "      <td>Donkey Crew</td>\n",
              "      <td>1812450</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>Night of the Dead</td>\n",
              "      <td>31-05-2024</td>\n",
              "      <td>5</td>\n",
              "      <td>11.606188</td>\n",
              "      <td>1.5</td>\n",
              "      <td>17.045518</td>\n",
              "      <td>2.183974</td>\n",
              "      <td>-0.20</td>\n",
              "      <td>3</td>\n",
              "      <td>Jackto Studios</td>\n",
              "      <td>Jackto Studios</td>\n",
              "      <td>1377380</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>Empires of the Undergrowth</td>\n",
              "      <td>07-06-2024</td>\n",
              "      <td>6</td>\n",
              "      <td>12.028876</td>\n",
              "      <td>1.5</td>\n",
              "      <td>16.701714</td>\n",
              "      <td>3.337589</td>\n",
              "      <td>0.60</td>\n",
              "      <td>0</td>\n",
              "      <td>Hooded Horse,Slug Disco</td>\n",
              "      <td>Slug Disco</td>\n",
              "      <td>463530</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-1bdfb43f-e4dc-411c-a0ce-4223bbfd000e')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-1bdfb43f-e4dc-411c-a0ce-4223bbfd000e button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-1bdfb43f-e4dc-411c-a0ce-4223bbfd000e');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-a1acda48-4785-426d-96de-0fd9935d6f04\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-a1acda48-4785-426d-96de-0fd9935d6f04')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-a1acda48-4785-426d-96de-0fd9935d6f04 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df_robustscaler",
              "summary": "{\n  \"name\": \"df_robustscaler\",\n  \"rows\": 1500,\n  \"fields\": [\n    {\n      \"column\": \"name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1500,\n        \"samples\": [\n          \"Out of the Park Baseball 25\",\n          \"Tomorrow's Love Puzzle\",\n          \"HAREM\\uff01RANCH LIFE\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"releaseDate\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 235,\n        \"samples\": [\n          \"22-08-2024\",\n          \"23-03-2024\",\n          \"08-06-2024\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"bulan rilis\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2,\n        \"min\": 1,\n        \"max\": 9,\n        \"num_unique_values\": 9,\n        \"samples\": [\n          9,\n          7,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"copiesSold\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 34.37700405311529,\n        \"min\": -0.34401080392097355,\n        \"max\": 932.5125034141604,\n        \"num_unique_values\": 1460,\n        \"samples\": [\n          -0.18340869776334556,\n          1.5727747261084641,\n          -0.2088707474735213\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"price\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.2646611586490986,\n        \"min\": -1.4990000000000003,\n        \"max\": 8.500000000000002,\n        \"num_unique_values\": 58,\n        \"samples\": [\n          8.500000000000002,\n          1.0,\n          -1.3000000000000003\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"revenue\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 67.88739144093198,\n        \"min\": -0.2157413905688358,\n        \"max\": 2044.8655946198303,\n        \"num_unique_values\": 1497,\n        \"samples\": [\n          -0.20958739419385944,\n          0.9333081087018876,\n          0.5425183539707435\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"avgPlaytime\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.2581779391574583,\n        \"min\": -0.7089141283386154,\n        \"max\": 30.35444812582064,\n        \"num_unique_values\": 1500,\n        \"samples\": [\n          8.245274073154965,\n          -0.28674166189084815,\n          -0.32793736943005547\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"reviewScore\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.2159719243069238,\n        \"min\": -4.15,\n        \"max\": 0.85,\n        \"num_unique_values\": 72,\n        \"samples\": [\n          0.65,\n          -1.9,\n          0.3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"publisherClass\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 3,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          3,\n          2,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"publishers\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1132,\n        \"samples\": [\n          \"KOMODO\",\n          \"Nutaku Publishing\",\n          \"Alpherior\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"developers\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1408,\n        \"samples\": [\n          \"\\u4e0a\\u6d77\\u6d32\\u7ade\\u7f51\\u7edc\\u79d1\\u6280\\u6709\\u9650\\u516c\\u53f8\",\n          \"Family Devs\",\n          \"TYPE-MOON,fuzz Inc.\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"steamId\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 606772,\n        \"min\": 24880,\n        \"max\": 3107330,\n        \"num_unique_values\": 1500,\n        \"samples\": [\n          2384620,\n          2726890,\n          2420240\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 212
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "# Pilih kolom yang akan diplot\n",
        "cols_to_plot = [\"bulan rilis\", \"copiesSold\", \"price\", \"revenue\", \"avgPlaytime\", \"reviewScore\"]\n",
        "\n",
        "# Membuat subplots yang sesuai dengan jumlah kolom yang dipilih\n",
        "num_cols = len(cols_to_plot)\n",
        "rows = (num_cols // 3) + (num_cols % 3 > 0)  # Mengatur jumlah baris secara dinamis\n",
        "fig, axes = plt.subplots(nrows=rows, ncols=3, figsize=(15, 10))\n",
        "\n",
        "fig.suptitle('Box Plots Outlier RobustScaler ', fontsize=16)\n",
        "\n",
        "# Flatten axes jika hanya satu baris\n",
        "axes = axes.flatten() if num_cols > 1 else [axes]\n",
        "\n",
        "# Plot setiap kolom yang dipilih\n",
        "for i, col in enumerate(cols_to_plot):\n",
        "    df_robustscaler.boxplot(column=col, ax=axes[i])\n",
        "    axes[i].set_title(f'{col}')\n",
        "\n",
        "# Hapus subplot kosong jika ada\n",
        "for j in range(i + 1, len(axes)):\n",
        "    fig.delaxes(axes[j])\n",
        "\n",
        "plt.tight_layout(rect=[0, 0.03, 1, 0.95])\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "a6RYNJwKgVEJ",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "de40d3b3-968a-41fa-c0cd-41e0274f7437"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1500x1000 with 6 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# IQR Handling"
      ],
      "metadata": {
        "id": "neNR2Y5jgupI"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df_iqr=df.copy()"
      ],
      "metadata": {
        "id": "YpdgAsY3mA7C"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df_iqr.head(10)"
      ],
      "metadata": {
        "id": "XhOso12pmDMT",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 678
        },
        "outputId": "13ef474a-5fe6-4068-8940-a36cb3516bac"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                              name releaseDate  bulan rilis  copiesSold  \\\n",
              "0                         WWE 2K24  07-03-2024            3      165301   \n",
              "1            EARTH DEFENSE FORCE 6  25-07-2024            7      159806   \n",
              "2        Sins of a Solar Empire II  15-08-2024            8      214192   \n",
              "3                 Legend of Mortal  14-06-2024            6      440998   \n",
              "4  Shin Megami Tensei V: Vengeance  13-06-2024            6      141306   \n",
              "5                         Soulmask  30-05-2024            5      304685   \n",
              "6                    The Universim  22-01-2024            1      328945   \n",
              "7                       Bellwright  23-04-2024            4      280955   \n",
              "8                Night of the Dead  31-05-2024            5      394364   \n",
              "9       Empires of the Undergrowth  07-06-2024            6      408292   \n",
              "\n",
              "   price    revenue  avgPlaytime  reviewScore  publisherClass  \\\n",
              "0  99.99  8055097.0    42.365140           71               1   \n",
              "1  59.99  7882151.0    29.651061           57               3   \n",
              "2  49.99  7815247.0    12.452593           88               3   \n",
              "3  19.99  7756399.0    24.797817           76               3   \n",
              "4  59.99  7629252.0    34.258496           96               0   \n",
              "5  29.99  7540563.0    95.697813           79               3   \n",
              "6  29.99  7534369.0    16.868531           81               3   \n",
              "7  29.99  7481940.0    41.418885           78               3   \n",
              "8  29.99  7091792.0    27.597072           79               3   \n",
              "9  29.99  6950952.0    38.602124           95               0   \n",
              "\n",
              "                    publishers  \\\n",
              "0                           2K   \n",
              "1                  D3PUBLISHER   \n",
              "2       Stardock Entertainment   \n",
              "3  Paras Games,Obb Studio Inc.   \n",
              "4                         SEGA   \n",
              "5                Qooland Games   \n",
              "6                      Crytivo   \n",
              "7  Donkey Crew,Snail Games USA   \n",
              "8               Jackto Studios   \n",
              "9      Hooded Horse,Slug Disco   \n",
              "\n",
              "                                          developers  steamId  \n",
              "0                                    Visual Concepts  2315690  \n",
              "1                                            SANDLOT  2291060  \n",
              "2  Ironclad Games Corporation,Stardock Entertainment  1575940  \n",
              "3                                    Obb Studio Inc.  1859910  \n",
              "4                                              ATLUS  1875830  \n",
              "5                                    CampFire Studio  2646460  \n",
              "6                                            Crytivo   352720  \n",
              "7                                        Donkey Crew  1812450  \n",
              "8                                     Jackto Studios  1377380  \n",
              "9                                         Slug Disco   463530  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-208182c3-a4fd-4b2e-ab61-680687d41260\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>name</th>\n",
              "      <th>releaseDate</th>\n",
              "      <th>bulan rilis</th>\n",
              "      <th>copiesSold</th>\n",
              "      <th>price</th>\n",
              "      <th>revenue</th>\n",
              "      <th>avgPlaytime</th>\n",
              "      <th>reviewScore</th>\n",
              "      <th>publisherClass</th>\n",
              "      <th>publishers</th>\n",
              "      <th>developers</th>\n",
              "      <th>steamId</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>WWE 2K24</td>\n",
              "      <td>07-03-2024</td>\n",
              "      <td>3</td>\n",
              "      <td>165301</td>\n",
              "      <td>99.99</td>\n",
              "      <td>8055097.0</td>\n",
              "      <td>42.365140</td>\n",
              "      <td>71</td>\n",
              "      <td>1</td>\n",
              "      <td>2K</td>\n",
              "      <td>Visual Concepts</td>\n",
              "      <td>2315690</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>EARTH DEFENSE FORCE 6</td>\n",
              "      <td>25-07-2024</td>\n",
              "      <td>7</td>\n",
              "      <td>159806</td>\n",
              "      <td>59.99</td>\n",
              "      <td>7882151.0</td>\n",
              "      <td>29.651061</td>\n",
              "      <td>57</td>\n",
              "      <td>3</td>\n",
              "      <td>D3PUBLISHER</td>\n",
              "      <td>SANDLOT</td>\n",
              "      <td>2291060</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Sins of a Solar Empire II</td>\n",
              "      <td>15-08-2024</td>\n",
              "      <td>8</td>\n",
              "      <td>214192</td>\n",
              "      <td>49.99</td>\n",
              "      <td>7815247.0</td>\n",
              "      <td>12.452593</td>\n",
              "      <td>88</td>\n",
              "      <td>3</td>\n",
              "      <td>Stardock Entertainment</td>\n",
              "      <td>Ironclad Games Corporation,Stardock Entertainment</td>\n",
              "      <td>1575940</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Legend of Mortal</td>\n",
              "      <td>14-06-2024</td>\n",
              "      <td>6</td>\n",
              "      <td>440998</td>\n",
              "      <td>19.99</td>\n",
              "      <td>7756399.0</td>\n",
              "      <td>24.797817</td>\n",
              "      <td>76</td>\n",
              "      <td>3</td>\n",
              "      <td>Paras Games,Obb Studio Inc.</td>\n",
              "      <td>Obb Studio Inc.</td>\n",
              "      <td>1859910</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Shin Megami Tensei V: Vengeance</td>\n",
              "      <td>13-06-2024</td>\n",
              "      <td>6</td>\n",
              "      <td>141306</td>\n",
              "      <td>59.99</td>\n",
              "      <td>7629252.0</td>\n",
              "      <td>34.258496</td>\n",
              "      <td>96</td>\n",
              "      <td>0</td>\n",
              "      <td>SEGA</td>\n",
              "      <td>ATLUS</td>\n",
              "      <td>1875830</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>Soulmask</td>\n",
              "      <td>30-05-2024</td>\n",
              "      <td>5</td>\n",
              "      <td>304685</td>\n",
              "      <td>29.99</td>\n",
              "      <td>7540563.0</td>\n",
              "      <td>95.697813</td>\n",
              "      <td>79</td>\n",
              "      <td>3</td>\n",
              "      <td>Qooland Games</td>\n",
              "      <td>CampFire Studio</td>\n",
              "      <td>2646460</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>The Universim</td>\n",
              "      <td>22-01-2024</td>\n",
              "      <td>1</td>\n",
              "      <td>328945</td>\n",
              "      <td>29.99</td>\n",
              "      <td>7534369.0</td>\n",
              "      <td>16.868531</td>\n",
              "      <td>81</td>\n",
              "      <td>3</td>\n",
              "      <td>Crytivo</td>\n",
              "      <td>Crytivo</td>\n",
              "      <td>352720</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>Bellwright</td>\n",
              "      <td>23-04-2024</td>\n",
              "      <td>4</td>\n",
              "      <td>280955</td>\n",
              "      <td>29.99</td>\n",
              "      <td>7481940.0</td>\n",
              "      <td>41.418885</td>\n",
              "      <td>78</td>\n",
              "      <td>3</td>\n",
              "      <td>Donkey Crew,Snail Games USA</td>\n",
              "      <td>Donkey Crew</td>\n",
              "      <td>1812450</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>Night of the Dead</td>\n",
              "      <td>31-05-2024</td>\n",
              "      <td>5</td>\n",
              "      <td>394364</td>\n",
              "      <td>29.99</td>\n",
              "      <td>7091792.0</td>\n",
              "      <td>27.597072</td>\n",
              "      <td>79</td>\n",
              "      <td>3</td>\n",
              "      <td>Jackto Studios</td>\n",
              "      <td>Jackto Studios</td>\n",
              "      <td>1377380</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>Empires of the Undergrowth</td>\n",
              "      <td>07-06-2024</td>\n",
              "      <td>6</td>\n",
              "      <td>408292</td>\n",
              "      <td>29.99</td>\n",
              "      <td>6950952.0</td>\n",
              "      <td>38.602124</td>\n",
              "      <td>95</td>\n",
              "      <td>0</td>\n",
              "      <td>Hooded Horse,Slug Disco</td>\n",
              "      <td>Slug Disco</td>\n",
              "      <td>463530</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-208182c3-a4fd-4b2e-ab61-680687d41260')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-208182c3-a4fd-4b2e-ab61-680687d41260 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-208182c3-a4fd-4b2e-ab61-680687d41260');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-ee8ca4e5-f33a-4721-aecf-733afb62e552\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-ee8ca4e5-f33a-4721-aecf-733afb62e552')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-ee8ca4e5-f33a-4721-aecf-733afb62e552 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df_iqr",
              "summary": "{\n  \"name\": \"df_iqr\",\n  \"rows\": 1500,\n  \"fields\": [\n    {\n      \"column\": \"name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1500,\n        \"samples\": [\n          \"Out of the Park Baseball 25\",\n          \"Tomorrow's Love Puzzle\",\n          \"HAREM\\uff01RANCH LIFE\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"releaseDate\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 235,\n        \"samples\": [\n          \"22-08-2024\",\n          \"23-03-2024\",\n          \"08-06-2024\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"bulan rilis\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2,\n        \"min\": 1,\n        \"max\": 9,\n        \"num_unique_values\": 9,\n        \"samples\": [\n          9,\n          7,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"copiesSold\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1132756,\n        \"min\": 593,\n        \"max\": 30739148,\n        \"num_unique_values\": 1460,\n        \"samples\": [\n          5885,\n          63753,\n          5046\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"price\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 12.646611586491048,\n        \"min\": 0.0,\n        \"max\": 99.99,\n        \"num_unique_values\": 58,\n        \"samples\": [\n          99.99,\n          24.99,\n          1.99\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"revenue\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 27810239.622256387,\n        \"min\": 20674.0,\n        \"max\": 837793356.0,\n        \"num_unique_values\": 1497,\n        \"samples\": [\n          23195.0,\n          491385.0,\n          331297.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"avgPlaytime\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 21.54217256267663,\n        \"min\": 0.0,\n        \"max\": 296.3328524525871,\n        \"num_unique_values\": 1500,\n        \"samples\": [\n          85.41960491706307,\n          4.02736735920015,\n          3.634375724102398\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"reviewScore\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 24,\n        \"min\": 0,\n        \"max\": 100,\n        \"num_unique_values\": 72,\n        \"samples\": [\n          96,\n          45,\n          89\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"publisherClass\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 3,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          3,\n          2,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"publishers\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1132,\n        \"samples\": [\n          \"KOMODO\",\n          \"Nutaku Publishing\",\n          \"Alpherior\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"developers\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1408,\n        \"samples\": [\n          \"\\u4e0a\\u6d77\\u6d32\\u7ade\\u7f51\\u7edc\\u79d1\\u6280\\u6709\\u9650\\u516c\\u53f8\",\n          \"Family Devs\",\n          \"TYPE-MOON,fuzz Inc.\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"steamId\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 606772,\n        \"min\": 24880,\n        \"max\": 3107330,\n        \"num_unique_values\": 1500,\n        \"samples\": [\n          2384620,\n          2726890,\n          2420240\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 215
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def handle_outliers_iqr(df, column):\n",
        "    Q1 = df[column].quantile(0.25)\n",
        "    Q3 = df[column].quantile(0.75)\n",
        "    IQR = Q3 - Q1\n",
        "    lower_bound = Q1 - (1.5 * IQR)\n",
        "    upper_bound = Q3 + (1.5 * IQR)\n",
        "\n",
        "    # Ganti outlier dengan batas atas atau batas bawah\n",
        "    df[column] = df[column].apply(lambda x: upper_bound if x > upper_bound else lower_bound if x < lower_bound else x)\n",
        "\n",
        "    return df\n",
        "\n",
        "# Kolom-kolom yang akan ditangani outlier-nya\n",
        "kolom_outlier = [\"copiesSold\", \"revenue\", \"avgPlaytime\"]\n",
        "\n",
        "# Loop melalui setiap kolom dan tangani outlier\n",
        "for kolom in kolom_outlier:\n",
        "    df_iqr = handle_outliers_iqr(df_iqr, kolom)\n",
        "\n",
        "# Tampilkan beberapa baris pertama dari DataFrame yang sudah ditangani outlier-nya\n",
        "df_iqr.head(10)"
      ],
      "metadata": {
        "id": "vgYkdwLJmER4",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 678
        },
        "outputId": "f8fab067-85c5-453f-d1b5-14d646f94ce0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                              name releaseDate  bulan rilis  copiesSold  \\\n",
              "0                         WWE 2K24  07-03-2024            3    87296.25   \n",
              "1            EARTH DEFENSE FORCE 6  25-07-2024            7    87296.25   \n",
              "2        Sins of a Solar Empire II  15-08-2024            8    87296.25   \n",
              "3                 Legend of Mortal  14-06-2024            6    87296.25   \n",
              "4  Shin Megami Tensei V: Vengeance  13-06-2024            6    87296.25   \n",
              "5                         Soulmask  30-05-2024            5    87296.25   \n",
              "6                    The Universim  22-01-2024            1    87296.25   \n",
              "7                       Bellwright  23-04-2024            4    87296.25   \n",
              "8                Night of the Dead  31-05-2024            5    87296.25   \n",
              "9       Empires of the Undergrowth  07-06-2024            6    87296.25   \n",
              "\n",
              "   price    revenue  avgPlaytime  reviewScore  publisherClass  \\\n",
              "0  99.99  1069635.5    27.413912           71               1   \n",
              "1  59.99  1069635.5    27.413912           57               3   \n",
              "2  49.99  1069635.5    12.452593           88               3   \n",
              "3  19.99  1069635.5    24.797817           76               3   \n",
              "4  59.99  1069635.5    27.413912           96               0   \n",
              "5  29.99  1069635.5    27.413912           79               3   \n",
              "6  29.99  1069635.5    16.868531           81               3   \n",
              "7  29.99  1069635.5    27.413912           78               3   \n",
              "8  29.99  1069635.5    27.413912           79               3   \n",
              "9  29.99  1069635.5    27.413912           95               0   \n",
              "\n",
              "                    publishers  \\\n",
              "0                           2K   \n",
              "1                  D3PUBLISHER   \n",
              "2       Stardock Entertainment   \n",
              "3  Paras Games,Obb Studio Inc.   \n",
              "4                         SEGA   \n",
              "5                Qooland Games   \n",
              "6                      Crytivo   \n",
              "7  Donkey Crew,Snail Games USA   \n",
              "8               Jackto Studios   \n",
              "9      Hooded Horse,Slug Disco   \n",
              "\n",
              "                                          developers  steamId  \n",
              "0                                    Visual Concepts  2315690  \n",
              "1                                            SANDLOT  2291060  \n",
              "2  Ironclad Games Corporation,Stardock Entertainment  1575940  \n",
              "3                                    Obb Studio Inc.  1859910  \n",
              "4                                              ATLUS  1875830  \n",
              "5                                    CampFire Studio  2646460  \n",
              "6                                            Crytivo   352720  \n",
              "7                                        Donkey Crew  1812450  \n",
              "8                                     Jackto Studios  1377380  \n",
              "9                                         Slug Disco   463530  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-a2cd6ed4-79a5-4cca-a952-6a7cc4123aef\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>name</th>\n",
              "      <th>releaseDate</th>\n",
              "      <th>bulan rilis</th>\n",
              "      <th>copiesSold</th>\n",
              "      <th>price</th>\n",
              "      <th>revenue</th>\n",
              "      <th>avgPlaytime</th>\n",
              "      <th>reviewScore</th>\n",
              "      <th>publisherClass</th>\n",
              "      <th>publishers</th>\n",
              "      <th>developers</th>\n",
              "      <th>steamId</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>WWE 2K24</td>\n",
              "      <td>07-03-2024</td>\n",
              "      <td>3</td>\n",
              "      <td>87296.25</td>\n",
              "      <td>99.99</td>\n",
              "      <td>1069635.5</td>\n",
              "      <td>27.413912</td>\n",
              "      <td>71</td>\n",
              "      <td>1</td>\n",
              "      <td>2K</td>\n",
              "      <td>Visual Concepts</td>\n",
              "      <td>2315690</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>EARTH DEFENSE FORCE 6</td>\n",
              "      <td>25-07-2024</td>\n",
              "      <td>7</td>\n",
              "      <td>87296.25</td>\n",
              "      <td>59.99</td>\n",
              "      <td>1069635.5</td>\n",
              "      <td>27.413912</td>\n",
              "      <td>57</td>\n",
              "      <td>3</td>\n",
              "      <td>D3PUBLISHER</td>\n",
              "      <td>SANDLOT</td>\n",
              "      <td>2291060</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Sins of a Solar Empire II</td>\n",
              "      <td>15-08-2024</td>\n",
              "      <td>8</td>\n",
              "      <td>87296.25</td>\n",
              "      <td>49.99</td>\n",
              "      <td>1069635.5</td>\n",
              "      <td>12.452593</td>\n",
              "      <td>88</td>\n",
              "      <td>3</td>\n",
              "      <td>Stardock Entertainment</td>\n",
              "      <td>Ironclad Games Corporation,Stardock Entertainment</td>\n",
              "      <td>1575940</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Legend of Mortal</td>\n",
              "      <td>14-06-2024</td>\n",
              "      <td>6</td>\n",
              "      <td>87296.25</td>\n",
              "      <td>19.99</td>\n",
              "      <td>1069635.5</td>\n",
              "      <td>24.797817</td>\n",
              "      <td>76</td>\n",
              "      <td>3</td>\n",
              "      <td>Paras Games,Obb Studio Inc.</td>\n",
              "      <td>Obb Studio Inc.</td>\n",
              "      <td>1859910</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Shin Megami Tensei V: Vengeance</td>\n",
              "      <td>13-06-2024</td>\n",
              "      <td>6</td>\n",
              "      <td>87296.25</td>\n",
              "      <td>59.99</td>\n",
              "      <td>1069635.5</td>\n",
              "      <td>27.413912</td>\n",
              "      <td>96</td>\n",
              "      <td>0</td>\n",
              "      <td>SEGA</td>\n",
              "      <td>ATLUS</td>\n",
              "      <td>1875830</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>Soulmask</td>\n",
              "      <td>30-05-2024</td>\n",
              "      <td>5</td>\n",
              "      <td>87296.25</td>\n",
              "      <td>29.99</td>\n",
              "      <td>1069635.5</td>\n",
              "      <td>27.413912</td>\n",
              "      <td>79</td>\n",
              "      <td>3</td>\n",
              "      <td>Qooland Games</td>\n",
              "      <td>CampFire Studio</td>\n",
              "      <td>2646460</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>The Universim</td>\n",
              "      <td>22-01-2024</td>\n",
              "      <td>1</td>\n",
              "      <td>87296.25</td>\n",
              "      <td>29.99</td>\n",
              "      <td>1069635.5</td>\n",
              "      <td>16.868531</td>\n",
              "      <td>81</td>\n",
              "      <td>3</td>\n",
              "      <td>Crytivo</td>\n",
              "      <td>Crytivo</td>\n",
              "      <td>352720</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>Bellwright</td>\n",
              "      <td>23-04-2024</td>\n",
              "      <td>4</td>\n",
              "      <td>87296.25</td>\n",
              "      <td>29.99</td>\n",
              "      <td>1069635.5</td>\n",
              "      <td>27.413912</td>\n",
              "      <td>78</td>\n",
              "      <td>3</td>\n",
              "      <td>Donkey Crew,Snail Games USA</td>\n",
              "      <td>Donkey Crew</td>\n",
              "      <td>1812450</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>Night of the Dead</td>\n",
              "      <td>31-05-2024</td>\n",
              "      <td>5</td>\n",
              "      <td>87296.25</td>\n",
              "      <td>29.99</td>\n",
              "      <td>1069635.5</td>\n",
              "      <td>27.413912</td>\n",
              "      <td>79</td>\n",
              "      <td>3</td>\n",
              "      <td>Jackto Studios</td>\n",
              "      <td>Jackto Studios</td>\n",
              "      <td>1377380</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>Empires of the Undergrowth</td>\n",
              "      <td>07-06-2024</td>\n",
              "      <td>6</td>\n",
              "      <td>87296.25</td>\n",
              "      <td>29.99</td>\n",
              "      <td>1069635.5</td>\n",
              "      <td>27.413912</td>\n",
              "      <td>95</td>\n",
              "      <td>0</td>\n",
              "      <td>Hooded Horse,Slug Disco</td>\n",
              "      <td>Slug Disco</td>\n",
              "      <td>463530</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a2cd6ed4-79a5-4cca-a952-6a7cc4123aef')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-a2cd6ed4-79a5-4cca-a952-6a7cc4123aef button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-a2cd6ed4-79a5-4cca-a952-6a7cc4123aef');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-bb783bd3-0991-4c32-980f-4303721c010f\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-bb783bd3-0991-4c32-980f-4303721c010f')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-bb783bd3-0991-4c32-980f-4303721c010f button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df_iqr",
              "summary": "{\n  \"name\": \"df_iqr\",\n  \"rows\": 1500,\n  \"fields\": [\n    {\n      \"column\": \"name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1500,\n        \"samples\": [\n          \"Out of the Park Baseball 25\",\n          \"Tomorrow's Love Puzzle\",\n          \"HAREM\\uff01RANCH LIFE\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"releaseDate\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 235,\n        \"samples\": [\n          \"22-08-2024\",\n          \"23-03-2024\",\n          \"08-06-2024\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"bulan rilis\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2,\n        \"min\": 1,\n        \"max\": 9,\n        \"num_unique_values\": 9,\n        \"samples\": [\n          9,\n          7,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"copiesSold\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 29527.321876292557,\n        \"min\": 593.0,\n        \"max\": 87296.25,\n        \"num_unique_values\": 1260,\n        \"samples\": [\n          12366.0,\n          27601.0,\n          22016.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"price\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 12.646611586491048,\n        \"min\": 0.0,\n        \"max\": 99.99,\n        \"num_unique_values\": 58,\n        \"samples\": [\n          99.99,\n          24.99,\n          1.99\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"revenue\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 378781.02766340785,\n        \"min\": 20674.0,\n        \"max\": 1069635.5,\n        \"num_unique_values\": 1275,\n        \"samples\": [\n          381290.0,\n          83756.0,\n          42955.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"avgPlaytime\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 8.136699960926578,\n        \"min\": 0.0,\n        \"max\": 27.413912135604043,\n        \"num_unique_values\": 1354,\n        \"samples\": [\n          11.2397919153104,\n          1.581838213848838,\n          8.635183318565998\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"reviewScore\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 24,\n        \"min\": 0,\n        \"max\": 100,\n        \"num_unique_values\": 72,\n        \"samples\": [\n          96,\n          45,\n          89\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"publisherClass\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 3,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          3,\n          2,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"publishers\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1132,\n        \"samples\": [\n          \"KOMODO\",\n          \"Nutaku Publishing\",\n          \"Alpherior\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"developers\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1408,\n        \"samples\": [\n          \"\\u4e0a\\u6d77\\u6d32\\u7ade\\u7f51\\u7edc\\u79d1\\u6280\\u6709\\u9650\\u516c\\u53f8\",\n          \"Family Devs\",\n          \"TYPE-MOON,fuzz Inc.\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"steamId\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 606772,\n        \"min\": 24880,\n        \"max\": 3107330,\n        \"num_unique_values\": 1500,\n        \"samples\": [\n          2384620,\n          2726890,\n          2420240\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 216
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "# Pilih kolom yang akan diplot\n",
        "cols_to_plot = [\"bulan rilis\", \"copiesSold\", \"price\", \"revenue\", \"avgPlaytime\", \"reviewScore\"]\n",
        "\n",
        "# Membuat subplots yang sesuai dengan jumlah kolom yang dipilih\n",
        "num_cols = len(cols_to_plot)\n",
        "rows = (num_cols // 3) + (num_cols % 3 > 0)  # Mengatur jumlah baris secara dinamis\n",
        "fig, axes = plt.subplots(nrows=rows, ncols=3, figsize=(15, 10))\n",
        "\n",
        "fig.suptitle('Plot Outlier Interquartile Range ', fontsize=16)\n",
        "\n",
        "# Flatten axes jika hanya satu baris\n",
        "axes = axes.flatten() if num_cols > 1 else [axes]\n",
        "\n",
        "# Plot setiap kolom yang dipilih\n",
        "for i, col in enumerate(cols_to_plot):\n",
        "    df_iqr.boxplot(column=col, ax=axes[i])\n",
        "    axes[i].set_title(f'{col}')\n",
        "\n",
        "# Hapus subplot kosong jika ada\n",
        "for j in range(i + 1, len(axes)):\n",
        "    fig.delaxes(axes[j])\n",
        "\n",
        "plt.tight_layout(rect=[0, 0.03, 1, 0.95])\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "thQh3tdVmHT6",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 705
        },
        "outputId": "e83a74e7-4c51-4ef7-cff7-930fb060cbe9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1500x1000 with 6 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Max-min Handling"
      ],
      "metadata": {
        "id": "Q-AT15AFbYNj"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df_maxmin = df.copy()"
      ],
      "metadata": {
        "id": "pZE3Cd0jbbQJ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df_maxmin.head(10)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 678
        },
        "id": "nZwwkEDPcOSU",
        "outputId": "f3ccd7ed-9918-4e2f-bf0b-570e305a1692"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                              name releaseDate  bulan rilis  copiesSold  \\\n",
              "0                         WWE 2K24  07-03-2024            3      165301   \n",
              "1            EARTH DEFENSE FORCE 6  25-07-2024            7      159806   \n",
              "2        Sins of a Solar Empire II  15-08-2024            8      214192   \n",
              "3                 Legend of Mortal  14-06-2024            6      440998   \n",
              "4  Shin Megami Tensei V: Vengeance  13-06-2024            6      141306   \n",
              "5                         Soulmask  30-05-2024            5      304685   \n",
              "6                    The Universim  22-01-2024            1      328945   \n",
              "7                       Bellwright  23-04-2024            4      280955   \n",
              "8                Night of the Dead  31-05-2024            5      394364   \n",
              "9       Empires of the Undergrowth  07-06-2024            6      408292   \n",
              "\n",
              "   price    revenue  avgPlaytime  reviewScore  publisherClass  \\\n",
              "0  99.99  8055097.0    42.365140           71               1   \n",
              "1  59.99  7882151.0    29.651061           57               3   \n",
              "2  49.99  7815247.0    12.452593           88               3   \n",
              "3  19.99  7756399.0    24.797817           76               3   \n",
              "4  59.99  7629252.0    34.258496           96               0   \n",
              "5  29.99  7540563.0    95.697813           79               3   \n",
              "6  29.99  7534369.0    16.868531           81               3   \n",
              "7  29.99  7481940.0    41.418885           78               3   \n",
              "8  29.99  7091792.0    27.597072           79               3   \n",
              "9  29.99  6950952.0    38.602124           95               0   \n",
              "\n",
              "                    publishers  \\\n",
              "0                           2K   \n",
              "1                  D3PUBLISHER   \n",
              "2       Stardock Entertainment   \n",
              "3  Paras Games,Obb Studio Inc.   \n",
              "4                         SEGA   \n",
              "5                Qooland Games   \n",
              "6                      Crytivo   \n",
              "7  Donkey Crew,Snail Games USA   \n",
              "8               Jackto Studios   \n",
              "9      Hooded Horse,Slug Disco   \n",
              "\n",
              "                                          developers  steamId  \n",
              "0                                    Visual Concepts  2315690  \n",
              "1                                            SANDLOT  2291060  \n",
              "2  Ironclad Games Corporation,Stardock Entertainment  1575940  \n",
              "3                                    Obb Studio Inc.  1859910  \n",
              "4                                              ATLUS  1875830  \n",
              "5                                    CampFire Studio  2646460  \n",
              "6                                            Crytivo   352720  \n",
              "7                                        Donkey Crew  1812450  \n",
              "8                                     Jackto Studios  1377380  \n",
              "9                                         Slug Disco   463530  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-9e48b286-a473-4267-addd-e1445cf5a39a\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>name</th>\n",
              "      <th>releaseDate</th>\n",
              "      <th>bulan rilis</th>\n",
              "      <th>copiesSold</th>\n",
              "      <th>price</th>\n",
              "      <th>revenue</th>\n",
              "      <th>avgPlaytime</th>\n",
              "      <th>reviewScore</th>\n",
              "      <th>publisherClass</th>\n",
              "      <th>publishers</th>\n",
              "      <th>developers</th>\n",
              "      <th>steamId</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>WWE 2K24</td>\n",
              "      <td>07-03-2024</td>\n",
              "      <td>3</td>\n",
              "      <td>165301</td>\n",
              "      <td>99.99</td>\n",
              "      <td>8055097.0</td>\n",
              "      <td>42.365140</td>\n",
              "      <td>71</td>\n",
              "      <td>1</td>\n",
              "      <td>2K</td>\n",
              "      <td>Visual Concepts</td>\n",
              "      <td>2315690</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>EARTH DEFENSE FORCE 6</td>\n",
              "      <td>25-07-2024</td>\n",
              "      <td>7</td>\n",
              "      <td>159806</td>\n",
              "      <td>59.99</td>\n",
              "      <td>7882151.0</td>\n",
              "      <td>29.651061</td>\n",
              "      <td>57</td>\n",
              "      <td>3</td>\n",
              "      <td>D3PUBLISHER</td>\n",
              "      <td>SANDLOT</td>\n",
              "      <td>2291060</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Sins of a Solar Empire II</td>\n",
              "      <td>15-08-2024</td>\n",
              "      <td>8</td>\n",
              "      <td>214192</td>\n",
              "      <td>49.99</td>\n",
              "      <td>7815247.0</td>\n",
              "      <td>12.452593</td>\n",
              "      <td>88</td>\n",
              "      <td>3</td>\n",
              "      <td>Stardock Entertainment</td>\n",
              "      <td>Ironclad Games Corporation,Stardock Entertainment</td>\n",
              "      <td>1575940</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Legend of Mortal</td>\n",
              "      <td>14-06-2024</td>\n",
              "      <td>6</td>\n",
              "      <td>440998</td>\n",
              "      <td>19.99</td>\n",
              "      <td>7756399.0</td>\n",
              "      <td>24.797817</td>\n",
              "      <td>76</td>\n",
              "      <td>3</td>\n",
              "      <td>Paras Games,Obb Studio Inc.</td>\n",
              "      <td>Obb Studio Inc.</td>\n",
              "      <td>1859910</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Shin Megami Tensei V: Vengeance</td>\n",
              "      <td>13-06-2024</td>\n",
              "      <td>6</td>\n",
              "      <td>141306</td>\n",
              "      <td>59.99</td>\n",
              "      <td>7629252.0</td>\n",
              "      <td>34.258496</td>\n",
              "      <td>96</td>\n",
              "      <td>0</td>\n",
              "      <td>SEGA</td>\n",
              "      <td>ATLUS</td>\n",
              "      <td>1875830</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>Soulmask</td>\n",
              "      <td>30-05-2024</td>\n",
              "      <td>5</td>\n",
              "      <td>304685</td>\n",
              "      <td>29.99</td>\n",
              "      <td>7540563.0</td>\n",
              "      <td>95.697813</td>\n",
              "      <td>79</td>\n",
              "      <td>3</td>\n",
              "      <td>Qooland Games</td>\n",
              "      <td>CampFire Studio</td>\n",
              "      <td>2646460</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>The Universim</td>\n",
              "      <td>22-01-2024</td>\n",
              "      <td>1</td>\n",
              "      <td>328945</td>\n",
              "      <td>29.99</td>\n",
              "      <td>7534369.0</td>\n",
              "      <td>16.868531</td>\n",
              "      <td>81</td>\n",
              "      <td>3</td>\n",
              "      <td>Crytivo</td>\n",
              "      <td>Crytivo</td>\n",
              "      <td>352720</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>Bellwright</td>\n",
              "      <td>23-04-2024</td>\n",
              "      <td>4</td>\n",
              "      <td>280955</td>\n",
              "      <td>29.99</td>\n",
              "      <td>7481940.0</td>\n",
              "      <td>41.418885</td>\n",
              "      <td>78</td>\n",
              "      <td>3</td>\n",
              "      <td>Donkey Crew,Snail Games USA</td>\n",
              "      <td>Donkey Crew</td>\n",
              "      <td>1812450</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>Night of the Dead</td>\n",
              "      <td>31-05-2024</td>\n",
              "      <td>5</td>\n",
              "      <td>394364</td>\n",
              "      <td>29.99</td>\n",
              "      <td>7091792.0</td>\n",
              "      <td>27.597072</td>\n",
              "      <td>79</td>\n",
              "      <td>3</td>\n",
              "      <td>Jackto Studios</td>\n",
              "      <td>Jackto Studios</td>\n",
              "      <td>1377380</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>Empires of the Undergrowth</td>\n",
              "      <td>07-06-2024</td>\n",
              "      <td>6</td>\n",
              "      <td>408292</td>\n",
              "      <td>29.99</td>\n",
              "      <td>6950952.0</td>\n",
              "      <td>38.602124</td>\n",
              "      <td>95</td>\n",
              "      <td>0</td>\n",
              "      <td>Hooded Horse,Slug Disco</td>\n",
              "      <td>Slug Disco</td>\n",
              "      <td>463530</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9e48b286-a473-4267-addd-e1445cf5a39a')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-9e48b286-a473-4267-addd-e1445cf5a39a button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-9e48b286-a473-4267-addd-e1445cf5a39a');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-fe1df5eb-df4e-4b51-b597-e2f58b0b6e9e\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-fe1df5eb-df4e-4b51-b597-e2f58b0b6e9e')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-fe1df5eb-df4e-4b51-b597-e2f58b0b6e9e button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df_maxmin",
              "summary": "{\n  \"name\": \"df_maxmin\",\n  \"rows\": 1500,\n  \"fields\": [\n    {\n      \"column\": \"name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1500,\n        \"samples\": [\n          \"Out of the Park Baseball 25\",\n          \"Tomorrow's Love Puzzle\",\n          \"HAREM\\uff01RANCH LIFE\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"releaseDate\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 235,\n        \"samples\": [\n          \"22-08-2024\",\n          \"23-03-2024\",\n          \"08-06-2024\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"bulan rilis\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2,\n        \"min\": 1,\n        \"max\": 9,\n        \"num_unique_values\": 9,\n        \"samples\": [\n          9,\n          7,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"copiesSold\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1132756,\n        \"min\": 593,\n        \"max\": 30739148,\n        \"num_unique_values\": 1460,\n        \"samples\": [\n          5885,\n          63753,\n          5046\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"price\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 12.646611586491048,\n        \"min\": 0.0,\n        \"max\": 99.99,\n        \"num_unique_values\": 58,\n        \"samples\": [\n          99.99,\n          24.99,\n          1.99\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"revenue\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 27810239.622256387,\n        \"min\": 20674.0,\n        \"max\": 837793356.0,\n        \"num_unique_values\": 1497,\n        \"samples\": [\n          23195.0,\n          491385.0,\n          331297.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"avgPlaytime\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 21.54217256267663,\n        \"min\": 0.0,\n        \"max\": 296.3328524525871,\n        \"num_unique_values\": 1500,\n        \"samples\": [\n          85.41960491706307,\n          4.02736735920015,\n          3.634375724102398\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"reviewScore\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 24,\n        \"min\": 0,\n        \"max\": 100,\n        \"num_unique_values\": 72,\n        \"samples\": [\n          96,\n          45,\n          89\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"publisherClass\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 3,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          3,\n          2,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"publishers\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1132,\n        \"samples\": [\n          \"KOMODO\",\n          \"Nutaku Publishing\",\n          \"Alpherior\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"developers\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1408,\n        \"samples\": [\n          \"\\u4e0a\\u6d77\\u6d32\\u7ade\\u7f51\\u7edc\\u79d1\\u6280\\u6709\\u9650\\u516c\\u53f8\",\n          \"Family Devs\",\n          \"TYPE-MOON,fuzz Inc.\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"steamId\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 606772,\n        \"min\": 24880,\n        \"max\": 3107330,\n        \"num_unique_values\": 1500,\n        \"samples\": [\n          2384620,\n          2726890,\n          2420240\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 219
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Buat objek scaler\n",
        "scaler = MinMaxScaler()\n",
        "\n",
        "# Lakukan scaling dan buat kolom baru\n",
        "# Nama kolom baru akan sama dengan aslinya ditambah akhiran '_maxmin'\n",
        "scaled_cols = [col + '_maxmin' for col in cols_to_scale]\n",
        "df_maxmin[scaled_cols] = scaler.fit_transform(df_maxmin[cols_to_scale])\n",
        "\n",
        "df_maxmin.head()\n"
      ],
      "metadata": {
        "id": "fdAnu9Q5fNyr",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 417
        },
        "outputId": "80ae5fe5-9d2d-489b-d9fc-e1c8b3db6489"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                              name releaseDate  bulan rilis  copiesSold  \\\n",
              "0                         WWE 2K24  07-03-2024            3      165301   \n",
              "1            EARTH DEFENSE FORCE 6  25-07-2024            7      159806   \n",
              "2        Sins of a Solar Empire II  15-08-2024            8      214192   \n",
              "3                 Legend of Mortal  14-06-2024            6      440998   \n",
              "4  Shin Megami Tensei V: Vengeance  13-06-2024            6      141306   \n",
              "\n",
              "   price    revenue  avgPlaytime  reviewScore  publisherClass  \\\n",
              "0  99.99  8055097.0    42.365140           71               1   \n",
              "1  59.99  7882151.0    29.651061           57               3   \n",
              "2  49.99  7815247.0    12.452593           88               3   \n",
              "3  19.99  7756399.0    24.797817           76               3   \n",
              "4  59.99  7629252.0    34.258496           96               0   \n",
              "\n",
              "                    publishers  \\\n",
              "0                           2K   \n",
              "1                  D3PUBLISHER   \n",
              "2       Stardock Entertainment   \n",
              "3  Paras Games,Obb Studio Inc.   \n",
              "4                         SEGA   \n",
              "\n",
              "                                          developers  steamId  \\\n",
              "0                                    Visual Concepts  2315690   \n",
              "1                                            SANDLOT  2291060   \n",
              "2  Ironclad Games Corporation,Stardock Entertainment  1575940   \n",
              "3                                    Obb Studio Inc.  1859910   \n",
              "4                                              ATLUS  1875830   \n",
              "\n",
              "   copiesSold_maxmin  price_maxmin  revenue_maxmin  avgPlaytime_maxmin  \\\n",
              "0           0.005358       1.00000        0.009590            0.142965   \n",
              "1           0.005180       0.59996        0.009384            0.100060   \n",
              "2           0.006949       0.49995        0.009304            0.042022   \n",
              "3           0.014327       0.19992        0.009234            0.083682   \n",
              "4           0.004578       0.59996        0.009082            0.115608   \n",
              "\n",
              "   reviewScore_maxmin  \n",
              "0                0.71  \n",
              "1                0.57  \n",
              "2                0.88  \n",
              "3                0.76  \n",
              "4                0.96  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-3a5ef58c-a2a7-4227-9b20-2ad5e3c28a8d\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>name</th>\n",
              "      <th>releaseDate</th>\n",
              "      <th>bulan rilis</th>\n",
              "      <th>copiesSold</th>\n",
              "      <th>price</th>\n",
              "      <th>revenue</th>\n",
              "      <th>avgPlaytime</th>\n",
              "      <th>reviewScore</th>\n",
              "      <th>publisherClass</th>\n",
              "      <th>publishers</th>\n",
              "      <th>developers</th>\n",
              "      <th>steamId</th>\n",
              "      <th>copiesSold_maxmin</th>\n",
              "      <th>price_maxmin</th>\n",
              "      <th>revenue_maxmin</th>\n",
              "      <th>avgPlaytime_maxmin</th>\n",
              "      <th>reviewScore_maxmin</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>WWE 2K24</td>\n",
              "      <td>07-03-2024</td>\n",
              "      <td>3</td>\n",
              "      <td>165301</td>\n",
              "      <td>99.99</td>\n",
              "      <td>8055097.0</td>\n",
              "      <td>42.365140</td>\n",
              "      <td>71</td>\n",
              "      <td>1</td>\n",
              "      <td>2K</td>\n",
              "      <td>Visual Concepts</td>\n",
              "      <td>2315690</td>\n",
              "      <td>0.005358</td>\n",
              "      <td>1.00000</td>\n",
              "      <td>0.009590</td>\n",
              "      <td>0.142965</td>\n",
              "      <td>0.71</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>EARTH DEFENSE FORCE 6</td>\n",
              "      <td>25-07-2024</td>\n",
              "      <td>7</td>\n",
              "      <td>159806</td>\n",
              "      <td>59.99</td>\n",
              "      <td>7882151.0</td>\n",
              "      <td>29.651061</td>\n",
              "      <td>57</td>\n",
              "      <td>3</td>\n",
              "      <td>D3PUBLISHER</td>\n",
              "      <td>SANDLOT</td>\n",
              "      <td>2291060</td>\n",
              "      <td>0.005180</td>\n",
              "      <td>0.59996</td>\n",
              "      <td>0.009384</td>\n",
              "      <td>0.100060</td>\n",
              "      <td>0.57</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Sins of a Solar Empire II</td>\n",
              "      <td>15-08-2024</td>\n",
              "      <td>8</td>\n",
              "      <td>214192</td>\n",
              "      <td>49.99</td>\n",
              "      <td>7815247.0</td>\n",
              "      <td>12.452593</td>\n",
              "      <td>88</td>\n",
              "      <td>3</td>\n",
              "      <td>Stardock Entertainment</td>\n",
              "      <td>Ironclad Games Corporation,Stardock Entertainment</td>\n",
              "      <td>1575940</td>\n",
              "      <td>0.006949</td>\n",
              "      <td>0.49995</td>\n",
              "      <td>0.009304</td>\n",
              "      <td>0.042022</td>\n",
              "      <td>0.88</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Legend of Mortal</td>\n",
              "      <td>14-06-2024</td>\n",
              "      <td>6</td>\n",
              "      <td>440998</td>\n",
              "      <td>19.99</td>\n",
              "      <td>7756399.0</td>\n",
              "      <td>24.797817</td>\n",
              "      <td>76</td>\n",
              "      <td>3</td>\n",
              "      <td>Paras Games,Obb Studio Inc.</td>\n",
              "      <td>Obb Studio Inc.</td>\n",
              "      <td>1859910</td>\n",
              "      <td>0.014327</td>\n",
              "      <td>0.19992</td>\n",
              "      <td>0.009234</td>\n",
              "      <td>0.083682</td>\n",
              "      <td>0.76</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Shin Megami Tensei V: Vengeance</td>\n",
              "      <td>13-06-2024</td>\n",
              "      <td>6</td>\n",
              "      <td>141306</td>\n",
              "      <td>59.99</td>\n",
              "      <td>7629252.0</td>\n",
              "      <td>34.258496</td>\n",
              "      <td>96</td>\n",
              "      <td>0</td>\n",
              "      <td>SEGA</td>\n",
              "      <td>ATLUS</td>\n",
              "      <td>1875830</td>\n",
              "      <td>0.004578</td>\n",
              "      <td>0.59996</td>\n",
              "      <td>0.009082</td>\n",
              "      <td>0.115608</td>\n",
              "      <td>0.96</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3a5ef58c-a2a7-4227-9b20-2ad5e3c28a8d')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-3a5ef58c-a2a7-4227-9b20-2ad5e3c28a8d button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-3a5ef58c-a2a7-4227-9b20-2ad5e3c28a8d');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-7dc18fd7-5f41-46d6-927d-808609d8a14c\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-7dc18fd7-5f41-46d6-927d-808609d8a14c')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-7dc18fd7-5f41-46d6-927d-808609d8a14c button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df_maxmin",
              "summary": "{\n  \"name\": \"df_maxmin\",\n  \"rows\": 1500,\n  \"fields\": [\n    {\n      \"column\": \"name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1500,\n        \"samples\": [\n          \"Out of the Park Baseball 25\",\n          \"Tomorrow's Love Puzzle\",\n          \"HAREM\\uff01RANCH LIFE\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"releaseDate\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 235,\n        \"samples\": [\n          \"22-08-2024\",\n          \"23-03-2024\",\n          \"08-06-2024\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"bulan rilis\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2,\n        \"min\": 1,\n        \"max\": 9,\n        \"num_unique_values\": 9,\n        \"samples\": [\n          9,\n          7,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"copiesSold\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1132756,\n        \"min\": 593,\n        \"max\": 30739148,\n        \"num_unique_values\": 1460,\n        \"samples\": [\n          5885,\n          63753,\n          5046\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"price\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 12.646611586491048,\n        \"min\": 0.0,\n        \"max\": 99.99,\n        \"num_unique_values\": 58,\n        \"samples\": [\n          99.99,\n          24.99,\n          1.99\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"revenue\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 27810239.622256387,\n        \"min\": 20674.0,\n        \"max\": 837793356.0,\n        \"num_unique_values\": 1497,\n        \"samples\": [\n          23195.0,\n          491385.0,\n          331297.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"avgPlaytime\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 21.54217256267663,\n        \"min\": 0.0,\n        \"max\": 296.3328524525871,\n        \"num_unique_values\": 1500,\n        \"samples\": [\n          85.41960491706307,\n          4.02736735920015,\n          3.634375724102398\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"reviewScore\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 24,\n        \"min\": 0,\n        \"max\": 100,\n        \"num_unique_values\": 72,\n        \"samples\": [\n          96,\n          45,\n          89\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"publisherClass\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 3,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          3,\n          2,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"publishers\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1132,\n        \"samples\": [\n          \"KOMODO\",\n          \"Nutaku Publishing\",\n          \"Alpherior\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"developers\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1408,\n        \"samples\": [\n          \"\\u4e0a\\u6d77\\u6d32\\u7ade\\u7f51\\u7edc\\u79d1\\u6280\\u6709\\u9650\\u516c\\u53f8\",\n          \"Family Devs\",\n          \"TYPE-MOON,fuzz Inc.\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"steamId\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 606772,\n        \"min\": 24880,\n        \"max\": 3107330,\n        \"num_unique_values\": 1500,\n        \"samples\": [\n          2384620,\n          2726890,\n          2420240\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"copiesSold_maxmin\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.03685133086295703,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 1460,\n        \"samples\": [\n          0.0001721616386977202,\n          0.002054748507208618,\n          0.0001448669268936032\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"price_maxmin\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.12647876374128447,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 58,\n        \"samples\": [\n          1.0,\n          0.24992499249924993,\n          0.019901990199019903\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"revenue_maxmin\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.03319544814455573,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 1497,\n        \"samples\": [\n          3.0091694968874604e-06,\n          0.0005618600488097557,\n          0.00037077241437194535\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"avgPlaytime_maxmin\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.07269586339949728,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 1500,\n        \"samples\": [\n          0.28825560247569953,\n          0.01359068805860641,\n          0.012264504910686182\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"reviewScore_maxmin\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.24319438486138492,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 72,\n        \"samples\": [\n          0.96,\n          0.45,\n          0.89\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 220
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Pilih kolom yang akan diplot (pastikan ini kolom yang sama yang Anda normalisasi)\n",
        "cols_to_plot = [\"bulan rilis\", \"copiesSold_maxmin\", \"price_maxmin\", \"revenue_maxmin\", \"avgPlaytime_maxmin\", \"reviewScore_maxmin\"]\n",
        "\n",
        "# Membuat subplots yang sesuai dengan jumlah kolom yang dipilih\n",
        "num_cols = len(cols_to_plot)\n",
        "rows = (num_cols // 3) + (num_cols % 3 > 0)  # Mengatur jumlah baris secara dinamis\n",
        "fig, axes = plt.subplots(nrows=rows, ncols=3, figsize=(15, 10))\n",
        "\n",
        "fig.suptitle('Box Plots Outlier Max-Min Normalization', fontsize=16)\n",
        "\n",
        "# Flatten axes jika hanya satu baris\n",
        "axes = axes.flatten() if num_cols > 1 else [axes]\n",
        "\n",
        "# Plot setiap kolom yang dipilih\n",
        "for i, col in enumerate(cols_to_plot):\n",
        "    df_maxmin.boxplot(column=col, ax=axes[i])\n",
        "    axes[i].set_title(f'{col}')\n",
        "\n",
        "# Hapus subplot kosong jika ada\n",
        "for j in range(i + 1, len(axes)):\n",
        "    fig.delaxes(axes[j])\n",
        "\n",
        "plt.tight_layout(rect=[0, 0.03, 1, 0.95])\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 705
        },
        "id": "5y_Zrsntftn0",
        "outputId": "282eb10e-d24e-4de4-e3f7-a8e0fa081117"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1500x1000 with 6 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# PCA\n"
      ],
      "metadata": {
        "id": "ncDOtfKsMcFP"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df_pca1 = df_standarscaler.copy()\n",
        "df_pca1"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 756
        },
        "id": "qPK_aRM5hb0T",
        "outputId": "3f5c99f5-5bbf-42bd-eb53-b3c4e7f88f42"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                                 name releaseDate  bulan rilis  copiesSold  \\\n",
              "0                            WWE 2K24  07-03-2024            3    0.021034   \n",
              "1               EARTH DEFENSE FORCE 6  25-07-2024            7    0.016181   \n",
              "2           Sins of a Solar Empire II  15-08-2024            8    0.064209   \n",
              "3                    Legend of Mortal  14-06-2024            6    0.264501   \n",
              "4     Shin Megami Tensei V: Vengeance  13-06-2024            6   -0.000156   \n",
              "...                               ...         ...          ...         ...   \n",
              "1495              Infection Free Zone  11-04-2024            4    0.274346   \n",
              "1496                  Dark and Darker  07-06-2024            6    2.207230   \n",
              "1497                Songs of Conquest  20-05-2024            5    0.317907   \n",
              "1498                 GUNDAM BREAKER 4  28-08-2024            8    0.013120   \n",
              "1499                           Peglin  27-08-2024            8    0.355589   \n",
              "\n",
              "         price   revenue  avgPlaytime  reviewScore  publisherClass  \\\n",
              "0     6.523328  0.195055     1.383908    -0.213947               1   \n",
              "1     3.359370  0.188834     0.793516    -0.789810               3   \n",
              "2     2.568381  0.186428    -0.005113     0.485316               3   \n",
              "3     0.195413  0.184311     0.568150    -0.008281               3   \n",
              "4     3.359370  0.179737     1.007467     0.814380               0   \n",
              "...        ...       ...          ...          ...             ...   \n",
              "1495  0.590908  0.219674     0.089702    -0.131681               3   \n",
              "1496 -1.385775  0.218473     0.901385    -0.090548               3   \n",
              "1497  1.381897  0.216146    -0.031184     0.485316               0   \n",
              "1498  3.359370  0.208932     0.100822     0.197384               0   \n",
              "1499  0.195413  0.197571     0.817195     0.238517               3   \n",
              "\n",
              "                           publishers  \\\n",
              "0                                  2K   \n",
              "1                         D3PUBLISHER   \n",
              "2              Stardock Entertainment   \n",
              "3         Paras Games,Obb Studio Inc.   \n",
              "4                                SEGA   \n",
              "...                               ...   \n",
              "1495                  Games Operators   \n",
              "1496                         IRONMACE   \n",
              "1497          Coffee Stain Publishing   \n",
              "1498  Bandai Namco Entertainment Inc.   \n",
              "1499    Red Nexus Games Inc.,IndieArk   \n",
              "\n",
              "                                             developers  steamId  \n",
              "0                                       Visual Concepts  2315690  \n",
              "1                                               SANDLOT  2291060  \n",
              "2     Ironclad Games Corporation,Stardock Entertainment  1575940  \n",
              "3                                       Obb Studio Inc.  1859910  \n",
              "4                                                 ATLUS  1875830  \n",
              "...                                                 ...      ...  \n",
              "1495                                        Jutsu Games  1465460  \n",
              "1496                                           IRONMACE  2016590  \n",
              "1497                                         Lavapotion   867210  \n",
              "1498                          CRAFTS ＆ MEISTER Co., Ltd  1672500  \n",
              "1499                               Red Nexus Games Inc.  1296610  \n",
              "\n",
              "[1500 rows x 12 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-cb1613dc-309c-46db-80d9-5b47dba34c72\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>name</th>\n",
              "      <th>releaseDate</th>\n",
              "      <th>bulan rilis</th>\n",
              "      <th>copiesSold</th>\n",
              "      <th>price</th>\n",
              "      <th>revenue</th>\n",
              "      <th>avgPlaytime</th>\n",
              "      <th>reviewScore</th>\n",
              "      <th>publisherClass</th>\n",
              "      <th>publishers</th>\n",
              "      <th>developers</th>\n",
              "      <th>steamId</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>WWE 2K24</td>\n",
              "      <td>07-03-2024</td>\n",
              "      <td>3</td>\n",
              "      <td>0.021034</td>\n",
              "      <td>6.523328</td>\n",
              "      <td>0.195055</td>\n",
              "      <td>1.383908</td>\n",
              "      <td>-0.213947</td>\n",
              "      <td>1</td>\n",
              "      <td>2K</td>\n",
              "      <td>Visual Concepts</td>\n",
              "      <td>2315690</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>EARTH DEFENSE FORCE 6</td>\n",
              "      <td>25-07-2024</td>\n",
              "      <td>7</td>\n",
              "      <td>0.016181</td>\n",
              "      <td>3.359370</td>\n",
              "      <td>0.188834</td>\n",
              "      <td>0.793516</td>\n",
              "      <td>-0.789810</td>\n",
              "      <td>3</td>\n",
              "      <td>D3PUBLISHER</td>\n",
              "      <td>SANDLOT</td>\n",
              "      <td>2291060</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Sins of a Solar Empire II</td>\n",
              "      <td>15-08-2024</td>\n",
              "      <td>8</td>\n",
              "      <td>0.064209</td>\n",
              "      <td>2.568381</td>\n",
              "      <td>0.186428</td>\n",
              "      <td>-0.005113</td>\n",
              "      <td>0.485316</td>\n",
              "      <td>3</td>\n",
              "      <td>Stardock Entertainment</td>\n",
              "      <td>Ironclad Games Corporation,Stardock Entertainment</td>\n",
              "      <td>1575940</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Legend of Mortal</td>\n",
              "      <td>14-06-2024</td>\n",
              "      <td>6</td>\n",
              "      <td>0.264501</td>\n",
              "      <td>0.195413</td>\n",
              "      <td>0.184311</td>\n",
              "      <td>0.568150</td>\n",
              "      <td>-0.008281</td>\n",
              "      <td>3</td>\n",
              "      <td>Paras Games,Obb Studio Inc.</td>\n",
              "      <td>Obb Studio Inc.</td>\n",
              "      <td>1859910</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Shin Megami Tensei V: Vengeance</td>\n",
              "      <td>13-06-2024</td>\n",
              "      <td>6</td>\n",
              "      <td>-0.000156</td>\n",
              "      <td>3.359370</td>\n",
              "      <td>0.179737</td>\n",
              "      <td>1.007467</td>\n",
              "      <td>0.814380</td>\n",
              "      <td>0</td>\n",
              "      <td>SEGA</td>\n",
              "      <td>ATLUS</td>\n",
              "      <td>1875830</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1495</th>\n",
              "      <td>Infection Free Zone</td>\n",
              "      <td>11-04-2024</td>\n",
              "      <td>4</td>\n",
              "      <td>0.274346</td>\n",
              "      <td>0.590908</td>\n",
              "      <td>0.219674</td>\n",
              "      <td>0.089702</td>\n",
              "      <td>-0.131681</td>\n",
              "      <td>3</td>\n",
              "      <td>Games Operators</td>\n",
              "      <td>Jutsu Games</td>\n",
              "      <td>1465460</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1496</th>\n",
              "      <td>Dark and Darker</td>\n",
              "      <td>07-06-2024</td>\n",
              "      <td>6</td>\n",
              "      <td>2.207230</td>\n",
              "      <td>-1.385775</td>\n",
              "      <td>0.218473</td>\n",
              "      <td>0.901385</td>\n",
              "      <td>-0.090548</td>\n",
              "      <td>3</td>\n",
              "      <td>IRONMACE</td>\n",
              "      <td>IRONMACE</td>\n",
              "      <td>2016590</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1497</th>\n",
              "      <td>Songs of Conquest</td>\n",
              "      <td>20-05-2024</td>\n",
              "      <td>5</td>\n",
              "      <td>0.317907</td>\n",
              "      <td>1.381897</td>\n",
              "      <td>0.216146</td>\n",
              "      <td>-0.031184</td>\n",
              "      <td>0.485316</td>\n",
              "      <td>0</td>\n",
              "      <td>Coffee Stain Publishing</td>\n",
              "      <td>Lavapotion</td>\n",
              "      <td>867210</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1498</th>\n",
              "      <td>GUNDAM BREAKER 4</td>\n",
              "      <td>28-08-2024</td>\n",
              "      <td>8</td>\n",
              "      <td>0.013120</td>\n",
              "      <td>3.359370</td>\n",
              "      <td>0.208932</td>\n",
              "      <td>0.100822</td>\n",
              "      <td>0.197384</td>\n",
              "      <td>0</td>\n",
              "      <td>Bandai Namco Entertainment Inc.</td>\n",
              "      <td>CRAFTS ＆ MEISTER Co., Ltd</td>\n",
              "      <td>1672500</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1499</th>\n",
              "      <td>Peglin</td>\n",
              "      <td>27-08-2024</td>\n",
              "      <td>8</td>\n",
              "      <td>0.355589</td>\n",
              "      <td>0.195413</td>\n",
              "      <td>0.197571</td>\n",
              "      <td>0.817195</td>\n",
              "      <td>0.238517</td>\n",
              "      <td>3</td>\n",
              "      <td>Red Nexus Games Inc.,IndieArk</td>\n",
              "      <td>Red Nexus Games Inc.</td>\n",
              "      <td>1296610</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1500 rows × 12 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-cb1613dc-309c-46db-80d9-5b47dba34c72')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-cb1613dc-309c-46db-80d9-5b47dba34c72 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-cb1613dc-309c-46db-80d9-5b47dba34c72');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-7c0aa076-2675-4f68-ae17-70667edc7635\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-7c0aa076-2675-4f68-ae17-70667edc7635')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-7c0aa076-2675-4f68-ae17-70667edc7635 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "  <div id=\"id_3a0cdc7d-ffa2-4c88-84ff-0d0edbc867c8\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df_pca1')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_3a0cdc7d-ffa2-4c88-84ff-0d0edbc867c8 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df_pca1');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df_pca1",
              "summary": "{\n  \"name\": \"df_pca1\",\n  \"rows\": 1500,\n  \"fields\": [\n    {\n      \"column\": \"name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1500,\n        \"samples\": [\n          \"Out of the Park Baseball 25\",\n          \"Tomorrow's Love Puzzle\",\n          \"HAREM\\uff01RANCH LIFE\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"releaseDate\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 235,\n        \"samples\": [\n          \"22-08-2024\",\n          \"23-03-2024\",\n          \"08-06-2024\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"bulan rilis\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2,\n        \"min\": 1,\n        \"max\": 9,\n        \"num_unique_values\": 9,\n        \"samples\": [\n          9,\n          7,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"copiesSold\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0003335000926468,\n        \"min\": -0.12441909334322045,\n        \"max\": 27.020692810829072,\n        \"num_unique_values\": 1460,\n        \"samples\": [\n          -0.11974574639516515,\n          -0.06864271518011154,\n          -0.12048666440148004\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"price\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0003335000926492,\n        \"min\": -1.3857748356384683,\n        \"max\": 6.5233276136775,\n        \"num_unique_values\": 58,\n        \"samples\": [\n          6.5233276136775,\n          0.5909075346826245,\n          -1.2283679562091374\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"revenue\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0003335000926468,\n        \"min\": -0.09394305921224555,\n        \"max\": 30.040715636658003,\n        \"num_unique_values\": 1497,\n        \"samples\": [\n          -0.09385237891649882,\n          -0.07701159840651856,\n          -0.08276995905130319\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"avgPlaytime\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0003335000926472,\n        \"min\": -0.5833623912829787,\n        \"max\": 13.177166108053413,\n        \"num_unique_values\": 1500,\n        \"samples\": [\n          3.383187041677267,\n          -0.39634734092693447,\n          -0.4145963219292304\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"reviewScore\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0003335000926465,\n        \"min\": -3.1343958261415907,\n        \"max\": 0.9789125492257571,\n        \"num_unique_values\": 72,\n        \"samples\": [\n          0.8143802142110631,\n          -1.2834070572262843,\n          0.5264486279353487\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"publisherClass\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 3,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          3,\n          2,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"publishers\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1132,\n        \"samples\": [\n          \"KOMODO\",\n          \"Nutaku Publishing\",\n          \"Alpherior\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"developers\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1408,\n        \"samples\": [\n          \"\\u4e0a\\u6d77\\u6d32\\u7ade\\u7f51\\u7edc\\u79d1\\u6280\\u6709\\u9650\\u516c\\u53f8\",\n          \"Family Devs\",\n          \"TYPE-MOON,fuzz Inc.\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"steamId\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 606772,\n        \"min\": 24880,\n        \"max\": 3107330,\n        \"num_unique_values\": 1500,\n        \"samples\": [\n          2384620,\n          2726890,\n          2420240\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 222
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_pca2 = df_winsorizing.copy()\n",
        "df_pca2"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 756
        },
        "id": "peMnah6mop7A",
        "outputId": "875f246e-4958-4cc2-fb43-6ea3b47a77ab"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                                 name releaseDate  bulan rilis  copiesSold  \\\n",
              "0                            WWE 2K24  07-03-2024            3      165301   \n",
              "1               EARTH DEFENSE FORCE 6  25-07-2024            7      159806   \n",
              "2           Sins of a Solar Empire II  15-08-2024            8      214192   \n",
              "3                    Legend of Mortal  14-06-2024            6      305891   \n",
              "4     Shin Megami Tensei V: Vengeance  13-06-2024            6      141306   \n",
              "...                               ...         ...          ...         ...   \n",
              "1495              Infection Free Zone  11-04-2024            4      305891   \n",
              "1496                  Dark and Darker  07-06-2024            6      305891   \n",
              "1497                Songs of Conquest  20-05-2024            5      305891   \n",
              "1498                 GUNDAM BREAKER 4  28-08-2024            8      156339   \n",
              "1499                           Peglin  27-08-2024            8      305891   \n",
              "\n",
              "      price    revenue  avgPlaytime  reviewScore  publisherClass  \\\n",
              "0     39.99  4552032.0    39.894615           71               1   \n",
              "1     39.99  4552032.0    29.651061           57               3   \n",
              "2     39.99  4552032.0    12.452593           88               3   \n",
              "3     19.99  4552032.0    24.797817           76               3   \n",
              "4     39.99  4552032.0    34.258496           96               0   \n",
              "...     ...        ...          ...          ...             ...   \n",
              "1495  24.99  4552032.0    14.494432           73               3   \n",
              "1496   0.00  4552032.0    31.974027           74               3   \n",
              "1497  34.99  4552032.0    11.891152           88               0   \n",
              "1498  39.99  4552032.0    14.733899           81               0   \n",
              "1499  19.99  4552032.0    30.160995           82               3   \n",
              "\n",
              "                           publishers  \\\n",
              "0                                  2K   \n",
              "1                         D3PUBLISHER   \n",
              "2              Stardock Entertainment   \n",
              "3         Paras Games,Obb Studio Inc.   \n",
              "4                                SEGA   \n",
              "...                               ...   \n",
              "1495                  Games Operators   \n",
              "1496                         IRONMACE   \n",
              "1497          Coffee Stain Publishing   \n",
              "1498  Bandai Namco Entertainment Inc.   \n",
              "1499    Red Nexus Games Inc.,IndieArk   \n",
              "\n",
              "                                             developers  steamId  \n",
              "0                                       Visual Concepts  2315690  \n",
              "1                                               SANDLOT  2291060  \n",
              "2     Ironclad Games Corporation,Stardock Entertainment  1575940  \n",
              "3                                       Obb Studio Inc.  1859910  \n",
              "4                                                 ATLUS  1875830  \n",
              "...                                                 ...      ...  \n",
              "1495                                        Jutsu Games  1465460  \n",
              "1496                                           IRONMACE  2016590  \n",
              "1497                                         Lavapotion   867210  \n",
              "1498                          CRAFTS ＆ MEISTER Co., Ltd  1672500  \n",
              "1499                               Red Nexus Games Inc.  1296610  \n",
              "\n",
              "[1500 rows x 12 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-cee6bd19-f138-47df-b89d-b1964c68107a\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>name</th>\n",
              "      <th>releaseDate</th>\n",
              "      <th>bulan rilis</th>\n",
              "      <th>copiesSold</th>\n",
              "      <th>price</th>\n",
              "      <th>revenue</th>\n",
              "      <th>avgPlaytime</th>\n",
              "      <th>reviewScore</th>\n",
              "      <th>publisherClass</th>\n",
              "      <th>publishers</th>\n",
              "      <th>developers</th>\n",
              "      <th>steamId</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>WWE 2K24</td>\n",
              "      <td>07-03-2024</td>\n",
              "      <td>3</td>\n",
              "      <td>165301</td>\n",
              "      <td>39.99</td>\n",
              "      <td>4552032.0</td>\n",
              "      <td>39.894615</td>\n",
              "      <td>71</td>\n",
              "      <td>1</td>\n",
              "      <td>2K</td>\n",
              "      <td>Visual Concepts</td>\n",
              "      <td>2315690</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>EARTH DEFENSE FORCE 6</td>\n",
              "      <td>25-07-2024</td>\n",
              "      <td>7</td>\n",
              "      <td>159806</td>\n",
              "      <td>39.99</td>\n",
              "      <td>4552032.0</td>\n",
              "      <td>29.651061</td>\n",
              "      <td>57</td>\n",
              "      <td>3</td>\n",
              "      <td>D3PUBLISHER</td>\n",
              "      <td>SANDLOT</td>\n",
              "      <td>2291060</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Sins of a Solar Empire II</td>\n",
              "      <td>15-08-2024</td>\n",
              "      <td>8</td>\n",
              "      <td>214192</td>\n",
              "      <td>39.99</td>\n",
              "      <td>4552032.0</td>\n",
              "      <td>12.452593</td>\n",
              "      <td>88</td>\n",
              "      <td>3</td>\n",
              "      <td>Stardock Entertainment</td>\n",
              "      <td>Ironclad Games Corporation,Stardock Entertainment</td>\n",
              "      <td>1575940</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Legend of Mortal</td>\n",
              "      <td>14-06-2024</td>\n",
              "      <td>6</td>\n",
              "      <td>305891</td>\n",
              "      <td>19.99</td>\n",
              "      <td>4552032.0</td>\n",
              "      <td>24.797817</td>\n",
              "      <td>76</td>\n",
              "      <td>3</td>\n",
              "      <td>Paras Games,Obb Studio Inc.</td>\n",
              "      <td>Obb Studio Inc.</td>\n",
              "      <td>1859910</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Shin Megami Tensei V: Vengeance</td>\n",
              "      <td>13-06-2024</td>\n",
              "      <td>6</td>\n",
              "      <td>141306</td>\n",
              "      <td>39.99</td>\n",
              "      <td>4552032.0</td>\n",
              "      <td>34.258496</td>\n",
              "      <td>96</td>\n",
              "      <td>0</td>\n",
              "      <td>SEGA</td>\n",
              "      <td>ATLUS</td>\n",
              "      <td>1875830</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1495</th>\n",
              "      <td>Infection Free Zone</td>\n",
              "      <td>11-04-2024</td>\n",
              "      <td>4</td>\n",
              "      <td>305891</td>\n",
              "      <td>24.99</td>\n",
              "      <td>4552032.0</td>\n",
              "      <td>14.494432</td>\n",
              "      <td>73</td>\n",
              "      <td>3</td>\n",
              "      <td>Games Operators</td>\n",
              "      <td>Jutsu Games</td>\n",
              "      <td>1465460</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1496</th>\n",
              "      <td>Dark and Darker</td>\n",
              "      <td>07-06-2024</td>\n",
              "      <td>6</td>\n",
              "      <td>305891</td>\n",
              "      <td>0.00</td>\n",
              "      <td>4552032.0</td>\n",
              "      <td>31.974027</td>\n",
              "      <td>74</td>\n",
              "      <td>3</td>\n",
              "      <td>IRONMACE</td>\n",
              "      <td>IRONMACE</td>\n",
              "      <td>2016590</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1497</th>\n",
              "      <td>Songs of Conquest</td>\n",
              "      <td>20-05-2024</td>\n",
              "      <td>5</td>\n",
              "      <td>305891</td>\n",
              "      <td>34.99</td>\n",
              "      <td>4552032.0</td>\n",
              "      <td>11.891152</td>\n",
              "      <td>88</td>\n",
              "      <td>0</td>\n",
              "      <td>Coffee Stain Publishing</td>\n",
              "      <td>Lavapotion</td>\n",
              "      <td>867210</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1498</th>\n",
              "      <td>GUNDAM BREAKER 4</td>\n",
              "      <td>28-08-2024</td>\n",
              "      <td>8</td>\n",
              "      <td>156339</td>\n",
              "      <td>39.99</td>\n",
              "      <td>4552032.0</td>\n",
              "      <td>14.733899</td>\n",
              "      <td>81</td>\n",
              "      <td>0</td>\n",
              "      <td>Bandai Namco Entertainment Inc.</td>\n",
              "      <td>CRAFTS ＆ MEISTER Co., Ltd</td>\n",
              "      <td>1672500</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1499</th>\n",
              "      <td>Peglin</td>\n",
              "      <td>27-08-2024</td>\n",
              "      <td>8</td>\n",
              "      <td>305891</td>\n",
              "      <td>19.99</td>\n",
              "      <td>4552032.0</td>\n",
              "      <td>30.160995</td>\n",
              "      <td>82</td>\n",
              "      <td>3</td>\n",
              "      <td>Red Nexus Games Inc.,IndieArk</td>\n",
              "      <td>Red Nexus Games Inc.</td>\n",
              "      <td>1296610</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1500 rows × 12 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-cee6bd19-f138-47df-b89d-b1964c68107a')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-cee6bd19-f138-47df-b89d-b1964c68107a button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-cee6bd19-f138-47df-b89d-b1964c68107a');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-a88f0aa5-a8c0-4c6f-ab07-6dff8ac6e6f9\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-a88f0aa5-a8c0-4c6f-ab07-6dff8ac6e6f9')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-a88f0aa5-a8c0-4c6f-ab07-6dff8ac6e6f9 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "  <div id=\"id_4a753c94-ddae-4488-9872-c7f743a81205\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df_pca2')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_4a753c94-ddae-4488-9872-c7f743a81205 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df_pca2');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df_pca2",
              "summary": "{\n  \"name\": \"df_pca2\",\n  \"rows\": 1500,\n  \"fields\": [\n    {\n      \"column\": \"name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1500,\n        \"samples\": [\n          \"Out of the Park Baseball 25\",\n          \"Tomorrow's Love Puzzle\",\n          \"HAREM\\uff01RANCH LIFE\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"releaseDate\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 235,\n        \"samples\": [\n          \"22-08-2024\",\n          \"23-03-2024\",\n          \"08-06-2024\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"bulan rilis\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2,\n        \"min\": 1,\n        \"max\": 9,\n        \"num_unique_values\": 9,\n        \"samples\": [\n          9,\n          7,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"copiesSold\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 76903,\n        \"min\": 1865,\n        \"max\": 305891,\n        \"num_unique_values\": 1310,\n        \"samples\": [\n          2675,\n          224772,\n          13157\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"price\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 10.449378701146939,\n        \"min\": 0.0,\n        \"max\": 39.99,\n        \"num_unique_values\": 52,\n        \"samples\": [\n          7.99,\n          27.99,\n          25.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"revenue\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1136287.765194405,\n        \"min\": 23873.0,\n        \"max\": 4552032.0,\n        \"num_unique_values\": 1348,\n        \"samples\": [\n          104827.0,\n          36435.0,\n          36601.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"avgPlaytime\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 10.309707785954428,\n        \"min\": 1.458558207454325,\n        \"max\": 39.89461498709381,\n        \"num_unique_values\": 1350,\n        \"samples\": [\n          8.163045434052988,\n          11.52473408115772,\n          5.88196947795539\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"reviewScore\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 24,\n        \"min\": 0,\n        \"max\": 98,\n        \"num_unique_values\": 70,\n        \"samples\": [\n          87,\n          71,\n          43\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"publisherClass\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 3,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          3,\n          2,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"publishers\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1132,\n        \"samples\": [\n          \"KOMODO\",\n          \"Nutaku Publishing\",\n          \"Alpherior\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"developers\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1408,\n        \"samples\": [\n          \"\\u4e0a\\u6d77\\u6d32\\u7ade\\u7f51\\u7edc\\u79d1\\u6280\\u6709\\u9650\\u516c\\u53f8\",\n          \"Family Devs\",\n          \"TYPE-MOON,fuzz Inc.\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"steamId\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 606772,\n        \"min\": 24880,\n        \"max\": 3107330,\n        \"num_unique_values\": 1500,\n        \"samples\": [\n          2384620,\n          2726890,\n          2420240\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 223
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_pca3 = df_robustscaler.copy()\n",
        "df_pca3"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 756
        },
        "id": "gUfiD_0Epf9i",
        "outputId": "5e143330-7b44-4d12-fb09-afceb7b17701"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                                 name releaseDate  bulan rilis  copiesSold  \\\n",
              "0                            WWE 2K24  07-03-2024            3    4.654563   \n",
              "1               EARTH DEFENSE FORCE 6  25-07-2024            7    4.487800   \n",
              "2           Sins of a Solar Empire II  15-08-2024            8    6.138311   \n",
              "3                    Legend of Mortal  14-06-2024            6   13.021441   \n",
              "4     Shin Megami Tensei V: Vengeance  13-06-2024            6    3.926360   \n",
              "...                               ...         ...          ...         ...   \n",
              "1495              Infection Free Zone  11-04-2024            4   13.359761   \n",
              "1496                  Dark and Darker  07-06-2024            6   79.784362   \n",
              "1497                Songs of Conquest  20-05-2024            5   14.856772   \n",
              "1498                 GUNDAM BREAKER 4  28-08-2024            8    4.382583   \n",
              "1499                           Peglin  27-08-2024            8   16.151725   \n",
              "\n",
              "      price    revenue  avgPlaytime  reviewScore  publisherClass  \\\n",
              "0     8.500  19.397035     3.732050        -0.60               1   \n",
              "1     4.500  18.974858     2.399285        -1.30               3   \n",
              "2     3.500  18.811539     0.596440         0.25               3   \n",
              "3     0.500  18.667886     1.890540        -0.35               3   \n",
              "4     4.500  18.357508     2.882264         0.65               0   \n",
              "...     ...        ...          ...          ...             ...   \n",
              "1495  1.000  21.067800     0.810478        -0.50               3   \n",
              "1496 -1.499  20.986280     2.642793        -0.45               3   \n",
              "1497  2.000  20.828400     0.537587         0.25               0   \n",
              "1498  4.500  20.338812     0.835580        -0.10               0   \n",
              "1499  0.500  19.567778     2.452740        -0.05               3   \n",
              "\n",
              "                           publishers  \\\n",
              "0                                  2K   \n",
              "1                         D3PUBLISHER   \n",
              "2              Stardock Entertainment   \n",
              "3         Paras Games,Obb Studio Inc.   \n",
              "4                                SEGA   \n",
              "...                               ...   \n",
              "1495                  Games Operators   \n",
              "1496                         IRONMACE   \n",
              "1497          Coffee Stain Publishing   \n",
              "1498  Bandai Namco Entertainment Inc.   \n",
              "1499    Red Nexus Games Inc.,IndieArk   \n",
              "\n",
              "                                             developers  steamId  \n",
              "0                                       Visual Concepts  2315690  \n",
              "1                                               SANDLOT  2291060  \n",
              "2     Ironclad Games Corporation,Stardock Entertainment  1575940  \n",
              "3                                       Obb Studio Inc.  1859910  \n",
              "4                                                 ATLUS  1875830  \n",
              "...                                                 ...      ...  \n",
              "1495                                        Jutsu Games  1465460  \n",
              "1496                                           IRONMACE  2016590  \n",
              "1497                                         Lavapotion   867210  \n",
              "1498                          CRAFTS ＆ MEISTER Co., Ltd  1672500  \n",
              "1499                               Red Nexus Games Inc.  1296610  \n",
              "\n",
              "[1500 rows x 12 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-b31a1897-536c-4603-b191-f4a50de944ad\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>name</th>\n",
              "      <th>releaseDate</th>\n",
              "      <th>bulan rilis</th>\n",
              "      <th>copiesSold</th>\n",
              "      <th>price</th>\n",
              "      <th>revenue</th>\n",
              "      <th>avgPlaytime</th>\n",
              "      <th>reviewScore</th>\n",
              "      <th>publisherClass</th>\n",
              "      <th>publishers</th>\n",
              "      <th>developers</th>\n",
              "      <th>steamId</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>WWE 2K24</td>\n",
              "      <td>07-03-2024</td>\n",
              "      <td>3</td>\n",
              "      <td>4.654563</td>\n",
              "      <td>8.500</td>\n",
              "      <td>19.397035</td>\n",
              "      <td>3.732050</td>\n",
              "      <td>-0.60</td>\n",
              "      <td>1</td>\n",
              "      <td>2K</td>\n",
              "      <td>Visual Concepts</td>\n",
              "      <td>2315690</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>EARTH DEFENSE FORCE 6</td>\n",
              "      <td>25-07-2024</td>\n",
              "      <td>7</td>\n",
              "      <td>4.487800</td>\n",
              "      <td>4.500</td>\n",
              "      <td>18.974858</td>\n",
              "      <td>2.399285</td>\n",
              "      <td>-1.30</td>\n",
              "      <td>3</td>\n",
              "      <td>D3PUBLISHER</td>\n",
              "      <td>SANDLOT</td>\n",
              "      <td>2291060</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Sins of a Solar Empire II</td>\n",
              "      <td>15-08-2024</td>\n",
              "      <td>8</td>\n",
              "      <td>6.138311</td>\n",
              "      <td>3.500</td>\n",
              "      <td>18.811539</td>\n",
              "      <td>0.596440</td>\n",
              "      <td>0.25</td>\n",
              "      <td>3</td>\n",
              "      <td>Stardock Entertainment</td>\n",
              "      <td>Ironclad Games Corporation,Stardock Entertainment</td>\n",
              "      <td>1575940</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Legend of Mortal</td>\n",
              "      <td>14-06-2024</td>\n",
              "      <td>6</td>\n",
              "      <td>13.021441</td>\n",
              "      <td>0.500</td>\n",
              "      <td>18.667886</td>\n",
              "      <td>1.890540</td>\n",
              "      <td>-0.35</td>\n",
              "      <td>3</td>\n",
              "      <td>Paras Games,Obb Studio Inc.</td>\n",
              "      <td>Obb Studio Inc.</td>\n",
              "      <td>1859910</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Shin Megami Tensei V: Vengeance</td>\n",
              "      <td>13-06-2024</td>\n",
              "      <td>6</td>\n",
              "      <td>3.926360</td>\n",
              "      <td>4.500</td>\n",
              "      <td>18.357508</td>\n",
              "      <td>2.882264</td>\n",
              "      <td>0.65</td>\n",
              "      <td>0</td>\n",
              "      <td>SEGA</td>\n",
              "      <td>ATLUS</td>\n",
              "      <td>1875830</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1495</th>\n",
              "      <td>Infection Free Zone</td>\n",
              "      <td>11-04-2024</td>\n",
              "      <td>4</td>\n",
              "      <td>13.359761</td>\n",
              "      <td>1.000</td>\n",
              "      <td>21.067800</td>\n",
              "      <td>0.810478</td>\n",
              "      <td>-0.50</td>\n",
              "      <td>3</td>\n",
              "      <td>Games Operators</td>\n",
              "      <td>Jutsu Games</td>\n",
              "      <td>1465460</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1496</th>\n",
              "      <td>Dark and Darker</td>\n",
              "      <td>07-06-2024</td>\n",
              "      <td>6</td>\n",
              "      <td>79.784362</td>\n",
              "      <td>-1.499</td>\n",
              "      <td>20.986280</td>\n",
              "      <td>2.642793</td>\n",
              "      <td>-0.45</td>\n",
              "      <td>3</td>\n",
              "      <td>IRONMACE</td>\n",
              "      <td>IRONMACE</td>\n",
              "      <td>2016590</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1497</th>\n",
              "      <td>Songs of Conquest</td>\n",
              "      <td>20-05-2024</td>\n",
              "      <td>5</td>\n",
              "      <td>14.856772</td>\n",
              "      <td>2.000</td>\n",
              "      <td>20.828400</td>\n",
              "      <td>0.537587</td>\n",
              "      <td>0.25</td>\n",
              "      <td>0</td>\n",
              "      <td>Coffee Stain Publishing</td>\n",
              "      <td>Lavapotion</td>\n",
              "      <td>867210</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1498</th>\n",
              "      <td>GUNDAM BREAKER 4</td>\n",
              "      <td>28-08-2024</td>\n",
              "      <td>8</td>\n",
              "      <td>4.382583</td>\n",
              "      <td>4.500</td>\n",
              "      <td>20.338812</td>\n",
              "      <td>0.835580</td>\n",
              "      <td>-0.10</td>\n",
              "      <td>0</td>\n",
              "      <td>Bandai Namco Entertainment Inc.</td>\n",
              "      <td>CRAFTS ＆ MEISTER Co., Ltd</td>\n",
              "      <td>1672500</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1499</th>\n",
              "      <td>Peglin</td>\n",
              "      <td>27-08-2024</td>\n",
              "      <td>8</td>\n",
              "      <td>16.151725</td>\n",
              "      <td>0.500</td>\n",
              "      <td>19.567778</td>\n",
              "      <td>2.452740</td>\n",
              "      <td>-0.05</td>\n",
              "      <td>3</td>\n",
              "      <td>Red Nexus Games Inc.,IndieArk</td>\n",
              "      <td>Red Nexus Games Inc.</td>\n",
              "      <td>1296610</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1500 rows × 12 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b31a1897-536c-4603-b191-f4a50de944ad')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-b31a1897-536c-4603-b191-f4a50de944ad button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-b31a1897-536c-4603-b191-f4a50de944ad');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-5253a066-06b1-45d8-b37d-a4a936a104cc\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-5253a066-06b1-45d8-b37d-a4a936a104cc')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-5253a066-06b1-45d8-b37d-a4a936a104cc button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "  <div id=\"id_32f6f90d-39e5-4a7f-ac93-6741f35a743d\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df_pca3')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_32f6f90d-39e5-4a7f-ac93-6741f35a743d button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df_pca3');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df_pca3",
              "summary": "{\n  \"name\": \"df_pca3\",\n  \"rows\": 1500,\n  \"fields\": [\n    {\n      \"column\": \"name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1500,\n        \"samples\": [\n          \"Out of the Park Baseball 25\",\n          \"Tomorrow's Love Puzzle\",\n          \"HAREM\\uff01RANCH LIFE\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"releaseDate\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 235,\n        \"samples\": [\n          \"22-08-2024\",\n          \"23-03-2024\",\n          \"08-06-2024\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"bulan rilis\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2,\n        \"min\": 1,\n        \"max\": 9,\n        \"num_unique_values\": 9,\n        \"samples\": [\n          9,\n          7,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"copiesSold\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 34.37700405311529,\n        \"min\": -0.34401080392097355,\n        \"max\": 932.5125034141604,\n        \"num_unique_values\": 1460,\n        \"samples\": [\n          -0.18340869776334556,\n          1.5727747261084641,\n          -0.2088707474735213\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"price\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.2646611586490986,\n        \"min\": -1.4990000000000003,\n        \"max\": 8.500000000000002,\n        \"num_unique_values\": 58,\n        \"samples\": [\n          8.500000000000002,\n          1.0,\n          -1.3000000000000003\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"revenue\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 67.88739144093198,\n        \"min\": -0.2157413905688358,\n        \"max\": 2044.8655946198303,\n        \"num_unique_values\": 1497,\n        \"samples\": [\n          -0.20958739419385944,\n          0.9333081087018876,\n          0.5425183539707435\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"avgPlaytime\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.2581779391574583,\n        \"min\": -0.7089141283386154,\n        \"max\": 30.35444812582064,\n        \"num_unique_values\": 1500,\n        \"samples\": [\n          8.245274073154965,\n          -0.28674166189084815,\n          -0.32793736943005547\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"reviewScore\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.2159719243069238,\n        \"min\": -4.15,\n        \"max\": 0.85,\n        \"num_unique_values\": 72,\n        \"samples\": [\n          0.65,\n          -1.9,\n          0.3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"publisherClass\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 3,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          3,\n          2,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"publishers\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1132,\n        \"samples\": [\n          \"KOMODO\",\n          \"Nutaku Publishing\",\n          \"Alpherior\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"developers\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1408,\n        \"samples\": [\n          \"\\u4e0a\\u6d77\\u6d32\\u7ade\\u7f51\\u7edc\\u79d1\\u6280\\u6709\\u9650\\u516c\\u53f8\",\n          \"Family Devs\",\n          \"TYPE-MOON,fuzz Inc.\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"steamId\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 606772,\n        \"min\": 24880,\n        \"max\": 3107330,\n        \"num_unique_values\": 1500,\n        \"samples\": [\n          2384620,\n          2726890,\n          2420240\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 224
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_pca4 = df_iqr.copy()\n",
        "df_pca4"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 756
        },
        "id": "tdUT69Z6plxG",
        "outputId": "e524b4df-fe76-42c6-8a15-668229d0d53d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                                 name releaseDate  bulan rilis  copiesSold  \\\n",
              "0                            WWE 2K24  07-03-2024            3    87296.25   \n",
              "1               EARTH DEFENSE FORCE 6  25-07-2024            7    87296.25   \n",
              "2           Sins of a Solar Empire II  15-08-2024            8    87296.25   \n",
              "3                    Legend of Mortal  14-06-2024            6    87296.25   \n",
              "4     Shin Megami Tensei V: Vengeance  13-06-2024            6    87296.25   \n",
              "...                               ...         ...          ...         ...   \n",
              "1495              Infection Free Zone  11-04-2024            4    87296.25   \n",
              "1496                  Dark and Darker  07-06-2024            6    87296.25   \n",
              "1497                Songs of Conquest  20-05-2024            5    87296.25   \n",
              "1498                 GUNDAM BREAKER 4  28-08-2024            8    87296.25   \n",
              "1499                           Peglin  27-08-2024            8    87296.25   \n",
              "\n",
              "      price    revenue  avgPlaytime  reviewScore  publisherClass  \\\n",
              "0     99.99  1069635.5    27.413912           71               1   \n",
              "1     59.99  1069635.5    27.413912           57               3   \n",
              "2     49.99  1069635.5    12.452593           88               3   \n",
              "3     19.99  1069635.5    24.797817           76               3   \n",
              "4     59.99  1069635.5    27.413912           96               0   \n",
              "...     ...        ...          ...          ...             ...   \n",
              "1495  24.99  1069635.5    14.494432           73               3   \n",
              "1496   0.00  1069635.5    27.413912           74               3   \n",
              "1497  34.99  1069635.5    11.891152           88               0   \n",
              "1498  59.99  1069635.5    14.733899           81               0   \n",
              "1499  19.99  1069635.5    27.413912           82               3   \n",
              "\n",
              "                           publishers  \\\n",
              "0                                  2K   \n",
              "1                         D3PUBLISHER   \n",
              "2              Stardock Entertainment   \n",
              "3         Paras Games,Obb Studio Inc.   \n",
              "4                                SEGA   \n",
              "...                               ...   \n",
              "1495                  Games Operators   \n",
              "1496                         IRONMACE   \n",
              "1497          Coffee Stain Publishing   \n",
              "1498  Bandai Namco Entertainment Inc.   \n",
              "1499    Red Nexus Games Inc.,IndieArk   \n",
              "\n",
              "                                             developers  steamId  \n",
              "0                                       Visual Concepts  2315690  \n",
              "1                                               SANDLOT  2291060  \n",
              "2     Ironclad Games Corporation,Stardock Entertainment  1575940  \n",
              "3                                       Obb Studio Inc.  1859910  \n",
              "4                                                 ATLUS  1875830  \n",
              "...                                                 ...      ...  \n",
              "1495                                        Jutsu Games  1465460  \n",
              "1496                                           IRONMACE  2016590  \n",
              "1497                                         Lavapotion   867210  \n",
              "1498                          CRAFTS ＆ MEISTER Co., Ltd  1672500  \n",
              "1499                               Red Nexus Games Inc.  1296610  \n",
              "\n",
              "[1500 rows x 12 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-e88a268f-9997-428e-b7ed-abb9eea0e5e5\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>name</th>\n",
              "      <th>releaseDate</th>\n",
              "      <th>bulan rilis</th>\n",
              "      <th>copiesSold</th>\n",
              "      <th>price</th>\n",
              "      <th>revenue</th>\n",
              "      <th>avgPlaytime</th>\n",
              "      <th>reviewScore</th>\n",
              "      <th>publisherClass</th>\n",
              "      <th>publishers</th>\n",
              "      <th>developers</th>\n",
              "      <th>steamId</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>WWE 2K24</td>\n",
              "      <td>07-03-2024</td>\n",
              "      <td>3</td>\n",
              "      <td>87296.25</td>\n",
              "      <td>99.99</td>\n",
              "      <td>1069635.5</td>\n",
              "      <td>27.413912</td>\n",
              "      <td>71</td>\n",
              "      <td>1</td>\n",
              "      <td>2K</td>\n",
              "      <td>Visual Concepts</td>\n",
              "      <td>2315690</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>EARTH DEFENSE FORCE 6</td>\n",
              "      <td>25-07-2024</td>\n",
              "      <td>7</td>\n",
              "      <td>87296.25</td>\n",
              "      <td>59.99</td>\n",
              "      <td>1069635.5</td>\n",
              "      <td>27.413912</td>\n",
              "      <td>57</td>\n",
              "      <td>3</td>\n",
              "      <td>D3PUBLISHER</td>\n",
              "      <td>SANDLOT</td>\n",
              "      <td>2291060</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Sins of a Solar Empire II</td>\n",
              "      <td>15-08-2024</td>\n",
              "      <td>8</td>\n",
              "      <td>87296.25</td>\n",
              "      <td>49.99</td>\n",
              "      <td>1069635.5</td>\n",
              "      <td>12.452593</td>\n",
              "      <td>88</td>\n",
              "      <td>3</td>\n",
              "      <td>Stardock Entertainment</td>\n",
              "      <td>Ironclad Games Corporation,Stardock Entertainment</td>\n",
              "      <td>1575940</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Legend of Mortal</td>\n",
              "      <td>14-06-2024</td>\n",
              "      <td>6</td>\n",
              "      <td>87296.25</td>\n",
              "      <td>19.99</td>\n",
              "      <td>1069635.5</td>\n",
              "      <td>24.797817</td>\n",
              "      <td>76</td>\n",
              "      <td>3</td>\n",
              "      <td>Paras Games,Obb Studio Inc.</td>\n",
              "      <td>Obb Studio Inc.</td>\n",
              "      <td>1859910</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Shin Megami Tensei V: Vengeance</td>\n",
              "      <td>13-06-2024</td>\n",
              "      <td>6</td>\n",
              "      <td>87296.25</td>\n",
              "      <td>59.99</td>\n",
              "      <td>1069635.5</td>\n",
              "      <td>27.413912</td>\n",
              "      <td>96</td>\n",
              "      <td>0</td>\n",
              "      <td>SEGA</td>\n",
              "      <td>ATLUS</td>\n",
              "      <td>1875830</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1495</th>\n",
              "      <td>Infection Free Zone</td>\n",
              "      <td>11-04-2024</td>\n",
              "      <td>4</td>\n",
              "      <td>87296.25</td>\n",
              "      <td>24.99</td>\n",
              "      <td>1069635.5</td>\n",
              "      <td>14.494432</td>\n",
              "      <td>73</td>\n",
              "      <td>3</td>\n",
              "      <td>Games Operators</td>\n",
              "      <td>Jutsu Games</td>\n",
              "      <td>1465460</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1496</th>\n",
              "      <td>Dark and Darker</td>\n",
              "      <td>07-06-2024</td>\n",
              "      <td>6</td>\n",
              "      <td>87296.25</td>\n",
              "      <td>0.00</td>\n",
              "      <td>1069635.5</td>\n",
              "      <td>27.413912</td>\n",
              "      <td>74</td>\n",
              "      <td>3</td>\n",
              "      <td>IRONMACE</td>\n",
              "      <td>IRONMACE</td>\n",
              "      <td>2016590</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1497</th>\n",
              "      <td>Songs of Conquest</td>\n",
              "      <td>20-05-2024</td>\n",
              "      <td>5</td>\n",
              "      <td>87296.25</td>\n",
              "      <td>34.99</td>\n",
              "      <td>1069635.5</td>\n",
              "      <td>11.891152</td>\n",
              "      <td>88</td>\n",
              "      <td>0</td>\n",
              "      <td>Coffee Stain Publishing</td>\n",
              "      <td>Lavapotion</td>\n",
              "      <td>867210</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1498</th>\n",
              "      <td>GUNDAM BREAKER 4</td>\n",
              "      <td>28-08-2024</td>\n",
              "      <td>8</td>\n",
              "      <td>87296.25</td>\n",
              "      <td>59.99</td>\n",
              "      <td>1069635.5</td>\n",
              "      <td>14.733899</td>\n",
              "      <td>81</td>\n",
              "      <td>0</td>\n",
              "      <td>Bandai Namco Entertainment Inc.</td>\n",
              "      <td>CRAFTS ＆ MEISTER Co., Ltd</td>\n",
              "      <td>1672500</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1499</th>\n",
              "      <td>Peglin</td>\n",
              "      <td>27-08-2024</td>\n",
              "      <td>8</td>\n",
              "      <td>87296.25</td>\n",
              "      <td>19.99</td>\n",
              "      <td>1069635.5</td>\n",
              "      <td>27.413912</td>\n",
              "      <td>82</td>\n",
              "      <td>3</td>\n",
              "      <td>Red Nexus Games Inc.,IndieArk</td>\n",
              "      <td>Red Nexus Games Inc.</td>\n",
              "      <td>1296610</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1500 rows × 12 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e88a268f-9997-428e-b7ed-abb9eea0e5e5')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-e88a268f-9997-428e-b7ed-abb9eea0e5e5 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-e88a268f-9997-428e-b7ed-abb9eea0e5e5');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-a035c5bd-fe45-42aa-bf86-3e7ffdb2f9e3\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-a035c5bd-fe45-42aa-bf86-3e7ffdb2f9e3')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-a035c5bd-fe45-42aa-bf86-3e7ffdb2f9e3 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "  <div id=\"id_daf65838-c490-41a4-9def-bcb694b03b9d\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df_pca4')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_daf65838-c490-41a4-9def-bcb694b03b9d button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df_pca4');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df_pca4",
              "summary": "{\n  \"name\": \"df_pca4\",\n  \"rows\": 1500,\n  \"fields\": [\n    {\n      \"column\": \"name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1500,\n        \"samples\": [\n          \"Out of the Park Baseball 25\",\n          \"Tomorrow's Love Puzzle\",\n          \"HAREM\\uff01RANCH LIFE\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"releaseDate\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 235,\n        \"samples\": [\n          \"22-08-2024\",\n          \"23-03-2024\",\n          \"08-06-2024\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"bulan rilis\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2,\n        \"min\": 1,\n        \"max\": 9,\n        \"num_unique_values\": 9,\n        \"samples\": [\n          9,\n          7,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"copiesSold\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 29527.321876292557,\n        \"min\": 593.0,\n        \"max\": 87296.25,\n        \"num_unique_values\": 1260,\n        \"samples\": [\n          12366.0,\n          27601.0,\n          22016.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"price\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 12.646611586491048,\n        \"min\": 0.0,\n        \"max\": 99.99,\n        \"num_unique_values\": 58,\n        \"samples\": [\n          99.99,\n          24.99,\n          1.99\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"revenue\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 378781.02766340785,\n        \"min\": 20674.0,\n        \"max\": 1069635.5,\n        \"num_unique_values\": 1275,\n        \"samples\": [\n          381290.0,\n          83756.0,\n          42955.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"avgPlaytime\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 8.136699960926578,\n        \"min\": 0.0,\n        \"max\": 27.413912135604043,\n        \"num_unique_values\": 1354,\n        \"samples\": [\n          11.2397919153104,\n          1.581838213848838,\n          8.635183318565998\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"reviewScore\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 24,\n        \"min\": 0,\n        \"max\": 100,\n        \"num_unique_values\": 72,\n        \"samples\": [\n          96,\n          45,\n          89\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"publisherClass\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 3,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          3,\n          2,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"publishers\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1132,\n        \"samples\": [\n          \"KOMODO\",\n          \"Nutaku Publishing\",\n          \"Alpherior\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"developers\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1408,\n        \"samples\": [\n          \"\\u4e0a\\u6d77\\u6d32\\u7ade\\u7f51\\u7edc\\u79d1\\u6280\\u6709\\u9650\\u516c\\u53f8\",\n          \"Family Devs\",\n          \"TYPE-MOON,fuzz Inc.\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"steamId\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 606772,\n        \"min\": 24880,\n        \"max\": 3107330,\n        \"num_unique_values\": 1500,\n        \"samples\": [\n          2384620,\n          2726890,\n          2420240\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 225
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_pca5 = df_maxmin.copy()\n",
        "df_pca5"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 756
        },
        "id": "-VBrIn5Sps82",
        "outputId": "3bb84d80-cf8d-49ea-b785-6ae2622dfc8b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                                 name releaseDate  bulan rilis  copiesSold  \\\n",
              "0                            WWE 2K24  07-03-2024            3      165301   \n",
              "1               EARTH DEFENSE FORCE 6  25-07-2024            7      159806   \n",
              "2           Sins of a Solar Empire II  15-08-2024            8      214192   \n",
              "3                    Legend of Mortal  14-06-2024            6      440998   \n",
              "4     Shin Megami Tensei V: Vengeance  13-06-2024            6      141306   \n",
              "...                               ...         ...          ...         ...   \n",
              "1495              Infection Free Zone  11-04-2024            4      452146   \n",
              "1496                  Dark and Darker  07-06-2024            6     2640903   \n",
              "1497                Songs of Conquest  20-05-2024            5      501474   \n",
              "1498                 GUNDAM BREAKER 4  28-08-2024            8      156339   \n",
              "1499                           Peglin  27-08-2024            8      544144   \n",
              "\n",
              "      price    revenue  avgPlaytime  reviewScore  publisherClass  \\\n",
              "0     99.99  8055097.0    42.365140           71               1   \n",
              "1     59.99  7882151.0    29.651061           57               3   \n",
              "2     49.99  7815247.0    12.452593           88               3   \n",
              "3     19.99  7756399.0    24.797817           76               3   \n",
              "4     59.99  7629252.0    34.258496           96               0   \n",
              "...     ...        ...          ...          ...             ...   \n",
              "1495  24.99  8739530.0    14.494432           73               3   \n",
              "1496   0.00  8706135.0    31.974027           74               3   \n",
              "1497  34.99  8641459.0    11.891152           88               0   \n",
              "1498  59.99  8440898.0    14.733899           81               0   \n",
              "1499  19.99  8125042.0    30.160995           82               3   \n",
              "\n",
              "                           publishers  \\\n",
              "0                                  2K   \n",
              "1                         D3PUBLISHER   \n",
              "2              Stardock Entertainment   \n",
              "3         Paras Games,Obb Studio Inc.   \n",
              "4                                SEGA   \n",
              "...                               ...   \n",
              "1495                  Games Operators   \n",
              "1496                         IRONMACE   \n",
              "1497          Coffee Stain Publishing   \n",
              "1498  Bandai Namco Entertainment Inc.   \n",
              "1499    Red Nexus Games Inc.,IndieArk   \n",
              "\n",
              "                                             developers  steamId  \\\n",
              "0                                       Visual Concepts  2315690   \n",
              "1                                               SANDLOT  2291060   \n",
              "2     Ironclad Games Corporation,Stardock Entertainment  1575940   \n",
              "3                                       Obb Studio Inc.  1859910   \n",
              "4                                                 ATLUS  1875830   \n",
              "...                                                 ...      ...   \n",
              "1495                                        Jutsu Games  1465460   \n",
              "1496                                           IRONMACE  2016590   \n",
              "1497                                         Lavapotion   867210   \n",
              "1498                          CRAFTS ＆ MEISTER Co., Ltd  1672500   \n",
              "1499                               Red Nexus Games Inc.  1296610   \n",
              "\n",
              "      copiesSold_maxmin  price_maxmin  revenue_maxmin  avgPlaytime_maxmin  \\\n",
              "0              0.005358      1.000000        0.009590            0.142965   \n",
              "1              0.005180      0.599960        0.009384            0.100060   \n",
              "2              0.006949      0.499950        0.009304            0.042022   \n",
              "3              0.014327      0.199920        0.009234            0.083682   \n",
              "4              0.004578      0.599960        0.009082            0.115608   \n",
              "...                 ...           ...             ...                 ...   \n",
              "1495           0.014690      0.249925        0.010407            0.048913   \n",
              "1496           0.085896      0.000000        0.010367            0.107899   \n",
              "1497           0.016295      0.349935        0.010290            0.040128   \n",
              "1498           0.005067      0.599960        0.010051            0.049721   \n",
              "1499           0.017683      0.199920        0.009674            0.101781   \n",
              "\n",
              "      reviewScore_maxmin  \n",
              "0                   0.71  \n",
              "1                   0.57  \n",
              "2                   0.88  \n",
              "3                   0.76  \n",
              "4                   0.96  \n",
              "...                  ...  \n",
              "1495                0.73  \n",
              "1496                0.74  \n",
              "1497                0.88  \n",
              "1498                0.81  \n",
              "1499                0.82  \n",
              "\n",
              "[1500 rows x 17 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-9332a0a4-5f46-4423-88bb-83b3e0bbf2dd\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>name</th>\n",
              "      <th>releaseDate</th>\n",
              "      <th>bulan rilis</th>\n",
              "      <th>copiesSold</th>\n",
              "      <th>price</th>\n",
              "      <th>revenue</th>\n",
              "      <th>avgPlaytime</th>\n",
              "      <th>reviewScore</th>\n",
              "      <th>publisherClass</th>\n",
              "      <th>publishers</th>\n",
              "      <th>developers</th>\n",
              "      <th>steamId</th>\n",
              "      <th>copiesSold_maxmin</th>\n",
              "      <th>price_maxmin</th>\n",
              "      <th>revenue_maxmin</th>\n",
              "      <th>avgPlaytime_maxmin</th>\n",
              "      <th>reviewScore_maxmin</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>WWE 2K24</td>\n",
              "      <td>07-03-2024</td>\n",
              "      <td>3</td>\n",
              "      <td>165301</td>\n",
              "      <td>99.99</td>\n",
              "      <td>8055097.0</td>\n",
              "      <td>42.365140</td>\n",
              "      <td>71</td>\n",
              "      <td>1</td>\n",
              "      <td>2K</td>\n",
              "      <td>Visual Concepts</td>\n",
              "      <td>2315690</td>\n",
              "      <td>0.005358</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.009590</td>\n",
              "      <td>0.142965</td>\n",
              "      <td>0.71</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>EARTH DEFENSE FORCE 6</td>\n",
              "      <td>25-07-2024</td>\n",
              "      <td>7</td>\n",
              "      <td>159806</td>\n",
              "      <td>59.99</td>\n",
              "      <td>7882151.0</td>\n",
              "      <td>29.651061</td>\n",
              "      <td>57</td>\n",
              "      <td>3</td>\n",
              "      <td>D3PUBLISHER</td>\n",
              "      <td>SANDLOT</td>\n",
              "      <td>2291060</td>\n",
              "      <td>0.005180</td>\n",
              "      <td>0.599960</td>\n",
              "      <td>0.009384</td>\n",
              "      <td>0.100060</td>\n",
              "      <td>0.57</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Sins of a Solar Empire II</td>\n",
              "      <td>15-08-2024</td>\n",
              "      <td>8</td>\n",
              "      <td>214192</td>\n",
              "      <td>49.99</td>\n",
              "      <td>7815247.0</td>\n",
              "      <td>12.452593</td>\n",
              "      <td>88</td>\n",
              "      <td>3</td>\n",
              "      <td>Stardock Entertainment</td>\n",
              "      <td>Ironclad Games Corporation,Stardock Entertainment</td>\n",
              "      <td>1575940</td>\n",
              "      <td>0.006949</td>\n",
              "      <td>0.499950</td>\n",
              "      <td>0.009304</td>\n",
              "      <td>0.042022</td>\n",
              "      <td>0.88</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Legend of Mortal</td>\n",
              "      <td>14-06-2024</td>\n",
              "      <td>6</td>\n",
              "      <td>440998</td>\n",
              "      <td>19.99</td>\n",
              "      <td>7756399.0</td>\n",
              "      <td>24.797817</td>\n",
              "      <td>76</td>\n",
              "      <td>3</td>\n",
              "      <td>Paras Games,Obb Studio Inc.</td>\n",
              "      <td>Obb Studio Inc.</td>\n",
              "      <td>1859910</td>\n",
              "      <td>0.014327</td>\n",
              "      <td>0.199920</td>\n",
              "      <td>0.009234</td>\n",
              "      <td>0.083682</td>\n",
              "      <td>0.76</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Shin Megami Tensei V: Vengeance</td>\n",
              "      <td>13-06-2024</td>\n",
              "      <td>6</td>\n",
              "      <td>141306</td>\n",
              "      <td>59.99</td>\n",
              "      <td>7629252.0</td>\n",
              "      <td>34.258496</td>\n",
              "      <td>96</td>\n",
              "      <td>0</td>\n",
              "      <td>SEGA</td>\n",
              "      <td>ATLUS</td>\n",
              "      <td>1875830</td>\n",
              "      <td>0.004578</td>\n",
              "      <td>0.599960</td>\n",
              "      <td>0.009082</td>\n",
              "      <td>0.115608</td>\n",
              "      <td>0.96</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1495</th>\n",
              "      <td>Infection Free Zone</td>\n",
              "      <td>11-04-2024</td>\n",
              "      <td>4</td>\n",
              "      <td>452146</td>\n",
              "      <td>24.99</td>\n",
              "      <td>8739530.0</td>\n",
              "      <td>14.494432</td>\n",
              "      <td>73</td>\n",
              "      <td>3</td>\n",
              "      <td>Games Operators</td>\n",
              "      <td>Jutsu Games</td>\n",
              "      <td>1465460</td>\n",
              "      <td>0.014690</td>\n",
              "      <td>0.249925</td>\n",
              "      <td>0.010407</td>\n",
              "      <td>0.048913</td>\n",
              "      <td>0.73</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1496</th>\n",
              "      <td>Dark and Darker</td>\n",
              "      <td>07-06-2024</td>\n",
              "      <td>6</td>\n",
              "      <td>2640903</td>\n",
              "      <td>0.00</td>\n",
              "      <td>8706135.0</td>\n",
              "      <td>31.974027</td>\n",
              "      <td>74</td>\n",
              "      <td>3</td>\n",
              "      <td>IRONMACE</td>\n",
              "      <td>IRONMACE</td>\n",
              "      <td>2016590</td>\n",
              "      <td>0.085896</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.010367</td>\n",
              "      <td>0.107899</td>\n",
              "      <td>0.74</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1497</th>\n",
              "      <td>Songs of Conquest</td>\n",
              "      <td>20-05-2024</td>\n",
              "      <td>5</td>\n",
              "      <td>501474</td>\n",
              "      <td>34.99</td>\n",
              "      <td>8641459.0</td>\n",
              "      <td>11.891152</td>\n",
              "      <td>88</td>\n",
              "      <td>0</td>\n",
              "      <td>Coffee Stain Publishing</td>\n",
              "      <td>Lavapotion</td>\n",
              "      <td>867210</td>\n",
              "      <td>0.016295</td>\n",
              "      <td>0.349935</td>\n",
              "      <td>0.010290</td>\n",
              "      <td>0.040128</td>\n",
              "      <td>0.88</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1498</th>\n",
              "      <td>GUNDAM BREAKER 4</td>\n",
              "      <td>28-08-2024</td>\n",
              "      <td>8</td>\n",
              "      <td>156339</td>\n",
              "      <td>59.99</td>\n",
              "      <td>8440898.0</td>\n",
              "      <td>14.733899</td>\n",
              "      <td>81</td>\n",
              "      <td>0</td>\n",
              "      <td>Bandai Namco Entertainment Inc.</td>\n",
              "      <td>CRAFTS ＆ MEISTER Co., Ltd</td>\n",
              "      <td>1672500</td>\n",
              "      <td>0.005067</td>\n",
              "      <td>0.599960</td>\n",
              "      <td>0.010051</td>\n",
              "      <td>0.049721</td>\n",
              "      <td>0.81</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1499</th>\n",
              "      <td>Peglin</td>\n",
              "      <td>27-08-2024</td>\n",
              "      <td>8</td>\n",
              "      <td>544144</td>\n",
              "      <td>19.99</td>\n",
              "      <td>8125042.0</td>\n",
              "      <td>30.160995</td>\n",
              "      <td>82</td>\n",
              "      <td>3</td>\n",
              "      <td>Red Nexus Games Inc.,IndieArk</td>\n",
              "      <td>Red Nexus Games Inc.</td>\n",
              "      <td>1296610</td>\n",
              "      <td>0.017683</td>\n",
              "      <td>0.199920</td>\n",
              "      <td>0.009674</td>\n",
              "      <td>0.101781</td>\n",
              "      <td>0.82</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1500 rows × 17 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9332a0a4-5f46-4423-88bb-83b3e0bbf2dd')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-9332a0a4-5f46-4423-88bb-83b3e0bbf2dd button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-9332a0a4-5f46-4423-88bb-83b3e0bbf2dd');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-fa7c3c5c-0cd8-448a-b227-6804389a9efe\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-fa7c3c5c-0cd8-448a-b227-6804389a9efe')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-fa7c3c5c-0cd8-448a-b227-6804389a9efe button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "  <div id=\"id_4f4f4b1f-44dc-4b6b-8813-66e563584a48\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df_pca5')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_4f4f4b1f-44dc-4b6b-8813-66e563584a48 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df_pca5');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df_pca5",
              "summary": "{\n  \"name\": \"df_pca5\",\n  \"rows\": 1500,\n  \"fields\": [\n    {\n      \"column\": \"name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1500,\n        \"samples\": [\n          \"Out of the Park Baseball 25\",\n          \"Tomorrow's Love Puzzle\",\n          \"HAREM\\uff01RANCH LIFE\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"releaseDate\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 235,\n        \"samples\": [\n          \"22-08-2024\",\n          \"23-03-2024\",\n          \"08-06-2024\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"bulan rilis\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2,\n        \"min\": 1,\n        \"max\": 9,\n        \"num_unique_values\": 9,\n        \"samples\": [\n          9,\n          7,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"copiesSold\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1132756,\n        \"min\": 593,\n        \"max\": 30739148,\n        \"num_unique_values\": 1460,\n        \"samples\": [\n          5885,\n          63753,\n          5046\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"price\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 12.646611586491048,\n        \"min\": 0.0,\n        \"max\": 99.99,\n        \"num_unique_values\": 58,\n        \"samples\": [\n          99.99,\n          24.99,\n          1.99\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"revenue\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 27810239.622256387,\n        \"min\": 20674.0,\n        \"max\": 837793356.0,\n        \"num_unique_values\": 1497,\n        \"samples\": [\n          23195.0,\n          491385.0,\n          331297.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"avgPlaytime\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 21.54217256267663,\n        \"min\": 0.0,\n        \"max\": 296.3328524525871,\n        \"num_unique_values\": 1500,\n        \"samples\": [\n          85.41960491706307,\n          4.02736735920015,\n          3.634375724102398\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"reviewScore\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 24,\n        \"min\": 0,\n        \"max\": 100,\n        \"num_unique_values\": 72,\n        \"samples\": [\n          96,\n          45,\n          89\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"publisherClass\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 3,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          3,\n          2,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"publishers\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1132,\n        \"samples\": [\n          \"KOMODO\",\n          \"Nutaku Publishing\",\n          \"Alpherior\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"developers\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1408,\n        \"samples\": [\n          \"\\u4e0a\\u6d77\\u6d32\\u7ade\\u7f51\\u7edc\\u79d1\\u6280\\u6709\\u9650\\u516c\\u53f8\",\n          \"Family Devs\",\n          \"TYPE-MOON,fuzz Inc.\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"steamId\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 606772,\n        \"min\": 24880,\n        \"max\": 3107330,\n        \"num_unique_values\": 1500,\n        \"samples\": [\n          2384620,\n          2726890,\n          2420240\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"copiesSold_maxmin\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.03685133086295703,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 1460,\n        \"samples\": [\n          0.0001721616386977202,\n          0.002054748507208618,\n          0.0001448669268936032\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"price_maxmin\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.12647876374128447,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 58,\n        \"samples\": [\n          1.0,\n          0.24992499249924993,\n          0.019901990199019903\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"revenue_maxmin\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.03319544814455573,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 1497,\n        \"samples\": [\n          3.0091694968874604e-06,\n          0.0005618600488097557,\n          0.00037077241437194535\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"avgPlaytime_maxmin\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.07269586339949728,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 1500,\n        \"samples\": [\n          0.28825560247569953,\n          0.01359068805860641,\n          0.012264504910686182\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"reviewScore_maxmin\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.24319438486138492,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 72,\n        \"samples\": [\n          0.96,\n          0.45,\n          0.89\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 226
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Perkalian Matriks"
      ],
      "metadata": {
        "id": "OecAHqb8qtlP"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "# Menghitung nilai eigen dan vektor eigen dari matriks korelasi\n",
        "eigenvalues, eigenvectors = np.linalg.eig(correlation_matrix)\n",
        "\n",
        "# Menampilkan nilai eigen dan vektor eigen\n",
        "print(\"Nilai Eigen:\")\n",
        "print(eigenvalues)\n",
        "print(\"\\nVektor Eigen:\")\n",
        "eigenvectors\n",
        "\n",
        "print(eigen_df.to_string(index=False))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-bH_iD2narKG",
        "outputId": "e1bf1428-052e-4d37-8406-81a976762154"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Nilai Eigen:\n",
            "[1.81762967 0.36174629 0.59231067 1.26305877 1.10130756 0.90620834\n",
            " 0.9577387 ]\n",
            "\n",
            "Vektor Eigen:\n",
            " Eigenvalue                                                                                                                                               Eigenvector\n",
            "   1.817630       [-0.02512256324271359, 0.5659045681054653, 0.36203507924630074, 0.6004584714695638, 0.17418820013696965, -0.03021322827095933, -0.3952805760716457]\n",
            "   0.361746 [0.007416073675643926, -0.6912790566033767, -0.15463381612104776, 0.7034329854810478, 0.019188504584487138, -0.0038369449261537333, -0.05445883534642931]\n",
            "   0.592311   [0.07596629544883078, 0.08314324973745799, -0.6812905905242689, -0.12303693705875801, -0.03551580833472796, -0.006502949489721213, -0.7118410667890921]\n",
            "   1.263059        [-0.11004361071576464, 0.41795339842860907, -0.6081934391830921, 0.3200554419484949, 0.08040189589754615, 0.15008515546199686, 0.5584627081036279]\n",
            "   1.101308          [0.6715523435961047, 0.08038273748257872, 0.0647925885349764, 0.10488664047194747, -0.522334704548463, 0.5040067115457901, 0.022371177615416484]\n",
            "   0.906208       [-0.6907104078710986, 0.030670635990859285, 0.047730872139122, 0.06042104493530542, -0.6866061482208972, 0.18930582601839063, -0.09372730221754692]\n",
            "   0.957739     [-0.23101940748104172, -0.11351374395510909, 0.06698164241400859, -0.11138301107189426, 0.4661575789030978, 0.8286405344908347, -0.11359543984873839]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Urutkan nilai eigen dari terbesar ke terkecil\n",
        "sorted_eigenvalues = np.sort(eigenvalues)[::-1]\n",
        "\n",
        "# Hitung proporsi variansi\n",
        "total_eigenvalues = np.sum(sorted_eigenvalues)\n",
        "proportions = []\n",
        "cumulative_proportion = 0\n",
        "for eigenvalue in sorted_eigenvalues:\n",
        "  proportion = (eigenvalue / total_eigenvalues) * 100\n",
        "  cumulative_proportion += proportion\n",
        "  proportions.append(cumulative_proportion)\n",
        "\n",
        "# Cetak proporsi variansi\n",
        "for i, proportion in enumerate(proportions):\n",
        "  print(f\"Proporsi Variansi hingga Eigenvalue {i+1}: {proportion}%\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "lxEUzLaE9iSZ",
        "outputId": "d95785ee-f659-4392-86c7-4b88da5f550a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Proporsi Variansi hingga Eigenvalue 1: 25.96613816722675%\n",
            "Proporsi Variansi hingga Eigenvalue 2: 44.009834838036454%\n",
            "Proporsi Variansi hingga Eigenvalue 3: 59.742799968181735%\n",
            "Proporsi Variansi hingga Eigenvalue 4: 73.42478141859613%\n",
            "Proporsi Variansi hingga Eigenvalue 5: 86.37061486499145%\n",
            "Proporsi Variansi hingga Eigenvalue 6: 94.832195803294%\n",
            "Proporsi Variansi hingga Eigenvalue 7: 100.00000000000001%\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Standar Scaler"
      ],
      "metadata": {
        "id": "vv0Tj0OXq8A4"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# 1. Daftar nilai eigen yang kamu pilih\n",
        "target_eigenvalues = [1.81763, 1.263059, 1.101308, 0.957739, 0.906208, 0.592311]\n",
        "\n",
        "# 2. Hitung nilai dan vektor eigen dari correlation matrix\n",
        "eigenvalues, eigenvectors = np.linalg.eig(correlation_matrix)\n",
        "\n",
        "# 3. Cari indeks dari nilai eigen yang mendekati target\n",
        "selected_indices = []\n",
        "for val in target_eigenvalues:\n",
        "    idx = np.argmin(np.abs(eigenvalues - val))\n",
        "    selected_indices.append(idx)\n",
        "\n",
        "# 4. Ambil eigenvektor yang sesuai (kolom pada eigenvectors)\n",
        "selected_eigenvectors = eigenvectors[:, selected_indices]  # shape: 7 x 6\n",
        "\n",
        "# 5. Ambil 7 kolom data\n",
        "cols_to_multiply = [\"bulan rilis\", \"copiesSold\", \"price\", \"revenue\", \"avgPlaytime\", \"reviewScore\", \"publisherClass\"]\n",
        "matrix_to_multiply = df_pca1[cols_to_multiply].values  # shape: n x 7\n",
        "\n",
        "# 6. Lakukan kombinasi linier data dengan eigenvektor terpilih\n",
        "result_matrix = np.dot(matrix_to_multiply, selected_eigenvectors)  # shape: n x 6\n",
        "\n",
        "# 7. Buat DataFrame dari hasil\n",
        "df_pca1_multiplied = pd.DataFrame(result_matrix, columns=[f\"kolom_{i+1}\" for i in range(len(selected_indices))])\n",
        "\n",
        "# 8. Tampilkan hasil\n",
        "df_pca1_multiplied"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "id": "hTzmz0V2hntC",
        "outputId": "15079727-41f7-46ea-9f04-23c0f48ea10e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       kolom_1   kolom_2   kolom_3   kolom_4   kolom_5   kolom_6\n",
              "0     2.267575 -3.588735  1.651147  0.074010 -2.832765 -4.998233\n",
              "1     0.139138 -1.125602  4.194199 -2.040341 -5.638252 -3.937401\n",
              "2    -0.324253 -0.608102  5.877932 -1.645192 -5.575657 -3.298180\n",
              "3    -0.906262  1.110254  3.848743 -1.506382 -4.788532 -1.833668\n",
              "4     1.324195 -2.442719  4.150034 -0.036635 -4.510628 -1.896114\n",
              "...        ...       ...       ...       ...       ...       ...\n",
              "1495 -0.765641  1.048248  2.723481 -1.348195 -3.080649 -2.240785\n",
              "1496 -0.298265  2.909271  3.690516 -1.749453 -5.046729 -0.610399\n",
              "1497  0.664279 -1.118298  3.756414 -0.735082 -3.251498 -0.563852\n",
              "1498  1.159707 -2.813412  5.659870 -1.437341 -5.384170 -1.710457\n",
              "1499 -0.861074  0.989546  5.194864 -1.659636 -6.290633 -1.686244\n",
              "\n",
              "[1500 rows x 6 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-2b4234f2-7f8f-4248-be5c-85e4a1c55747\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>kolom_1</th>\n",
              "      <th>kolom_2</th>\n",
              "      <th>kolom_3</th>\n",
              "      <th>kolom_4</th>\n",
              "      <th>kolom_5</th>\n",
              "      <th>kolom_6</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2.267575</td>\n",
              "      <td>-3.588735</td>\n",
              "      <td>1.651147</td>\n",
              "      <td>0.074010</td>\n",
              "      <td>-2.832765</td>\n",
              "      <td>-4.998233</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0.139138</td>\n",
              "      <td>-1.125602</td>\n",
              "      <td>4.194199</td>\n",
              "      <td>-2.040341</td>\n",
              "      <td>-5.638252</td>\n",
              "      <td>-3.937401</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>-0.324253</td>\n",
              "      <td>-0.608102</td>\n",
              "      <td>5.877932</td>\n",
              "      <td>-1.645192</td>\n",
              "      <td>-5.575657</td>\n",
              "      <td>-3.298180</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>-0.906262</td>\n",
              "      <td>1.110254</td>\n",
              "      <td>3.848743</td>\n",
              "      <td>-1.506382</td>\n",
              "      <td>-4.788532</td>\n",
              "      <td>-1.833668</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1.324195</td>\n",
              "      <td>-2.442719</td>\n",
              "      <td>4.150034</td>\n",
              "      <td>-0.036635</td>\n",
              "      <td>-4.510628</td>\n",
              "      <td>-1.896114</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1495</th>\n",
              "      <td>-0.765641</td>\n",
              "      <td>1.048248</td>\n",
              "      <td>2.723481</td>\n",
              "      <td>-1.348195</td>\n",
              "      <td>-3.080649</td>\n",
              "      <td>-2.240785</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1496</th>\n",
              "      <td>-0.298265</td>\n",
              "      <td>2.909271</td>\n",
              "      <td>3.690516</td>\n",
              "      <td>-1.749453</td>\n",
              "      <td>-5.046729</td>\n",
              "      <td>-0.610399</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1497</th>\n",
              "      <td>0.664279</td>\n",
              "      <td>-1.118298</td>\n",
              "      <td>3.756414</td>\n",
              "      <td>-0.735082</td>\n",
              "      <td>-3.251498</td>\n",
              "      <td>-0.563852</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1498</th>\n",
              "      <td>1.159707</td>\n",
              "      <td>-2.813412</td>\n",
              "      <td>5.659870</td>\n",
              "      <td>-1.437341</td>\n",
              "      <td>-5.384170</td>\n",
              "      <td>-1.710457</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1499</th>\n",
              "      <td>-0.861074</td>\n",
              "      <td>0.989546</td>\n",
              "      <td>5.194864</td>\n",
              "      <td>-1.659636</td>\n",
              "      <td>-6.290633</td>\n",
              "      <td>-1.686244</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1500 rows × 6 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2b4234f2-7f8f-4248-be5c-85e4a1c55747')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-2b4234f2-7f8f-4248-be5c-85e4a1c55747 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-2b4234f2-7f8f-4248-be5c-85e4a1c55747');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-29fb1335-39c4-4d77-b452-d5fac384ae61\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-29fb1335-39c4-4d77-b452-d5fac384ae61')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-29fb1335-39c4-4d77-b452-d5fac384ae61 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "  <div id=\"id_aee825c4-8c80-46e7-b5d9-ebe57f78ee70\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df_pca1_multiplied')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_aee825c4-8c80-46e7-b5d9-ebe57f78ee70 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df_pca1_multiplied');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df_pca1_multiplied",
              "summary": "{\n  \"name\": \"df_pca1_multiplied\",\n  \"rows\": 1500,\n  \"fields\": [\n    {\n      \"column\": \"kolom_1\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.3376501437073687,\n        \"min\": -2.0323458130376304,\n        \"max\": 26.37825816571799,\n        \"num_unique_values\": 1500,\n        \"samples\": [\n          0.1763621574461346,\n          -1.5900754510498913,\n          -1.563634206531356\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"kolom_2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.1290004073375834,\n        \"min\": -3.588735035524331,\n        \"max\": 13.44973804758299,\n        \"num_unique_values\": 1500,\n        \"samples\": [\n          0.06883463701767545,\n          1.8062512588580604,\n          0.63342433575156\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"kolom_3\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.7399997768161077,\n        \"min\": -6.161201520136813,\n        \"max\": 10.083266525464662,\n        \"num_unique_values\": 1500,\n        \"samples\": [\n          0.6736082973030714,\n          0.8042420315276408,\n          5.55208854880821\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"kolom_4\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0797172063751137,\n        \"min\": -5.7868570087147875,\n        \"max\": 4.80862142444362,\n        \"num_unique_values\": 1500,\n        \"samples\": [\n          1.0628698763177462,\n          -0.920407433303176,\n          -2.4990194258931253\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"kolom_5\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.6468068464608174,\n        \"min\": -14.182495204543715,\n        \"max\": -0.14295110203242786,\n        \"num_unique_values\": 1500,\n        \"samples\": [\n          -4.482095903177175,\n          -0.7685832562727448,\n          -5.562383892608217\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"kolom_6\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.7590201028443337,\n        \"min\": -4.998233337470778,\n        \"max\": 1.4680677799905175,\n        \"num_unique_values\": 1500,\n        \"samples\": [\n          -3.7828746510147435,\n          -1.6359520154916365,\n          -1.5359912205074284\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 229
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "winsorizing"
      ],
      "metadata": {
        "id": "a8baVi8JrVqd"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# 1. Daftar nilai eigen yang kamu pilih\n",
        "target_eigenvalues = [1.81763, 1.263059, 1.101308, 0.957739, 0.906208, 0.592311]\n",
        "\n",
        "# 2. Hitung nilai dan vektor eigen dari correlation matrix\n",
        "eigenvalues, eigenvectors = np.linalg.eig(correlation_matrix)\n",
        "\n",
        "# 3. Cari indeks dari nilai eigen yang mendekati target\n",
        "selected_indices = []\n",
        "for val in target_eigenvalues:\n",
        "    idx = np.argmin(np.abs(eigenvalues - val))\n",
        "    selected_indices.append(idx)\n",
        "\n",
        "# 4. Ambil eigenvektor yang sesuai (kolom pada eigenvectors)\n",
        "selected_eigenvectors = eigenvectors[:, selected_indices]  # shape: 7 x 6\n",
        "\n",
        "# 5. Ambil 7 kolom data\n",
        "cols_to_multiply = [\"bulan rilis\", \"copiesSold\", \"price\", \"revenue\", \"avgPlaytime\", \"reviewScore\", \"publisherClass\"]\n",
        "matrix_to_multiply = df_pca2[cols_to_multiply].values  # shape: n x 7\n",
        "\n",
        "# 6. Lakukan kombinasi linier data dengan eigenvektor terpilih\n",
        "result_matrix = np.dot(matrix_to_multiply, selected_eigenvectors)  # shape: n x 6\n",
        "\n",
        "# 7. Buat DataFrame dari hasil\n",
        "df_pca2_multiplied = pd.DataFrame(result_matrix, columns=[f\"kolom_{i+1}\" for i in range(len(selected_indices))])\n",
        "\n",
        "# 8. Tampilkan hasil\n",
        "df_pca2_multiplied"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "id": "szkjx8oXq7Rx",
        "outputId": "6354aa42-e40a-4b08-b853-f606f62b9a4f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "           kolom_1       kolom_2        kolom_3        kolom_4        kolom_5  \\\n",
              "0     2.826870e+06  1.525980e+06  490754.264908 -525703.663448  280094.208544   \n",
              "1     2.823758e+06  1.523682e+06  490313.587187 -525097.432771  279927.106108   \n",
              "2     2.854531e+06  1.546416e+06  494710.561865 -531253.551609  281612.145661   \n",
              "3     2.906419e+06  1.584753e+06  502066.443133 -541667.714876  284414.291138   \n",
              "4     2.813289e+06  1.515954e+06  488843.017516 -522962.391931  279364.890669   \n",
              "...            ...           ...            ...            ...            ...   \n",
              "1495  2.906419e+06  1.584749e+06  502069.293787 -541674.206852  284422.417663   \n",
              "1496  2.906413e+06  1.584765e+06  502060.391532 -541667.365876  284408.031156   \n",
              "1497  2.906423e+06  1.584743e+06  502079.466036 -541662.211200  284427.112459   \n",
              "1498  2.821794e+06  1.522233e+06  490055.392587 -524690.837229  279835.147040   \n",
              "1499  2.906420e+06  1.584754e+06  502068.008904 -541660.704986  284410.363161   \n",
              "\n",
              "            kolom_6  \n",
              "0    -546354.019700  \n",
              "1    -546811.556825  \n",
              "2    -542289.242853  \n",
              "3    -534651.976531  \n",
              "4    -548348.064640  \n",
              "...             ...  \n",
              "1495 -534655.149475  \n",
              "1496 -534638.599395  \n",
              "1497 -534659.755978  \n",
              "1498 -547097.229258  \n",
              "1499 -534652.054094  \n",
              "\n",
              "[1500 rows x 6 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-dd2de61e-9e2c-4f1a-b8d6-4af222b5729b\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>kolom_1</th>\n",
              "      <th>kolom_2</th>\n",
              "      <th>kolom_3</th>\n",
              "      <th>kolom_4</th>\n",
              "      <th>kolom_5</th>\n",
              "      <th>kolom_6</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2.826870e+06</td>\n",
              "      <td>1.525980e+06</td>\n",
              "      <td>490754.264908</td>\n",
              "      <td>-525703.663448</td>\n",
              "      <td>280094.208544</td>\n",
              "      <td>-546354.019700</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2.823758e+06</td>\n",
              "      <td>1.523682e+06</td>\n",
              "      <td>490313.587187</td>\n",
              "      <td>-525097.432771</td>\n",
              "      <td>279927.106108</td>\n",
              "      <td>-546811.556825</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2.854531e+06</td>\n",
              "      <td>1.546416e+06</td>\n",
              "      <td>494710.561865</td>\n",
              "      <td>-531253.551609</td>\n",
              "      <td>281612.145661</td>\n",
              "      <td>-542289.242853</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2.906419e+06</td>\n",
              "      <td>1.584753e+06</td>\n",
              "      <td>502066.443133</td>\n",
              "      <td>-541667.714876</td>\n",
              "      <td>284414.291138</td>\n",
              "      <td>-534651.976531</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2.813289e+06</td>\n",
              "      <td>1.515954e+06</td>\n",
              "      <td>488843.017516</td>\n",
              "      <td>-522962.391931</td>\n",
              "      <td>279364.890669</td>\n",
              "      <td>-548348.064640</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1495</th>\n",
              "      <td>2.906419e+06</td>\n",
              "      <td>1.584749e+06</td>\n",
              "      <td>502069.293787</td>\n",
              "      <td>-541674.206852</td>\n",
              "      <td>284422.417663</td>\n",
              "      <td>-534655.149475</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1496</th>\n",
              "      <td>2.906413e+06</td>\n",
              "      <td>1.584765e+06</td>\n",
              "      <td>502060.391532</td>\n",
              "      <td>-541667.365876</td>\n",
              "      <td>284408.031156</td>\n",
              "      <td>-534638.599395</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1497</th>\n",
              "      <td>2.906423e+06</td>\n",
              "      <td>1.584743e+06</td>\n",
              "      <td>502079.466036</td>\n",
              "      <td>-541662.211200</td>\n",
              "      <td>284427.112459</td>\n",
              "      <td>-534659.755978</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1498</th>\n",
              "      <td>2.821794e+06</td>\n",
              "      <td>1.522233e+06</td>\n",
              "      <td>490055.392587</td>\n",
              "      <td>-524690.837229</td>\n",
              "      <td>279835.147040</td>\n",
              "      <td>-547097.229258</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1499</th>\n",
              "      <td>2.906420e+06</td>\n",
              "      <td>1.584754e+06</td>\n",
              "      <td>502068.008904</td>\n",
              "      <td>-541660.704986</td>\n",
              "      <td>284410.363161</td>\n",
              "      <td>-534652.054094</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1500 rows × 6 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-dd2de61e-9e2c-4f1a-b8d6-4af222b5729b')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-dd2de61e-9e2c-4f1a-b8d6-4af222b5729b button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-dd2de61e-9e2c-4f1a-b8d6-4af222b5729b');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-bc1b2844-f5c7-40c1-bfa6-6881433e4ec4\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-bc1b2844-f5c7-40c1-bfa6-6881433e4ec4')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-bc1b2844-f5c7-40c1-bfa6-6881433e4ec4 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "  <div id=\"id_1ec40312-f289-496f-860c-3f8a36653d35\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df_pca2_multiplied')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_1ec40312-f289-496f-860c-3f8a36653d35 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df_pca2_multiplied');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df_pca2_multiplied",
              "summary": "{\n  \"name\": \"df_pca2_multiplied\",\n  \"rows\": 1500,\n  \"fields\": [\n    {\n      \"column\": \"kolom_1\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 721022.6434498529,\n        \"min\": 15392.3028782945,\n        \"max\": 2906430.817687691,\n        \"num_unique_values\": 1500,\n        \"samples\": [\n          1010720.7709137341,\n          237393.65903547007,\n          48974.31965503492\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"kolom_2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 392351.37300531456,\n        \"min\": 8413.33356749109,\n        \"max\": 1584767.096066061,\n        \"num_unique_values\": 1500,\n        \"samples\": [\n          544005.9362333695,\n          131235.82883162567,\n          26712.51978878035\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"kolom_3\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 124672.18527129118,\n        \"min\": 2668.416307674951,\n        \"max\": 502084.6962292814,\n        \"num_unique_values\": 1500,\n        \"samples\": [\n          175734.56300356722,\n          40757.38801835832,\n          8498.34955886448\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"kolom_4\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 134334.56600533833,\n        \"min\": -541736.9081882708,\n        \"max\": -2782.561986565351,\n        \"num_unique_values\": 1500,\n        \"samples\": [\n          -187778.87778609124,\n          -44318.59846000055,\n          -9068.26754771498\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"kolom_5\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 70744.58871280527,\n        \"min\": 1501.0378884520424,\n        \"max\": 284430.62804300676,\n        \"num_unique_values\": 1500,\n        \"samples\": [\n          100495.5464707689,\n          22837.582283031235,\n          4796.239281194658\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"kolom_6\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 134193.94615334037,\n        \"min\": -551574.4123341624,\n        \"max\": 13906.940311367514,\n        \"num_unique_values\": 1500,\n        \"samples\": [\n          -198075.3885872019,\n          -40616.758503221055,\n          -9005.844239095377\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 230
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "RobustScaler"
      ],
      "metadata": {
        "id": "Lm-0L8sdrmBV"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# 1. Daftar nilai eigen yang kamu pilih\n",
        "target_eigenvalues = [1.81763, 1.263059, 1.101308, 0.957739, 0.906208, 0.592311]\n",
        "\n",
        "# 2. Hitung nilai dan vektor eigen dari correlation matrix\n",
        "eigenvalues, eigenvectors = np.linalg.eig(correlation_matrix)\n",
        "\n",
        "# 3. Cari indeks dari nilai eigen yang mendekati target\n",
        "selected_indices = []\n",
        "for val in target_eigenvalues:\n",
        "    idx = np.argmin(np.abs(eigenvalues - val))\n",
        "    selected_indices.append(idx)\n",
        "\n",
        "# 4. Ambil eigenvektor yang sesuai (kolom pada eigenvectors)\n",
        "selected_eigenvectors = eigenvectors[:, selected_indices]  # shape: 7 x 6\n",
        "\n",
        "# 5. Ambil 7 kolom data\n",
        "cols_to_multiply = [\"bulan rilis\", \"copiesSold\", \"price\", \"revenue\", \"avgPlaytime\", \"reviewScore\", \"publisherClass\"]\n",
        "matrix_to_multiply = df_pca3[cols_to_multiply].values  # shape: n x 7\n",
        "\n",
        "# 6. Lakukan kombinasi linier data dengan eigenvektor terpilih\n",
        "result_matrix = np.dot(matrix_to_multiply, selected_eigenvectors)  # shape: n x 6\n",
        "\n",
        "# 7. Buat DataFrame dari hasil\n",
        "df_pca3_multiplied = pd.DataFrame(result_matrix, columns=[f\"kolom_{i+1}\" for i in range(len(selected_indices))])\n",
        "\n",
        "# 8. Tampilkan hasil\n",
        "df_pca3_multiplied"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "id": "aCPlwTtnsLnU",
        "outputId": "07b82b80-c6e7-4ac8-e609-1e81d75eff02"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "        kolom_1    kolom_2    kolom_3    kolom_4   kolom_5   kolom_6\n",
              "0     17.556010   3.422218   2.744618  -1.683627 -3.121431 -8.403114\n",
              "1     14.657943   6.114707   5.502059  -4.238196 -5.510703 -6.707804\n",
              "2     14.745887   7.338102   7.947260  -4.261379 -4.677122 -5.739274\n",
              "3     17.762508  12.227617   5.969638  -4.659545 -4.238583 -3.299433\n",
              "4     15.205707   4.448619   5.384047  -1.692904 -4.555801 -4.648804\n",
              "...         ...        ...        ...        ...       ...       ...\n",
              "1495  19.442675  12.943763   5.426396  -5.097504 -1.964734 -4.019826\n",
              "1496  56.346396  42.134674  11.006544 -12.362375 -2.681688  3.302038\n",
              "1497  21.598650  11.189820   6.711397  -4.569751 -1.965734 -2.330890\n",
              "1498  16.269482   4.776217   7.662686  -4.002971 -4.540231 -4.625146\n",
              "1499  20.112917  13.694085   7.516296  -5.066480 -5.798842 -3.019877\n",
              "\n",
              "[1500 rows x 6 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-9445ee26-3600-4d9d-8920-d83f4e2a65c3\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>kolom_1</th>\n",
              "      <th>kolom_2</th>\n",
              "      <th>kolom_3</th>\n",
              "      <th>kolom_4</th>\n",
              "      <th>kolom_5</th>\n",
              "      <th>kolom_6</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>17.556010</td>\n",
              "      <td>3.422218</td>\n",
              "      <td>2.744618</td>\n",
              "      <td>-1.683627</td>\n",
              "      <td>-3.121431</td>\n",
              "      <td>-8.403114</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>14.657943</td>\n",
              "      <td>6.114707</td>\n",
              "      <td>5.502059</td>\n",
              "      <td>-4.238196</td>\n",
              "      <td>-5.510703</td>\n",
              "      <td>-6.707804</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>14.745887</td>\n",
              "      <td>7.338102</td>\n",
              "      <td>7.947260</td>\n",
              "      <td>-4.261379</td>\n",
              "      <td>-4.677122</td>\n",
              "      <td>-5.739274</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>17.762508</td>\n",
              "      <td>12.227617</td>\n",
              "      <td>5.969638</td>\n",
              "      <td>-4.659545</td>\n",
              "      <td>-4.238583</td>\n",
              "      <td>-3.299433</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>15.205707</td>\n",
              "      <td>4.448619</td>\n",
              "      <td>5.384047</td>\n",
              "      <td>-1.692904</td>\n",
              "      <td>-4.555801</td>\n",
              "      <td>-4.648804</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1495</th>\n",
              "      <td>19.442675</td>\n",
              "      <td>12.943763</td>\n",
              "      <td>5.426396</td>\n",
              "      <td>-5.097504</td>\n",
              "      <td>-1.964734</td>\n",
              "      <td>-4.019826</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1496</th>\n",
              "      <td>56.346396</td>\n",
              "      <td>42.134674</td>\n",
              "      <td>11.006544</td>\n",
              "      <td>-12.362375</td>\n",
              "      <td>-2.681688</td>\n",
              "      <td>3.302038</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1497</th>\n",
              "      <td>21.598650</td>\n",
              "      <td>11.189820</td>\n",
              "      <td>6.711397</td>\n",
              "      <td>-4.569751</td>\n",
              "      <td>-1.965734</td>\n",
              "      <td>-2.330890</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1498</th>\n",
              "      <td>16.269482</td>\n",
              "      <td>4.776217</td>\n",
              "      <td>7.662686</td>\n",
              "      <td>-4.002971</td>\n",
              "      <td>-4.540231</td>\n",
              "      <td>-4.625146</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1499</th>\n",
              "      <td>20.112917</td>\n",
              "      <td>13.694085</td>\n",
              "      <td>7.516296</td>\n",
              "      <td>-5.066480</td>\n",
              "      <td>-5.798842</td>\n",
              "      <td>-3.019877</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1500 rows × 6 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9445ee26-3600-4d9d-8920-d83f4e2a65c3')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-9445ee26-3600-4d9d-8920-d83f4e2a65c3 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-9445ee26-3600-4d9d-8920-d83f4e2a65c3');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-d48bb910-16e5-4912-a91d-e840eca5dcae\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-d48bb910-16e5-4912-a91d-e840eca5dcae')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-d48bb910-16e5-4912-a91d-e840eca5dcae button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "  <div id=\"id_a28a5596-bb16-44a4-bda5-f88fad4b997f\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df_pca3_multiplied')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_a28a5596-bb16-44a4-bda5-f88fad4b997f button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df_pca3_multiplied');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df_pca3_multiplied",
              "summary": "{\n  \"name\": \"df_pca3_multiplied\",\n  \"rows\": 1500,\n  \"fields\": [\n    {\n      \"column\": \"kolom_1\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 55.264775071327605,\n        \"min\": -2.130680089575853,\n        \"max\": 1495.4038181892827,\n        \"num_unique_values\": 1500,\n        \"samples\": [\n          4.258280152686986,\n          -0.5731291754641781,\n          -1.4811616858035357\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"kolom_2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 32.57569373214896,\n        \"min\": -3.6339732508851945,\n        \"max\": 848.2924989562821,\n        \"num_unique_values\": 1500,\n        \"samples\": [\n          1.5239118678608539,\n          2.3184309154197744,\n          0.3934644866350915\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"kolom_3\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 9.238227982548732,\n        \"min\": -14.678134307625864,\n        \"max\": 257.5894110259229,\n        \"num_unique_values\": 1500,\n        \"samples\": [\n          -1.4487407489601205,\n          0.7117631239635227,\n          5.328433871027111\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"kolom_4\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 10.429278760019974,\n        \"min\": -281.64975935347127,\n        \"max\": 10.987527570287407,\n        \"num_unique_values\": 1500,\n        \"samples\": [\n          2.6365652374855864,\n          -1.3601615702428076,\n          -2.7456029104282633\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"kolom_5\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5.183754244533054,\n        \"min\": -24.286311283501345,\n        \"max\": 131.7462307870237,\n        \"num_unique_values\": 1500,\n        \"samples\": [\n          -7.562033093326505,\n          -0.8399164508384938,\n          -5.682511585497596\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"kolom_6\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 7.038899227470369,\n        \"min\": -215.69396551701652,\n        \"max\": 76.58768852508963,\n        \"num_unique_values\": 1500,\n        \"samples\": [\n          -4.961231548439916,\n          -1.707975818348415,\n          -1.7240967833758891\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 231
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "IQR"
      ],
      "metadata": {
        "id": "mZEaaADksQzX"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# 1. Daftar nilai eigen yang kamu pilih\n",
        "target_eigenvalues = [1.81763, 1.263059, 1.101308, 0.957739, 0.906208, 0.592311]\n",
        "\n",
        "# 2. Hitung nilai dan vektor eigen dari correlation matrix\n",
        "eigenvalues, eigenvectors = np.linalg.eig(correlation_matrix)\n",
        "\n",
        "# 3. Cari indeks dari nilai eigen yang mendekati target\n",
        "selected_indices = []\n",
        "for val in target_eigenvalues:\n",
        "    idx = np.argmin(np.abs(eigenvalues - val))\n",
        "    selected_indices.append(idx)\n",
        "\n",
        "# 4. Ambil eigenvektor yang sesuai (kolom pada eigenvectors)\n",
        "selected_eigenvectors = eigenvectors[:, selected_indices]  # shape: 7 x 6\n",
        "\n",
        "# 5. Ambil 7 kolom data\n",
        "cols_to_multiply = [\"bulan rilis\", \"copiesSold\", \"price\", \"revenue\", \"avgPlaytime\", \"reviewScore\", \"publisherClass\"]\n",
        "matrix_to_multiply = df_pca4[cols_to_multiply].values  # shape: n x 7\n",
        "\n",
        "# 6. Lakukan kombinasi linier data dengan eigenvektor terpilih\n",
        "result_matrix = np.dot(matrix_to_multiply, selected_eigenvectors)  # shape: n x 6\n",
        "\n",
        "# 7. Buat DataFrame dari hasil\n",
        "df_pca4_multiplied = pd.DataFrame(result_matrix, columns=[f\"kolom_{i+1}\" for i in range(len(selected_indices))])\n",
        "\n",
        "# 8. Tampilkan hasil\n",
        "df_pca4_multiplied"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "id": "QL8t72-tsRN8",
        "outputId": "fd9ca420-59cc-4bd2-d1e5-3e456d4f3dd3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "            kolom_1        kolom_2        kolom_3        kolom_4  \\\n",
              "0     691711.403293  378780.702280  119237.566549 -128971.043389   \n",
              "1     691696.453824  378803.605577  119230.649704 -128986.474890   \n",
              "2     691689.265655  378813.027189  119254.112354 -128968.662202   \n",
              "3     691680.967799  378830.684637  119238.329052 -128974.398479   \n",
              "4     691696.486472  378807.893553  119249.567300 -128953.586104   \n",
              "...             ...            ...            ...            ...   \n",
              "1495  691681.124131  378826.585090  119241.179707 -128980.890455   \n",
              "1496  691674.246837  378842.752592  119234.659358 -128976.175210   \n",
              "1497  691684.998542  378820.759692  119251.351955 -128968.894802   \n",
              "1498  691694.680717  378804.402692  119249.973514 -128972.388635   \n",
              "1499  691681.191967  378831.575400  119241.329720 -128968.669162   \n",
              "\n",
              "           kolom_5        kolom_6  \n",
              "0     67303.151021 -124416.623299  \n",
              "1     67295.641209 -124390.400451  \n",
              "2     67310.614204 -124383.181807  \n",
              "3     67299.815722 -124363.255437  \n",
              "4     67303.996028 -124388.594510  \n",
              "...            ...            ...  \n",
              "1495  67307.942247 -124366.428381  \n",
              "1496  67296.686743 -124349.716345  \n",
              "1497  67312.637043 -124371.034884  \n",
              "1498  67308.481195 -124387.894692  \n",
              "1499  67297.773909 -124363.235435  \n",
              "\n",
              "[1500 rows x 6 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-6a3208fc-86bd-4c37-9666-efd3aba5037d\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>kolom_1</th>\n",
              "      <th>kolom_2</th>\n",
              "      <th>kolom_3</th>\n",
              "      <th>kolom_4</th>\n",
              "      <th>kolom_5</th>\n",
              "      <th>kolom_6</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>691711.403293</td>\n",
              "      <td>378780.702280</td>\n",
              "      <td>119237.566549</td>\n",
              "      <td>-128971.043389</td>\n",
              "      <td>67303.151021</td>\n",
              "      <td>-124416.623299</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>691696.453824</td>\n",
              "      <td>378803.605577</td>\n",
              "      <td>119230.649704</td>\n",
              "      <td>-128986.474890</td>\n",
              "      <td>67295.641209</td>\n",
              "      <td>-124390.400451</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>691689.265655</td>\n",
              "      <td>378813.027189</td>\n",
              "      <td>119254.112354</td>\n",
              "      <td>-128968.662202</td>\n",
              "      <td>67310.614204</td>\n",
              "      <td>-124383.181807</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>691680.967799</td>\n",
              "      <td>378830.684637</td>\n",
              "      <td>119238.329052</td>\n",
              "      <td>-128974.398479</td>\n",
              "      <td>67299.815722</td>\n",
              "      <td>-124363.255437</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>691696.486472</td>\n",
              "      <td>378807.893553</td>\n",
              "      <td>119249.567300</td>\n",
              "      <td>-128953.586104</td>\n",
              "      <td>67303.996028</td>\n",
              "      <td>-124388.594510</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1495</th>\n",
              "      <td>691681.124131</td>\n",
              "      <td>378826.585090</td>\n",
              "      <td>119241.179707</td>\n",
              "      <td>-128980.890455</td>\n",
              "      <td>67307.942247</td>\n",
              "      <td>-124366.428381</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1496</th>\n",
              "      <td>691674.246837</td>\n",
              "      <td>378842.752592</td>\n",
              "      <td>119234.659358</td>\n",
              "      <td>-128976.175210</td>\n",
              "      <td>67296.686743</td>\n",
              "      <td>-124349.716345</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1497</th>\n",
              "      <td>691684.998542</td>\n",
              "      <td>378820.759692</td>\n",
              "      <td>119251.351955</td>\n",
              "      <td>-128968.894802</td>\n",
              "      <td>67312.637043</td>\n",
              "      <td>-124371.034884</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1498</th>\n",
              "      <td>691694.680717</td>\n",
              "      <td>378804.402692</td>\n",
              "      <td>119249.973514</td>\n",
              "      <td>-128972.388635</td>\n",
              "      <td>67308.481195</td>\n",
              "      <td>-124387.894692</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1499</th>\n",
              "      <td>691681.191967</td>\n",
              "      <td>378831.575400</td>\n",
              "      <td>119241.329720</td>\n",
              "      <td>-128968.669162</td>\n",
              "      <td>67297.773909</td>\n",
              "      <td>-124363.235435</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1500 rows × 6 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-6a3208fc-86bd-4c37-9666-efd3aba5037d')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-6a3208fc-86bd-4c37-9666-efd3aba5037d button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-6a3208fc-86bd-4c37-9666-efd3aba5037d');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-7f91dd6c-71d7-4d51-a787-e4293bb1ea45\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-7f91dd6c-71d7-4d51-a787-e4293bb1ea45')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-7f91dd6c-71d7-4d51-a787-e4293bb1ea45 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "  <div id=\"id_1b45228f-b0c0-44ab-9a9c-89402dd57e44\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df_pca4_multiplied')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_1b45228f-b0c0-44ab-9a9c-89402dd57e44 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df_pca4_multiplied');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df_pca4_multiplied",
              "summary": "{\n  \"name\": \"df_pca4_multiplied\",\n  \"rows\": 1500,\n  \"fields\": [\n    {\n      \"column\": \"kolom_1\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 242442.77534267108,\n        \"min\": 12982.798717753756,\n        \"max\": 691711.4032931738,\n        \"num_unique_values\": 1499,\n        \"samples\": [\n          679160.4151713351,\n          202755.79283921968,\n          55920.439417631314\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"kolom_2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 132336.2972404248,\n        \"min\": 6993.595843534633,\n        \"max\": 378845.7243349347,\n        \"num_unique_values\": 1499,\n        \"samples\": [\n          369577.2331697753,\n          109224.55266470514,\n          31902.244580571198\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"kolom_3\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 41854.0230518372,\n        \"min\": 2300.1377534207572,\n        \"max\": 119262.06520469845,\n        \"num_unique_values\": 1499,\n        \"samples\": [\n          117466.2001429634,\n          35263.935937709735,\n          9485.411104423145\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"kolom_4\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 45199.45206384608,\n        \"min\": -129046.46188994986,\n        \"max\": -2332.166977430431,\n        \"num_unique_values\": 1499,\n        \"samples\": [\n          -126447.87849598621,\n          -37619.427530744506,\n          -10451.695349045513\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"kolom_5\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 23693.90658983262,\n        \"min\": 1298.7663172214266,\n        \"max\": 67321.4724053124,\n        \"num_unique_values\": 1499,\n        \"samples\": [\n          66622.55687829237,\n          20138.32366966505,\n          5168.456590566172\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"kolom_6\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 44435.20317189436,\n        \"min\": -129280.8268334821,\n        \"max\": 1977.9833410981612,\n        \"num_unique_values\": 1499,\n        \"samples\": [\n          -126210.32284606188,\n          -39565.12228259586,\n          -7899.290686671501\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 232
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Max-Min"
      ],
      "metadata": {
        "id": "bGySt9_psV-M"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# 1. Daftar nilai eigen yang kamu pilih\n",
        "target_eigenvalues = [1.81763, 1.263059, 1.101308, 0.957739, 0.906208, 0.592311]\n",
        "\n",
        "# 2. Hitung nilai dan vektor eigen dari correlation matrix\n",
        "eigenvalues, eigenvectors = np.linalg.eig(correlation_matrix)\n",
        "# 3. Cari indeks dari nilai eigen yang mendekati target\n",
        "selected_indices = []\n",
        "for val in target_eigenvalues:\n",
        "    idx = np.argmin(np.abs(eigenvalues - val))\n",
        "    selected_indices.append(idx)\n",
        "\n",
        "# 4. Ambil eigenvektor yang sesuai (kolom pada eigenvectors)\n",
        "selected_eigenvectors = eigenvectors[:, selected_indices]  # shape: 7 x 6\n",
        "\n",
        "# 5. Ambil 7 kolom data\n",
        "cols_to_multiply = [\"bulan rilis\", \"copiesSold\", \"price\", \"revenue\", \"avgPlaytime\", \"reviewScore\", \"publisherClass\"]\n",
        "matrix_to_multiply = df_pca5[cols_to_multiply].values  # shape: n x 7\n",
        "\n",
        "# 6. Lakukan kombinasi linier data dengan eigenvektor terpilih\n",
        "result_matrix = np.dot(matrix_to_multiply, selected_eigenvectors)  # shape: n x 6\n",
        "\n",
        "# 7. Buat DataFrame dari hasil\n",
        "df_pca5_multiplied = pd.DataFrame(result_matrix, columns=[f\"kolom_{i+1}\" for i in range(len(selected_indices))])\n",
        "\n",
        "# 8. Tampilkan hasil\n",
        "df_pca5_multiplied"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "id": "TumnPPYssWlI",
        "outputId": "cbb38b6e-7af1-4289-a036-a992e9227b12"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "           kolom_1       kolom_2       kolom_3       kolom_4        kolom_5  \\\n",
              "0     4.930337e+06  2.647119e+06  8.581816e+05 -9.158804e+05  491754.223894   \n",
              "1     4.823363e+06  2.589492e+06  8.395999e+05 -8.960148e+05  481137.330464   \n",
              "2     4.813960e+06  2.590819e+06  8.369789e+05 -8.947196e+05  478779.483118   \n",
              "3     4.906966e+06  2.666797e+06  8.490220e+05 -9.139163e+05  482169.311251   \n",
              "4     4.661039e+06  2.500823e+06  8.116036e+05 -8.657111e+05  465294.693182   \n",
              "...            ...           ...           ...           ...            ...   \n",
              "1495  5.503604e+06  2.986108e+06  9.530383e+05 -1.024692e+06  541921.156355   \n",
              "1496  6.722174e+06  3.890235e+06  1.125465e+06 -1.269420e+06  607019.578271   \n",
              "1497  5.472636e+06  2.975331e+06  9.467272e+05 -1.019356e+06  537513.219984   \n",
              "1498  5.156903e+06  2.766874e+06  8.979468e+05 -9.578431e+05  514805.448991   \n",
              "1499  5.186693e+06  2.827894e+06  8.959805e+05 -9.666783e+05  507602.731962   \n",
              "\n",
              "           kolom_6  \n",
              "0    -9.774014e+05  \n",
              "1    -9.565528e+05  \n",
              "2    -9.437920e+05  \n",
              "3    -9.176742e+05  \n",
              "4    -9.269734e+05  \n",
              "...            ...  \n",
              "1495 -1.037712e+06  \n",
              "1496 -8.516062e+05  \n",
              "1497 -1.021549e+06  \n",
              "1498 -1.025585e+06  \n",
              "1499 -9.544551e+05  \n",
              "\n",
              "[1500 rows x 6 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-03ad2fd7-ee46-40e6-8156-4a871a948315\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>kolom_1</th>\n",
              "      <th>kolom_2</th>\n",
              "      <th>kolom_3</th>\n",
              "      <th>kolom_4</th>\n",
              "      <th>kolom_5</th>\n",
              "      <th>kolom_6</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>4.930337e+06</td>\n",
              "      <td>2.647119e+06</td>\n",
              "      <td>8.581816e+05</td>\n",
              "      <td>-9.158804e+05</td>\n",
              "      <td>491754.223894</td>\n",
              "      <td>-9.774014e+05</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>4.823363e+06</td>\n",
              "      <td>2.589492e+06</td>\n",
              "      <td>8.395999e+05</td>\n",
              "      <td>-8.960148e+05</td>\n",
              "      <td>481137.330464</td>\n",
              "      <td>-9.565528e+05</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>4.813960e+06</td>\n",
              "      <td>2.590819e+06</td>\n",
              "      <td>8.369789e+05</td>\n",
              "      <td>-8.947196e+05</td>\n",
              "      <td>478779.483118</td>\n",
              "      <td>-9.437920e+05</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4.906966e+06</td>\n",
              "      <td>2.666797e+06</td>\n",
              "      <td>8.490220e+05</td>\n",
              "      <td>-9.139163e+05</td>\n",
              "      <td>482169.311251</td>\n",
              "      <td>-9.176742e+05</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>4.661039e+06</td>\n",
              "      <td>2.500823e+06</td>\n",
              "      <td>8.116036e+05</td>\n",
              "      <td>-8.657111e+05</td>\n",
              "      <td>465294.693182</td>\n",
              "      <td>-9.269734e+05</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1495</th>\n",
              "      <td>5.503604e+06</td>\n",
              "      <td>2.986108e+06</td>\n",
              "      <td>9.530383e+05</td>\n",
              "      <td>-1.024692e+06</td>\n",
              "      <td>541921.156355</td>\n",
              "      <td>-1.037712e+06</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1496</th>\n",
              "      <td>6.722174e+06</td>\n",
              "      <td>3.890235e+06</td>\n",
              "      <td>1.125465e+06</td>\n",
              "      <td>-1.269420e+06</td>\n",
              "      <td>607019.578271</td>\n",
              "      <td>-8.516062e+05</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1497</th>\n",
              "      <td>5.472636e+06</td>\n",
              "      <td>2.975331e+06</td>\n",
              "      <td>9.467272e+05</td>\n",
              "      <td>-1.019356e+06</td>\n",
              "      <td>537513.219984</td>\n",
              "      <td>-1.021549e+06</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1498</th>\n",
              "      <td>5.156903e+06</td>\n",
              "      <td>2.766874e+06</td>\n",
              "      <td>8.979468e+05</td>\n",
              "      <td>-9.578431e+05</td>\n",
              "      <td>514805.448991</td>\n",
              "      <td>-1.025585e+06</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1499</th>\n",
              "      <td>5.186693e+06</td>\n",
              "      <td>2.827894e+06</td>\n",
              "      <td>8.959805e+05</td>\n",
              "      <td>-9.666783e+05</td>\n",
              "      <td>507602.731962</td>\n",
              "      <td>-9.544551e+05</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1500 rows × 6 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-03ad2fd7-ee46-40e6-8156-4a871a948315')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-03ad2fd7-ee46-40e6-8156-4a871a948315 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-03ad2fd7-ee46-40e6-8156-4a871a948315');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-c8643556-1d06-411e-9ef9-ed174cb11722\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-c8643556-1d06-411e-9ef9-ed174cb11722')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-c8643556-1d06-411e-9ef9-ed174cb11722 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "  <div id=\"id_f94bfc44-863e-446a-b87b-f8dd1bb7997c\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df_pca5_multiplied')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_f94bfc44-863e-446a-b87b-f8dd1bb7997c button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df_pca5_multiplied');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df_pca5_multiplied",
              "summary": "{\n  \"name\": \"df_pca5_multiplied\",\n  \"rows\": 1500,\n  \"fields\": [\n    {\n      \"column\": \"kolom_1\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 17108550.337756816,\n        \"min\": 12982.798717753756,\n        \"max\": 511841438.17272526,\n        \"num_unique_values\": 1500,\n        \"samples\": [\n          1010732.3211805837,\n          237393.65903547007,\n          48974.31965503492\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"kolom_2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 9205376.301755529,\n        \"min\": 6993.595843534633,\n        \"max\": 274625801.1045858,\n        \"num_unique_values\": 1500,\n        \"samples\": [\n          544003.5145944789,\n          131235.82883162567,\n          26712.51978878035\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"kolom_3\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2974921.0966721266,\n        \"min\": 2300.1377534207572,\n        \"max\": 89120698.99015093,\n        \"num_unique_values\": 1500,\n        \"samples\": [\n          175711.4316472879,\n          40757.38801835832,\n          8498.34955886448\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"kolom_4\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3179874.7735756664,\n        \"min\": -95077280.00963949,\n        \"max\": -2332.166977430431,\n        \"num_unique_values\": 1500,\n        \"samples\": [\n          -187756.98615058177,\n          -44318.59846000055,\n          -9068.26754771498\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"kolom_5\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1702345.3179414961,\n        \"min\": 1298.7663172214266,\n        \"max\": 51096276.43502663,\n        \"num_unique_values\": 1500,\n        \"samples\": [\n          100464.7660415067,\n          22837.582283031235,\n          4796.239281194658\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"kolom_6\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3363369.7457250883,\n        \"min\": -101789413.8020606,\n        \"max\": 2517249.143787328,\n        \"num_unique_values\": 1500,\n        \"samples\": [\n          -198083.81834992394,\n          -40616.758503221055,\n          -9005.844239095377\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 233
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# K-means Clustering"
      ],
      "metadata": {
        "id": "_V9rksqWgig0"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Cluster 3\n"
      ],
      "metadata": {
        "id": "AlTkq45dqW9A"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Standar Scaler Cluster 3\n"
      ],
      "metadata": {
        "id": "PZMLbmclszpO"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df_kmeans_pca1=df_pca1_multiplied.copy()\n",
        "df_kmeans_pca1.head(10)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 363
        },
        "id": "OAIDEDtulwta",
        "outputId": "ae7d4ebf-9e09-4fa2-ddac-155c9f17ad0a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    kolom_1   kolom_2   kolom_3   kolom_4   kolom_5   kolom_6\n",
              "0  2.267575 -3.588735  1.651147  0.074010 -2.832765 -4.998233\n",
              "1  0.139138 -1.125602  4.194199 -2.040341 -5.638252 -3.937401\n",
              "2 -0.324253 -0.608102  5.877932 -1.645192 -5.575657 -3.298180\n",
              "3 -0.906262  1.110254  3.848743 -1.506382 -4.788532 -1.833668\n",
              "4  1.324195 -2.442719  4.150034 -0.036635 -4.510628 -1.896114\n",
              "5 -0.097803  0.969655  1.560454  0.429140 -6.301392 -2.575313\n",
              "6 -0.625428  1.136746  0.829423 -0.287400 -1.008997 -2.747899\n",
              "7 -0.523604  0.861439  2.182809 -0.546261 -3.888648 -2.562978\n",
              "8 -0.613520  0.743331  3.216921 -1.052196 -4.128663 -2.454430\n",
              "9  0.620249 -0.898718  3.886590 -0.159687 -4.764410 -0.263724"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-70bfdc60-0ef4-4ca3-99cb-6080cb1927b1\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>kolom_1</th>\n",
              "      <th>kolom_2</th>\n",
              "      <th>kolom_3</th>\n",
              "      <th>kolom_4</th>\n",
              "      <th>kolom_5</th>\n",
              "      <th>kolom_6</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2.267575</td>\n",
              "      <td>-3.588735</td>\n",
              "      <td>1.651147</td>\n",
              "      <td>0.074010</td>\n",
              "      <td>-2.832765</td>\n",
              "      <td>-4.998233</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0.139138</td>\n",
              "      <td>-1.125602</td>\n",
              "      <td>4.194199</td>\n",
              "      <td>-2.040341</td>\n",
              "      <td>-5.638252</td>\n",
              "      <td>-3.937401</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>-0.324253</td>\n",
              "      <td>-0.608102</td>\n",
              "      <td>5.877932</td>\n",
              "      <td>-1.645192</td>\n",
              "      <td>-5.575657</td>\n",
              "      <td>-3.298180</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>-0.906262</td>\n",
              "      <td>1.110254</td>\n",
              "      <td>3.848743</td>\n",
              "      <td>-1.506382</td>\n",
              "      <td>-4.788532</td>\n",
              "      <td>-1.833668</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1.324195</td>\n",
              "      <td>-2.442719</td>\n",
              "      <td>4.150034</td>\n",
              "      <td>-0.036635</td>\n",
              "      <td>-4.510628</td>\n",
              "      <td>-1.896114</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>-0.097803</td>\n",
              "      <td>0.969655</td>\n",
              "      <td>1.560454</td>\n",
              "      <td>0.429140</td>\n",
              "      <td>-6.301392</td>\n",
              "      <td>-2.575313</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>-0.625428</td>\n",
              "      <td>1.136746</td>\n",
              "      <td>0.829423</td>\n",
              "      <td>-0.287400</td>\n",
              "      <td>-1.008997</td>\n",
              "      <td>-2.747899</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>-0.523604</td>\n",
              "      <td>0.861439</td>\n",
              "      <td>2.182809</td>\n",
              "      <td>-0.546261</td>\n",
              "      <td>-3.888648</td>\n",
              "      <td>-2.562978</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>-0.613520</td>\n",
              "      <td>0.743331</td>\n",
              "      <td>3.216921</td>\n",
              "      <td>-1.052196</td>\n",
              "      <td>-4.128663</td>\n",
              "      <td>-2.454430</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>0.620249</td>\n",
              "      <td>-0.898718</td>\n",
              "      <td>3.886590</td>\n",
              "      <td>-0.159687</td>\n",
              "      <td>-4.764410</td>\n",
              "      <td>-0.263724</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-70bfdc60-0ef4-4ca3-99cb-6080cb1927b1')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-70bfdc60-0ef4-4ca3-99cb-6080cb1927b1 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-70bfdc60-0ef4-4ca3-99cb-6080cb1927b1');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-1d46e394-64e9-4b86-9bf1-9c1d73306df4\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-1d46e394-64e9-4b86-9bf1-9c1d73306df4')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-1d46e394-64e9-4b86-9bf1-9c1d73306df4 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df_kmeans_pca1",
              "summary": "{\n  \"name\": \"df_kmeans_pca1\",\n  \"rows\": 1500,\n  \"fields\": [\n    {\n      \"column\": \"kolom_1\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.3376501437073687,\n        \"min\": -2.0323458130376304,\n        \"max\": 26.37825816571799,\n        \"num_unique_values\": 1500,\n        \"samples\": [\n          0.1763621574461346,\n          -1.5900754510498913,\n          -1.563634206531356\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"kolom_2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.1290004073375834,\n        \"min\": -3.588735035524331,\n        \"max\": 13.44973804758299,\n        \"num_unique_values\": 1500,\n        \"samples\": [\n          0.06883463701767545,\n          1.8062512588580604,\n          0.63342433575156\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"kolom_3\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.7399997768161077,\n        \"min\": -6.161201520136813,\n        \"max\": 10.083266525464662,\n        \"num_unique_values\": 1500,\n        \"samples\": [\n          0.6736082973030714,\n          0.8042420315276408,\n          5.55208854880821\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"kolom_4\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0797172063751137,\n        \"min\": -5.7868570087147875,\n        \"max\": 4.80862142444362,\n        \"num_unique_values\": 1500,\n        \"samples\": [\n          1.0628698763177462,\n          -0.920407433303176,\n          -2.4990194258931253\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"kolom_5\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.6468068464608174,\n        \"min\": -14.182495204543715,\n        \"max\": -0.14295110203242786,\n        \"num_unique_values\": 1500,\n        \"samples\": [\n          -4.482095903177175,\n          -0.7685832562727448,\n          -5.562383892608217\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"kolom_6\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.7590201028443337,\n        \"min\": -4.998233337470778,\n        \"max\": 1.4680677799905175,\n        \"num_unique_values\": 1500,\n        \"samples\": [\n          -3.7828746510147435,\n          -1.6359520154916365,\n          -1.5359912205074284\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 234
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.cluster import KMeans\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Inisialisasi model KMeans dengan 3 kluster\n",
        "kmeans = KMeans(n_clusters=3, random_state=0)\n",
        "\n",
        "# Melakukan klustering pada dataframe 'df_minmax_multiplied'\n",
        "kmeans.fit(df_kmeans_pca1)\n",
        "\n",
        "# Mendapatkan label kluster untuk setiap data point\n",
        "labels = kmeans.labels_\n",
        "\n",
        "# Menambahkan kolom 'cluster' ke dataframe\n",
        "df_kmeans_pca1['cluster'] = labels\n",
        "\n",
        "# Plot hasil klustering (contoh menggunakan dua kolom pertama)\n",
        "plt.scatter(df_kmeans_pca1['kolom_1'], df_kmeans_pca1['kolom_2'], c=labels, cmap='viridis')\n",
        "plt.xlabel('kolom_1')\n",
        "plt.ylabel('kolom_2')\n",
        "plt.title('Hasil Klustering K-Means (3 Kluster)')\n",
        "plt.legend()\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 527
        },
        "id": "D8Fy1yuCkDLa",
        "outputId": "85048bff-80ae-4ebb-941d-c8d9aabf8a16"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/tmp/ipython-input-308698452.py:21: UserWarning: No artists with labels found to put in legend.  Note that artists whose label start with an underscore are ignored when legend() is called with no argument.\n",
            "  plt.legend()\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Menampilkan dataframe dengan kolom hasil kluster\n",
        "df_kmeans_pca1"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "id": "-bA6zT6nto9f",
        "outputId": "d278e93a-faa6-437e-9149-19e6cd3ba24b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       kolom_1   kolom_2   kolom_3   kolom_4   kolom_5   kolom_6  cluster\n",
              "0     2.267575 -3.588735  1.651147  0.074010 -2.832765 -4.998233        2\n",
              "1     0.139138 -1.125602  4.194199 -2.040341 -5.638252 -3.937401        0\n",
              "2    -0.324253 -0.608102  5.877932 -1.645192 -5.575657 -3.298180        0\n",
              "3    -0.906262  1.110254  3.848743 -1.506382 -4.788532 -1.833668        0\n",
              "4     1.324195 -2.442719  4.150034 -0.036635 -4.510628 -1.896114        2\n",
              "...        ...       ...       ...       ...       ...       ...      ...\n",
              "1495 -0.765641  1.048248  2.723481 -1.348195 -3.080649 -2.240785        1\n",
              "1496 -0.298265  2.909271  3.690516 -1.749453 -5.046729 -0.610399        0\n",
              "1497  0.664279 -1.118298  3.756414 -0.735082 -3.251498 -0.563852        2\n",
              "1498  1.159707 -2.813412  5.659870 -1.437341 -5.384170 -1.710457        0\n",
              "1499 -0.861074  0.989546  5.194864 -1.659636 -6.290633 -1.686244        0\n",
              "\n",
              "[1500 rows x 7 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-0601334b-7f57-4710-bf86-3a591eae82f2\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>kolom_1</th>\n",
              "      <th>kolom_2</th>\n",
              "      <th>kolom_3</th>\n",
              "      <th>kolom_4</th>\n",
              "      <th>kolom_5</th>\n",
              "      <th>kolom_6</th>\n",
              "      <th>cluster</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2.267575</td>\n",
              "      <td>-3.588735</td>\n",
              "      <td>1.651147</td>\n",
              "      <td>0.074010</td>\n",
              "      <td>-2.832765</td>\n",
              "      <td>-4.998233</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0.139138</td>\n",
              "      <td>-1.125602</td>\n",
              "      <td>4.194199</td>\n",
              "      <td>-2.040341</td>\n",
              "      <td>-5.638252</td>\n",
              "      <td>-3.937401</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>-0.324253</td>\n",
              "      <td>-0.608102</td>\n",
              "      <td>5.877932</td>\n",
              "      <td>-1.645192</td>\n",
              "      <td>-5.575657</td>\n",
              "      <td>-3.298180</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>-0.906262</td>\n",
              "      <td>1.110254</td>\n",
              "      <td>3.848743</td>\n",
              "      <td>-1.506382</td>\n",
              "      <td>-4.788532</td>\n",
              "      <td>-1.833668</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1.324195</td>\n",
              "      <td>-2.442719</td>\n",
              "      <td>4.150034</td>\n",
              "      <td>-0.036635</td>\n",
              "      <td>-4.510628</td>\n",
              "      <td>-1.896114</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1495</th>\n",
              "      <td>-0.765641</td>\n",
              "      <td>1.048248</td>\n",
              "      <td>2.723481</td>\n",
              "      <td>-1.348195</td>\n",
              "      <td>-3.080649</td>\n",
              "      <td>-2.240785</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1496</th>\n",
              "      <td>-0.298265</td>\n",
              "      <td>2.909271</td>\n",
              "      <td>3.690516</td>\n",
              "      <td>-1.749453</td>\n",
              "      <td>-5.046729</td>\n",
              "      <td>-0.610399</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1497</th>\n",
              "      <td>0.664279</td>\n",
              "      <td>-1.118298</td>\n",
              "      <td>3.756414</td>\n",
              "      <td>-0.735082</td>\n",
              "      <td>-3.251498</td>\n",
              "      <td>-0.563852</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1498</th>\n",
              "      <td>1.159707</td>\n",
              "      <td>-2.813412</td>\n",
              "      <td>5.659870</td>\n",
              "      <td>-1.437341</td>\n",
              "      <td>-5.384170</td>\n",
              "      <td>-1.710457</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1499</th>\n",
              "      <td>-0.861074</td>\n",
              "      <td>0.989546</td>\n",
              "      <td>5.194864</td>\n",
              "      <td>-1.659636</td>\n",
              "      <td>-6.290633</td>\n",
              "      <td>-1.686244</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1500 rows × 7 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-0601334b-7f57-4710-bf86-3a591eae82f2')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-0601334b-7f57-4710-bf86-3a591eae82f2 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-0601334b-7f57-4710-bf86-3a591eae82f2');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-bc9593f8-6aa4-457f-b5e5-9ffcb834fbc0\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-bc9593f8-6aa4-457f-b5e5-9ffcb834fbc0')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-bc9593f8-6aa4-457f-b5e5-9ffcb834fbc0 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "  <div id=\"id_a3a8637e-be7e-48ea-806f-e7b24e8b766c\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df_kmeans_pca1')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_a3a8637e-be7e-48ea-806f-e7b24e8b766c button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df_kmeans_pca1');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df_kmeans_pca1",
              "summary": "{\n  \"name\": \"df_kmeans_pca1\",\n  \"rows\": 1500,\n  \"fields\": [\n    {\n      \"column\": \"kolom_1\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.3376501437073687,\n        \"min\": -2.0323458130376304,\n        \"max\": 26.37825816571799,\n        \"num_unique_values\": 1500,\n        \"samples\": [\n          0.1763621574461346,\n          -1.5900754510498913,\n          -1.563634206531356\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"kolom_2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.1290004073375834,\n        \"min\": -3.588735035524331,\n        \"max\": 13.44973804758299,\n        \"num_unique_values\": 1500,\n        \"samples\": [\n          0.06883463701767545,\n          1.8062512588580604,\n          0.63342433575156\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"kolom_3\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.7399997768161077,\n        \"min\": -6.161201520136813,\n        \"max\": 10.083266525464662,\n        \"num_unique_values\": 1500,\n        \"samples\": [\n          0.6736082973030714,\n          0.8042420315276408,\n          5.55208854880821\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"kolom_4\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0797172063751137,\n        \"min\": -5.7868570087147875,\n        \"max\": 4.80862142444362,\n        \"num_unique_values\": 1500,\n        \"samples\": [\n          1.0628698763177462,\n          -0.920407433303176,\n          -2.4990194258931253\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"kolom_5\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.6468068464608174,\n        \"min\": -14.182495204543715,\n        \"max\": -0.14295110203242786,\n        \"num_unique_values\": 1500,\n        \"samples\": [\n          -4.482095903177175,\n          -0.7685832562727448,\n          -5.562383892608217\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"kolom_6\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.7590201028443337,\n        \"min\": -4.998233337470778,\n        \"max\": 1.4680677799905175,\n        \"num_unique_values\": 1500,\n        \"samples\": [\n          -3.7828746510147435,\n          -1.6359520154916365,\n          -1.5359912205074284\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"cluster\",\n      \"properties\": {\n        \"dtype\": \"int32\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          2,\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 236
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# prompt: lakukan evaluasi shiloutte coefficient pada  df_kmeans_minmax\n",
        "\n",
        "from sklearn.metrics import silhouette_score\n",
        "\n",
        "# Calculate Silhouette Coefficient\n",
        "silhouette_avg_pca1 = silhouette_score(df_kmeans_pca1.drop('cluster', axis=1), df_kmeans_pca1['cluster'])\n",
        "\n",
        "print(f\"Silhouette Coefficient: {silhouette_avg_pca1}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "81Z5momqm8Qg",
        "outputId": "b7bc2ec7-9462-4d28-d187-df0a7a61d096"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Silhouette Coefficient: 0.3779058812691099\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(df_kmeans_pca1['cluster'].value_counts())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4qpe-mQJwcVp",
        "outputId": "feba8cc5-8024-43d8-9c03-1b57ca635006"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "cluster\n",
            "0    729\n",
            "1    648\n",
            "2    123\n",
            "Name: count, dtype: int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Winsorizing cluster 3"
      ],
      "metadata": {
        "id": "v1QF5ZIls7rF"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df_kmeans_pca2=df_pca2_multiplied.copy()\n",
        "df_kmeans_pca2.head(10)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "PJ0X56CjnLvX",
        "outputId": "b742c292-607c-483b-dd2f-42f218f5e25c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "        kolom_1       kolom_2        kolom_3        kolom_4        kolom_5  \\\n",
              "0  2.826870e+06  1.525980e+06  490754.264908 -525703.663448  280094.208544   \n",
              "1  2.823758e+06  1.523682e+06  490313.587187 -525097.432771  279927.106108   \n",
              "2  2.854531e+06  1.546416e+06  494710.561865 -531253.551609  281612.145661   \n",
              "3  2.906419e+06  1.584753e+06  502066.443133 -541667.714876  284414.291138   \n",
              "4  2.813289e+06  1.515954e+06  488843.017516 -522962.391931  279364.890669   \n",
              "5  2.905743e+06  1.584245e+06  501963.104364 -541520.393057  284368.672733   \n",
              "6  2.906421e+06  1.584748e+06  502070.395072 -541665.443057  284424.612824   \n",
              "7  2.892314e+06  1.574327e+06  500054.446444 -538827.309534  283641.359946   \n",
              "8  2.906423e+06  1.584748e+06  502066.469379 -541663.023225  284414.105089   \n",
              "9  2.906426e+06  1.584749e+06  502069.389604 -541644.525121  284409.168317   \n",
              "\n",
              "         kolom_6  \n",
              "0 -546354.019700  \n",
              "1 -546811.556825  \n",
              "2 -542289.242853  \n",
              "3 -534651.976531  \n",
              "4 -548348.064640  \n",
              "5 -534759.691846  \n",
              "6 -534658.920168  \n",
              "7 -536732.750626  \n",
              "8 -534658.984330  \n",
              "9 -534657.267741  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-9580da71-bb72-4a17-9265-f640db874129\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>kolom_1</th>\n",
              "      <th>kolom_2</th>\n",
              "      <th>kolom_3</th>\n",
              "      <th>kolom_4</th>\n",
              "      <th>kolom_5</th>\n",
              "      <th>kolom_6</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2.826870e+06</td>\n",
              "      <td>1.525980e+06</td>\n",
              "      <td>490754.264908</td>\n",
              "      <td>-525703.663448</td>\n",
              "      <td>280094.208544</td>\n",
              "      <td>-546354.019700</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2.823758e+06</td>\n",
              "      <td>1.523682e+06</td>\n",
              "      <td>490313.587187</td>\n",
              "      <td>-525097.432771</td>\n",
              "      <td>279927.106108</td>\n",
              "      <td>-546811.556825</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2.854531e+06</td>\n",
              "      <td>1.546416e+06</td>\n",
              "      <td>494710.561865</td>\n",
              "      <td>-531253.551609</td>\n",
              "      <td>281612.145661</td>\n",
              "      <td>-542289.242853</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2.906419e+06</td>\n",
              "      <td>1.584753e+06</td>\n",
              "      <td>502066.443133</td>\n",
              "      <td>-541667.714876</td>\n",
              "      <td>284414.291138</td>\n",
              "      <td>-534651.976531</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2.813289e+06</td>\n",
              "      <td>1.515954e+06</td>\n",
              "      <td>488843.017516</td>\n",
              "      <td>-522962.391931</td>\n",
              "      <td>279364.890669</td>\n",
              "      <td>-548348.064640</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>2.905743e+06</td>\n",
              "      <td>1.584245e+06</td>\n",
              "      <td>501963.104364</td>\n",
              "      <td>-541520.393057</td>\n",
              "      <td>284368.672733</td>\n",
              "      <td>-534759.691846</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>2.906421e+06</td>\n",
              "      <td>1.584748e+06</td>\n",
              "      <td>502070.395072</td>\n",
              "      <td>-541665.443057</td>\n",
              "      <td>284424.612824</td>\n",
              "      <td>-534658.920168</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>2.892314e+06</td>\n",
              "      <td>1.574327e+06</td>\n",
              "      <td>500054.446444</td>\n",
              "      <td>-538827.309534</td>\n",
              "      <td>283641.359946</td>\n",
              "      <td>-536732.750626</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>2.906423e+06</td>\n",
              "      <td>1.584748e+06</td>\n",
              "      <td>502066.469379</td>\n",
              "      <td>-541663.023225</td>\n",
              "      <td>284414.105089</td>\n",
              "      <td>-534658.984330</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>2.906426e+06</td>\n",
              "      <td>1.584749e+06</td>\n",
              "      <td>502069.389604</td>\n",
              "      <td>-541644.525121</td>\n",
              "      <td>284409.168317</td>\n",
              "      <td>-534657.267741</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9580da71-bb72-4a17-9265-f640db874129')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-9580da71-bb72-4a17-9265-f640db874129 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-9580da71-bb72-4a17-9265-f640db874129');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-7414896b-050a-493d-8827-b886afc91fe3\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-7414896b-050a-493d-8827-b886afc91fe3')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-7414896b-050a-493d-8827-b886afc91fe3 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df_kmeans_pca2",
              "summary": "{\n  \"name\": \"df_kmeans_pca2\",\n  \"rows\": 1500,\n  \"fields\": [\n    {\n      \"column\": \"kolom_1\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 721022.6434498529,\n        \"min\": 15392.3028782945,\n        \"max\": 2906430.817687691,\n        \"num_unique_values\": 1500,\n        \"samples\": [\n          1010720.7709137341,\n          237393.65903547007,\n          48974.31965503492\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"kolom_2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 392351.37300531456,\n        \"min\": 8413.33356749109,\n        \"max\": 1584767.096066061,\n        \"num_unique_values\": 1500,\n        \"samples\": [\n          544005.9362333695,\n          131235.82883162567,\n          26712.51978878035\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"kolom_3\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 124672.18527129118,\n        \"min\": 2668.416307674951,\n        \"max\": 502084.6962292814,\n        \"num_unique_values\": 1500,\n        \"samples\": [\n          175734.56300356722,\n          40757.38801835832,\n          8498.34955886448\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"kolom_4\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 134334.56600533833,\n        \"min\": -541736.9081882708,\n        \"max\": -2782.561986565351,\n        \"num_unique_values\": 1500,\n        \"samples\": [\n          -187778.87778609124,\n          -44318.59846000055,\n          -9068.26754771498\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"kolom_5\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 70744.58871280527,\n        \"min\": 1501.0378884520424,\n        \"max\": 284430.62804300676,\n        \"num_unique_values\": 1500,\n        \"samples\": [\n          100495.5464707689,\n          22837.582283031235,\n          4796.239281194658\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"kolom_6\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 134193.94615334037,\n        \"min\": -551574.4123341624,\n        \"max\": 13906.940311367514,\n        \"num_unique_values\": 1500,\n        \"samples\": [\n          -198075.3885872019,\n          -40616.758503221055,\n          -9005.844239095377\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 239
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.cluster import KMeans\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Inisialisasi model KMeans dengan 3 kluster\n",
        "kmeans = KMeans(n_clusters=3, random_state=0)\n",
        "\n",
        "# Melakukan klustering pada dataframe 'df_minmax_multiplied'\n",
        "kmeans.fit(df_kmeans_pca2)\n",
        "\n",
        "# Mendapatkan label kluster untuk setiap data point\n",
        "labels = kmeans.labels_\n",
        "\n",
        "# Menambahkan kolom 'cluster' ke dataframe\n",
        "df_kmeans_pca2['cluster'] = labels\n",
        "\n",
        "# Plot hasil klustering (contoh menggunakan dua kolom pertama)\n",
        "plt.scatter(df_kmeans_pca2['kolom_1'], df_kmeans_pca2['kolom_2'], c=labels, cmap='viridis')\n",
        "plt.xlabel('kolom_1')\n",
        "plt.ylabel('kolom_2')\n",
        "plt.title('Hasil Klustering K-Means (3 Kluster)')\n",
        "plt.legend()\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "yfVpp4pLnQ71",
        "outputId": "62fae20a-d484-4dc8-cad6-f9b6400d5da5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/tmp/ipython-input-3106101619.py:21: UserWarning: No artists with labels found to put in legend.  Note that artists whose label start with an underscore are ignored when legend() is called with no argument.\n",
            "  plt.legend()\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_kmeans_pca2"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "id": "xhiw6KLRnbKM",
        "outputId": "a8378c4b-532d-40e0-9814-03081e2cace6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "           kolom_1       kolom_2        kolom_3        kolom_4        kolom_5  \\\n",
              "0     2.826870e+06  1.525980e+06  490754.264908 -525703.663448  280094.208544   \n",
              "1     2.823758e+06  1.523682e+06  490313.587187 -525097.432771  279927.106108   \n",
              "2     2.854531e+06  1.546416e+06  494710.561865 -531253.551609  281612.145661   \n",
              "3     2.906419e+06  1.584753e+06  502066.443133 -541667.714876  284414.291138   \n",
              "4     2.813289e+06  1.515954e+06  488843.017516 -522962.391931  279364.890669   \n",
              "...            ...           ...            ...            ...            ...   \n",
              "1495  2.906419e+06  1.584749e+06  502069.293787 -541674.206852  284422.417663   \n",
              "1496  2.906413e+06  1.584765e+06  502060.391532 -541667.365876  284408.031156   \n",
              "1497  2.906423e+06  1.584743e+06  502079.466036 -541662.211200  284427.112459   \n",
              "1498  2.821794e+06  1.522233e+06  490055.392587 -524690.837229  279835.147040   \n",
              "1499  2.906420e+06  1.584754e+06  502068.008904 -541660.704986  284410.363161   \n",
              "\n",
              "            kolom_6  cluster  \n",
              "0    -546354.019700        1  \n",
              "1    -546811.556825        1  \n",
              "2    -542289.242853        1  \n",
              "3    -534651.976531        1  \n",
              "4    -548348.064640        1  \n",
              "...             ...      ...  \n",
              "1495 -534655.149475        1  \n",
              "1496 -534638.599395        1  \n",
              "1497 -534659.755978        1  \n",
              "1498 -547097.229258        1  \n",
              "1499 -534652.054094        1  \n",
              "\n",
              "[1500 rows x 7 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-dae477f3-24b8-4833-82f9-156f20a73422\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>kolom_1</th>\n",
              "      <th>kolom_2</th>\n",
              "      <th>kolom_3</th>\n",
              "      <th>kolom_4</th>\n",
              "      <th>kolom_5</th>\n",
              "      <th>kolom_6</th>\n",
              "      <th>cluster</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2.826870e+06</td>\n",
              "      <td>1.525980e+06</td>\n",
              "      <td>490754.264908</td>\n",
              "      <td>-525703.663448</td>\n",
              "      <td>280094.208544</td>\n",
              "      <td>-546354.019700</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2.823758e+06</td>\n",
              "      <td>1.523682e+06</td>\n",
              "      <td>490313.587187</td>\n",
              "      <td>-525097.432771</td>\n",
              "      <td>279927.106108</td>\n",
              "      <td>-546811.556825</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2.854531e+06</td>\n",
              "      <td>1.546416e+06</td>\n",
              "      <td>494710.561865</td>\n",
              "      <td>-531253.551609</td>\n",
              "      <td>281612.145661</td>\n",
              "      <td>-542289.242853</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2.906419e+06</td>\n",
              "      <td>1.584753e+06</td>\n",
              "      <td>502066.443133</td>\n",
              "      <td>-541667.714876</td>\n",
              "      <td>284414.291138</td>\n",
              "      <td>-534651.976531</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2.813289e+06</td>\n",
              "      <td>1.515954e+06</td>\n",
              "      <td>488843.017516</td>\n",
              "      <td>-522962.391931</td>\n",
              "      <td>279364.890669</td>\n",
              "      <td>-548348.064640</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1495</th>\n",
              "      <td>2.906419e+06</td>\n",
              "      <td>1.584749e+06</td>\n",
              "      <td>502069.293787</td>\n",
              "      <td>-541674.206852</td>\n",
              "      <td>284422.417663</td>\n",
              "      <td>-534655.149475</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1496</th>\n",
              "      <td>2.906413e+06</td>\n",
              "      <td>1.584765e+06</td>\n",
              "      <td>502060.391532</td>\n",
              "      <td>-541667.365876</td>\n",
              "      <td>284408.031156</td>\n",
              "      <td>-534638.599395</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1497</th>\n",
              "      <td>2.906423e+06</td>\n",
              "      <td>1.584743e+06</td>\n",
              "      <td>502079.466036</td>\n",
              "      <td>-541662.211200</td>\n",
              "      <td>284427.112459</td>\n",
              "      <td>-534659.755978</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1498</th>\n",
              "      <td>2.821794e+06</td>\n",
              "      <td>1.522233e+06</td>\n",
              "      <td>490055.392587</td>\n",
              "      <td>-524690.837229</td>\n",
              "      <td>279835.147040</td>\n",
              "      <td>-547097.229258</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1499</th>\n",
              "      <td>2.906420e+06</td>\n",
              "      <td>1.584754e+06</td>\n",
              "      <td>502068.008904</td>\n",
              "      <td>-541660.704986</td>\n",
              "      <td>284410.363161</td>\n",
              "      <td>-534652.054094</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1500 rows × 7 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-dae477f3-24b8-4833-82f9-156f20a73422')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-dae477f3-24b8-4833-82f9-156f20a73422 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-dae477f3-24b8-4833-82f9-156f20a73422');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-432f9fcf-76b0-4b77-a3f7-ff3f6cf149bc\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-432f9fcf-76b0-4b77-a3f7-ff3f6cf149bc')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-432f9fcf-76b0-4b77-a3f7-ff3f6cf149bc button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "  <div id=\"id_f3910018-f63f-4659-9849-b4ee5641e978\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df_kmeans_pca2')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_f3910018-f63f-4659-9849-b4ee5641e978 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df_kmeans_pca2');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df_kmeans_pca2",
              "summary": "{\n  \"name\": \"df_kmeans_pca2\",\n  \"rows\": 1500,\n  \"fields\": [\n    {\n      \"column\": \"kolom_1\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 721022.6434498529,\n        \"min\": 15392.3028782945,\n        \"max\": 2906430.817687691,\n        \"num_unique_values\": 1500,\n        \"samples\": [\n          1010720.7709137341,\n          237393.65903547007,\n          48974.31965503492\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"kolom_2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 392351.37300531456,\n        \"min\": 8413.33356749109,\n        \"max\": 1584767.096066061,\n        \"num_unique_values\": 1500,\n        \"samples\": [\n          544005.9362333695,\n          131235.82883162567,\n          26712.51978878035\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"kolom_3\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 124672.18527129118,\n        \"min\": 2668.416307674951,\n        \"max\": 502084.6962292814,\n        \"num_unique_values\": 1500,\n        \"samples\": [\n          175734.56300356722,\n          40757.38801835832,\n          8498.34955886448\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"kolom_4\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 134334.56600533833,\n        \"min\": -541736.9081882708,\n        \"max\": -2782.561986565351,\n        \"num_unique_values\": 1500,\n        \"samples\": [\n          -187778.87778609124,\n          -44318.59846000055,\n          -9068.26754771498\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"kolom_5\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 70744.58871280527,\n        \"min\": 1501.0378884520424,\n        \"max\": 284430.62804300676,\n        \"num_unique_values\": 1500,\n        \"samples\": [\n          100495.5464707689,\n          22837.582283031235,\n          4796.239281194658\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"kolom_6\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 134193.94615334037,\n        \"min\": -551574.4123341624,\n        \"max\": 13906.940311367514,\n        \"num_unique_values\": 1500,\n        \"samples\": [\n          -198075.3885872019,\n          -40616.758503221055,\n          -9005.844239095377\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"cluster\",\n      \"properties\": {\n        \"dtype\": \"int32\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          1,\n          0,\n          2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 241
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# prompt: lakukan evaluasi shiloutte coefficient pada  df_kmeans_minmax\n",
        "\n",
        "from sklearn.metrics import silhouette_score\n",
        "\n",
        "# Calculate Silhouette Coefficient\n",
        "silhouette_avg_pca2 = silhouette_score(df_kmeans_pca2.drop('cluster', axis=1), df_kmeans_pca2['cluster'])\n",
        "\n",
        "print(f\"Silhouette Coefficient: {silhouette_avg_pca2}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "83K4YEujnmoJ",
        "outputId": "a01a9a09-6680-4b14-9ba8-e6bfaddfc57c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Silhouette Coefficient: 0.8130006845916833\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(df_kmeans_pca2['cluster'].value_counts())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5LSQwL5Rw25q",
        "outputId": "1b040f3f-e364-4599-b5f3-1a2c205dff03"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "cluster\n",
            "0    1250\n",
            "2     146\n",
            "1     104\n",
            "Name: count, dtype: int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## RobustScaler Cluster 3"
      ],
      "metadata": {
        "id": "mbiV_4ens_W8"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df_kmeans_pca3=df_pca3_multiplied.copy()\n",
        "df_kmeans_pca3.head(10)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "SnKYnnw6tCQ0",
        "outputId": "cf8e4c43-80b2-4ea2-e5b7-88100be56cfc"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     kolom_1    kolom_2   kolom_3   kolom_4   kolom_5   kolom_6\n",
              "0  17.556010   3.422218  2.744618 -1.683627 -3.121431 -8.403114\n",
              "1  14.657943   6.114707  5.502059 -4.238196 -5.510703 -6.707804\n",
              "2  14.745887   7.338102  7.947260 -4.261379 -4.677122 -5.739274\n",
              "3  17.762508  12.227617  5.969638 -4.659545 -4.238583 -3.299433\n",
              "4  15.205707   4.448619  5.384047 -1.692904 -4.555801 -4.648804\n",
              "5  16.782304  10.451904  1.168613 -0.244418 -8.733425 -4.600750\n",
              "6  15.847960  10.545574  2.906635 -3.171390 -0.256317 -4.548712\n",
              "7  15.324364   9.750174  3.370962 -2.609504 -4.176236 -4.516581\n",
              "8  16.421184  10.664815  5.001282 -3.759106 -3.814652 -3.986145\n",
              "9  17.791440   9.158832  5.404269 -2.458347 -4.872623 -1.743385"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-517b9dde-2932-4655-93ba-0c99d65c2c78\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>kolom_1</th>\n",
              "      <th>kolom_2</th>\n",
              "      <th>kolom_3</th>\n",
              "      <th>kolom_4</th>\n",
              "      <th>kolom_5</th>\n",
              "      <th>kolom_6</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>17.556010</td>\n",
              "      <td>3.422218</td>\n",
              "      <td>2.744618</td>\n",
              "      <td>-1.683627</td>\n",
              "      <td>-3.121431</td>\n",
              "      <td>-8.403114</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>14.657943</td>\n",
              "      <td>6.114707</td>\n",
              "      <td>5.502059</td>\n",
              "      <td>-4.238196</td>\n",
              "      <td>-5.510703</td>\n",
              "      <td>-6.707804</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>14.745887</td>\n",
              "      <td>7.338102</td>\n",
              "      <td>7.947260</td>\n",
              "      <td>-4.261379</td>\n",
              "      <td>-4.677122</td>\n",
              "      <td>-5.739274</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>17.762508</td>\n",
              "      <td>12.227617</td>\n",
              "      <td>5.969638</td>\n",
              "      <td>-4.659545</td>\n",
              "      <td>-4.238583</td>\n",
              "      <td>-3.299433</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>15.205707</td>\n",
              "      <td>4.448619</td>\n",
              "      <td>5.384047</td>\n",
              "      <td>-1.692904</td>\n",
              "      <td>-4.555801</td>\n",
              "      <td>-4.648804</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>16.782304</td>\n",
              "      <td>10.451904</td>\n",
              "      <td>1.168613</td>\n",
              "      <td>-0.244418</td>\n",
              "      <td>-8.733425</td>\n",
              "      <td>-4.600750</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>15.847960</td>\n",
              "      <td>10.545574</td>\n",
              "      <td>2.906635</td>\n",
              "      <td>-3.171390</td>\n",
              "      <td>-0.256317</td>\n",
              "      <td>-4.548712</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>15.324364</td>\n",
              "      <td>9.750174</td>\n",
              "      <td>3.370962</td>\n",
              "      <td>-2.609504</td>\n",
              "      <td>-4.176236</td>\n",
              "      <td>-4.516581</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>16.421184</td>\n",
              "      <td>10.664815</td>\n",
              "      <td>5.001282</td>\n",
              "      <td>-3.759106</td>\n",
              "      <td>-3.814652</td>\n",
              "      <td>-3.986145</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>17.791440</td>\n",
              "      <td>9.158832</td>\n",
              "      <td>5.404269</td>\n",
              "      <td>-2.458347</td>\n",
              "      <td>-4.872623</td>\n",
              "      <td>-1.743385</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-517b9dde-2932-4655-93ba-0c99d65c2c78')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-517b9dde-2932-4655-93ba-0c99d65c2c78 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-517b9dde-2932-4655-93ba-0c99d65c2c78');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-6b6a98f3-502d-4939-a856-088a53ac8f62\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-6b6a98f3-502d-4939-a856-088a53ac8f62')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-6b6a98f3-502d-4939-a856-088a53ac8f62 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df_kmeans_pca3",
              "summary": "{\n  \"name\": \"df_kmeans_pca3\",\n  \"rows\": 1500,\n  \"fields\": [\n    {\n      \"column\": \"kolom_1\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 55.264775071327605,\n        \"min\": -2.130680089575853,\n        \"max\": 1495.4038181892827,\n        \"num_unique_values\": 1500,\n        \"samples\": [\n          4.258280152686986,\n          -0.5731291754641781,\n          -1.4811616858035357\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"kolom_2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 32.57569373214896,\n        \"min\": -3.6339732508851945,\n        \"max\": 848.2924989562821,\n        \"num_unique_values\": 1500,\n        \"samples\": [\n          1.5239118678608539,\n          2.3184309154197744,\n          0.3934644866350915\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"kolom_3\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 9.238227982548732,\n        \"min\": -14.678134307625864,\n        \"max\": 257.5894110259229,\n        \"num_unique_values\": 1500,\n        \"samples\": [\n          -1.4487407489601205,\n          0.7117631239635227,\n          5.328433871027111\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"kolom_4\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 10.429278760019974,\n        \"min\": -281.64975935347127,\n        \"max\": 10.987527570287407,\n        \"num_unique_values\": 1500,\n        \"samples\": [\n          2.6365652374855864,\n          -1.3601615702428076,\n          -2.7456029104282633\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"kolom_5\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5.183754244533054,\n        \"min\": -24.286311283501345,\n        \"max\": 131.7462307870237,\n        \"num_unique_values\": 1500,\n        \"samples\": [\n          -7.562033093326505,\n          -0.8399164508384938,\n          -5.682511585497596\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"kolom_6\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 7.038899227470369,\n        \"min\": -215.69396551701652,\n        \"max\": 76.58768852508963,\n        \"num_unique_values\": 1500,\n        \"samples\": [\n          -4.961231548439916,\n          -1.707975818348415,\n          -1.7240967833758891\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 244
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.cluster import KMeans\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Inisialisasi model KMeans dengan 3 kluster\n",
        "kmeans = KMeans(n_clusters=3, random_state=0)\n",
        "\n",
        "# Melakukan klustering pada dataframe 'df_minmax_multiplied'\n",
        "kmeans.fit(df_kmeans_pca3)\n",
        "\n",
        "# Mendapatkan label kluster untuk setiap data point\n",
        "labels = kmeans.labels_\n",
        "\n",
        "# Menambahkan kolom 'cluster' ke dataframe\n",
        "df_kmeans_pca3['cluster'] = labels\n",
        "\n",
        "# Plot hasil klustering (contoh menggunakan dua kolom pertama)\n",
        "plt.scatter(df_kmeans_pca3['kolom_1'], df_kmeans_pca3['kolom_2'], c=labels, cmap='viridis')\n",
        "plt.xlabel('kolom_1')\n",
        "plt.ylabel('kolom_2')\n",
        "plt.title('Hasil Klustering K-Means (3 Kluster)')\n",
        "plt.legend()\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ic0GkZG5uaOf",
        "outputId": "14ba207c-0879-4b34-b949-30de7a4a695d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/tmp/ipython-input-1078763646.py:21: UserWarning: No artists with labels found to put in legend.  Note that artists whose label start with an underscore are ignored when legend() is called with no argument.\n",
            "  plt.legend()\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# prompt: lakukan evaluasi shiloutte coefficient pada  df_kmeans_minmax\n",
        "\n",
        "from sklearn.metrics import silhouette_score\n",
        "\n",
        "# Calculate Silhouette Coefficient\n",
        "silhouette_avg_pca3 = silhouette_score(df_kmeans_pca3.drop('cluster', axis=1), df_kmeans_pca3['cluster'])\n",
        "\n",
        "print(f\"Silhouette Coefficient: {silhouette_avg_pca3}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "PG_bfjEDug7m",
        "outputId": "6bd68084-6e8e-488a-b221-9a7a261540d2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Silhouette Coefficient: 0.9846034567597043\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(df_kmeans_pca3['cluster'].value_counts())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "3HoQCOO2w49I",
        "outputId": "628e74ed-b3fa-42fe-a3e5-f334a9ba23e6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "cluster\n",
            "0    1495\n",
            "1       4\n",
            "2       1\n",
            "Name: count, dtype: int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## IQR Cluster 3"
      ],
      "metadata": {
        "id": "_MCrr8vwtDfL"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df_kmeans_pca4=df_pca4_multiplied.copy()\n",
        "df_kmeans_pca4.head(10)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "jOsk39K7tGWE",
        "outputId": "7e198b2b-d2ca-4789-df93-d1b69075baa9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "         kolom_1        kolom_2        kolom_3        kolom_4       kolom_5  \\\n",
              "0  691711.403293  378780.702280  119237.566549 -128971.043389  67303.151021   \n",
              "1  691696.453824  378803.605577  119230.649704 -128986.474890  67295.641209   \n",
              "2  691689.265655  378813.027189  119254.112354 -128968.662202  67310.614204   \n",
              "3  691680.967799  378830.684637  119238.329052 -128974.398479  67299.815722   \n",
              "4  691696.486472  378807.893553  119249.567300 -128953.586104  67303.996028   \n",
              "5  691684.978326  378825.373340  119238.450969 -128969.792209  67299.755432   \n",
              "6  691683.181508  378825.265817  119242.280992 -128972.126660  67310.137409   \n",
              "7  691685.033661  378825.333299  119237.275410 -128970.389830  67300.256836   \n",
              "8  691684.978326  378825.373340  119238.450969 -128969.792209  67299.755432   \n",
              "9  691685.655633  378825.989271  119247.119515 -128956.424193  67302.374796   \n",
              "\n",
              "         kolom_6  \n",
              "0 -124416.623299  \n",
              "1 -124390.400451  \n",
              "2 -124383.181807  \n",
              "3 -124363.255437  \n",
              "4 -124388.594510  \n",
              "5 -124370.256731  \n",
              "6 -124370.199075  \n",
              "7 -124370.326195  \n",
              "8 -124370.256731  \n",
              "9 -124368.149289  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-b9a1e5ab-389c-4389-9b42-0d6a0e7a6f3b\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>kolom_1</th>\n",
              "      <th>kolom_2</th>\n",
              "      <th>kolom_3</th>\n",
              "      <th>kolom_4</th>\n",
              "      <th>kolom_5</th>\n",
              "      <th>kolom_6</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>691711.403293</td>\n",
              "      <td>378780.702280</td>\n",
              "      <td>119237.566549</td>\n",
              "      <td>-128971.043389</td>\n",
              "      <td>67303.151021</td>\n",
              "      <td>-124416.623299</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>691696.453824</td>\n",
              "      <td>378803.605577</td>\n",
              "      <td>119230.649704</td>\n",
              "      <td>-128986.474890</td>\n",
              "      <td>67295.641209</td>\n",
              "      <td>-124390.400451</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>691689.265655</td>\n",
              "      <td>378813.027189</td>\n",
              "      <td>119254.112354</td>\n",
              "      <td>-128968.662202</td>\n",
              "      <td>67310.614204</td>\n",
              "      <td>-124383.181807</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>691680.967799</td>\n",
              "      <td>378830.684637</td>\n",
              "      <td>119238.329052</td>\n",
              "      <td>-128974.398479</td>\n",
              "      <td>67299.815722</td>\n",
              "      <td>-124363.255437</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>691696.486472</td>\n",
              "      <td>378807.893553</td>\n",
              "      <td>119249.567300</td>\n",
              "      <td>-128953.586104</td>\n",
              "      <td>67303.996028</td>\n",
              "      <td>-124388.594510</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>691684.978326</td>\n",
              "      <td>378825.373340</td>\n",
              "      <td>119238.450969</td>\n",
              "      <td>-128969.792209</td>\n",
              "      <td>67299.755432</td>\n",
              "      <td>-124370.256731</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>691683.181508</td>\n",
              "      <td>378825.265817</td>\n",
              "      <td>119242.280992</td>\n",
              "      <td>-128972.126660</td>\n",
              "      <td>67310.137409</td>\n",
              "      <td>-124370.199075</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>691685.033661</td>\n",
              "      <td>378825.333299</td>\n",
              "      <td>119237.275410</td>\n",
              "      <td>-128970.389830</td>\n",
              "      <td>67300.256836</td>\n",
              "      <td>-124370.326195</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>691684.978326</td>\n",
              "      <td>378825.373340</td>\n",
              "      <td>119238.450969</td>\n",
              "      <td>-128969.792209</td>\n",
              "      <td>67299.755432</td>\n",
              "      <td>-124370.256731</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>691685.655633</td>\n",
              "      <td>378825.989271</td>\n",
              "      <td>119247.119515</td>\n",
              "      <td>-128956.424193</td>\n",
              "      <td>67302.374796</td>\n",
              "      <td>-124368.149289</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b9a1e5ab-389c-4389-9b42-0d6a0e7a6f3b')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-b9a1e5ab-389c-4389-9b42-0d6a0e7a6f3b button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-b9a1e5ab-389c-4389-9b42-0d6a0e7a6f3b');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-0f3c5105-3052-4ae9-8e57-0de956b43b63\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-0f3c5105-3052-4ae9-8e57-0de956b43b63')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-0f3c5105-3052-4ae9-8e57-0de956b43b63 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df_kmeans_pca4",
              "summary": "{\n  \"name\": \"df_kmeans_pca4\",\n  \"rows\": 1500,\n  \"fields\": [\n    {\n      \"column\": \"kolom_1\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 242442.77534267108,\n        \"min\": 12982.798717753756,\n        \"max\": 691711.4032931738,\n        \"num_unique_values\": 1499,\n        \"samples\": [\n          679160.4151713351,\n          202755.79283921968,\n          55920.439417631314\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"kolom_2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 132336.2972404248,\n        \"min\": 6993.595843534633,\n        \"max\": 378845.7243349347,\n        \"num_unique_values\": 1499,\n        \"samples\": [\n          369577.2331697753,\n          109224.55266470514,\n          31902.244580571198\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"kolom_3\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 41854.0230518372,\n        \"min\": 2300.1377534207572,\n        \"max\": 119262.06520469845,\n        \"num_unique_values\": 1499,\n        \"samples\": [\n          117466.2001429634,\n          35263.935937709735,\n          9485.411104423145\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"kolom_4\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 45199.45206384608,\n        \"min\": -129046.46188994986,\n        \"max\": -2332.166977430431,\n        \"num_unique_values\": 1499,\n        \"samples\": [\n          -126447.87849598621,\n          -37619.427530744506,\n          -10451.695349045513\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"kolom_5\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 23693.90658983262,\n        \"min\": 1298.7663172214266,\n        \"max\": 67321.4724053124,\n        \"num_unique_values\": 1499,\n        \"samples\": [\n          66622.55687829237,\n          20138.32366966505,\n          5168.456590566172\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"kolom_6\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 44435.20317189436,\n        \"min\": -129280.8268334821,\n        \"max\": 1977.9833410981612,\n        \"num_unique_values\": 1499,\n        \"samples\": [\n          -126210.32284606188,\n          -39565.12228259586,\n          -7899.290686671501\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 248
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.cluster import KMeans\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Inisialisasi model KMeans dengan 3 kluster\n",
        "kmeans = KMeans(n_clusters=3, random_state=0)\n",
        "\n",
        "# Melakukan klustering pada dataframe 'df_minmax_multiplied'\n",
        "kmeans.fit(df_kmeans_pca4)\n",
        "\n",
        "# Mendapatkan label kluster untuk setiap data point\n",
        "labels = kmeans.labels_\n",
        "\n",
        "# Menambahkan kolom 'cluster' ke dataframe\n",
        "df_kmeans_pca4['cluster'] = labels\n",
        "\n",
        "# Plot hasil klustering (contoh menggunakan dua kolom pertama)\n",
        "plt.scatter(df_kmeans_pca4['kolom_1'], df_kmeans_pca4['kolom_2'], c=labels, cmap='viridis')\n",
        "plt.xlabel('kolom_1')\n",
        "plt.ylabel('kolom_2')\n",
        "plt.title('Hasil Klustering K-Means (3 Kluster)')\n",
        "plt.legend()\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "tor05XTMu-Vv",
        "outputId": "b62d866f-038d-44bd-9d6d-ad8f90c96a50"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/tmp/ipython-input-580977742.py:21: UserWarning: No artists with labels found to put in legend.  Note that artists whose label start with an underscore are ignored when legend() is called with no argument.\n",
            "  plt.legend()\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "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mjUTu3fvNlpfmFyKK79jAECsWbPG0CYtLU28/fbbwtbWVlhYWIj+/fuL+/fvG8W5efOm6N27tzA3Nxf29vZi2rRpIisry6jNoUOHROvWrYVKpRINGjQw2keugs6jwuRSHKNGjRJ169YVKpVKODg4iB49ehgKr+pyDJ7myeKruhyLwYMHi1q1agmVSiVq164tBg8ebDS3VXU5DkIIsXPnTtG8eXOhVqtFkyZNxP/+9z+j9dXl96UQQuzbt08AyDdmVTwnJCGEKFpfGREREREVF8d8EREREZUhFl9EREREZYjFFxEREVEZYvFFREREVIZYfBERERGVIRZfRERERGWIxRcRERFRGWLxRURVVteuXTFlypRibTty5Ej069dP1nyIiAAWX0REFdbhw4fRt29fuLi4QJIkbN++vbxTIiIZsPgiIqqgUlJS0KpVK6xYsaK8UyEiGbH4IqJqY/fu3bC2tsb69etx7tw5dO/eHebm5qhZsybGjRuH5OTkp26bkZGB//znP3B0dISZmRk6d+6MkydPGtaHhIRAkiTs27cPbdq0gbm5Obp3746YmBjs2bMHTZs2hUajweuvv47U1NRC5du7d2+8//776N+/f4k/OxFVHCy+iKha2LBhA4YOHYr169ejX79+8PPzg62tLU6ePIktW7bg999/x8SJE5+6/YwZM/Dzzz9j3bp1OH36NDw8PODn54e4uDijdgsWLMDy5ctx7Ngx3L59G4MGDcLSpUuxYcMG7N69G/v378eyZctK++MSUQXG4ouIqrwVK1bg7bffxs6dO9GnTx9s2LAB6enp+P7779G8eXN0794dy5cvxw8//IDo6Og826ekpGDVqlX4+OOP0bt3b3h6euLrr7+Gubk5vv32W6O277//Pjp16oQ2bdpg9OjRCA0NxapVq9CmTRs8//zzGDhwIA4dOlRWH52IKiCT8k6AiKg0bd26FTExMTh69Cjat28PALh06RJatWoFS0tLQ7tOnTpBr9fjypUrcHJyMopx48YNZGVloVOnToZlpqam6NChAy5dumTUtmXLloZ/Ozk5wcLCAg0aNDBaduLECVk/IxFVLuz5IqIqrU2bNnBwcMB3330HIUSp78/U1NTwb0mSjN7nLtPr9aWeBxFVXCy+iKhKc3d3x6FDh7Bjxw5MmjQJANC0aVOcOXMGKSkphnZHjx6FQqFA48aN842hUqlw9OhRw7KsrCycPHkSnp6epf8hiKhK4WVHIqryGjVqhEOHDqFr164wMTHBhx9+iPnz5yMgIAALFixAbGwsJk2ahOHDh+e55AgAlpaWmDBhAqZPnw47Ozu4ublhyZIlSE1NxejRo0st7+TkZFy/ft3wPjIyEhEREYYciKhyYvFFRNVC48aNcfDgQXTt2hVKpRL79u3D5MmT0b59e1hYWGDAgAH47LPPnrr94sWLodfrMXz4cCQlJaFdu3bYt28fbG1tSy3nU6dOoVu3bob3QUFBAICAgACsXbu21PZLRKVLEmUxCIKIiIiIAHDMFxEREVGZYvFFRFQOoqKiYGVl9dRXVFRUeadIRKWElx2JiMpBdnY2bt68+dT19erVg4kJh+USVUUsvoiIiIjKEC87EhEREZUhFl9EREREZYjFFxEREVEZYvFFREREVIZYfBERERGVIRZfRERERGWIxRcRERFRGWLxRURERFSG/h9LpZ4sCI9tsQAAAABJRU5ErkJggg==\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import silhouette_score\n",
        "\n",
        "# Calculate Silhouette Coefficient\n",
        "silhouette_avg_pca4 = silhouette_score(df_kmeans_pca4.drop('cluster', axis=1), df_kmeans_pca4['cluster'])\n",
        "\n",
        "print(f\"Silhouette Coefficient: {silhouette_avg_pca4}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ePJql4IPvBZm",
        "outputId": "f6f36dde-375e-4742-e9f3-fcd8957e6990"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Silhouette Coefficient: 0.7524246354850511\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(df_kmeans_pca4['cluster'].value_counts())"
      ],
      "metadata": {
        "id": "UtbE_cHSxCk0",
        "outputId": "1bb44b88-211f-42e3-de11-dd250be7fdce",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "cluster\n",
            "0    990\n",
            "1    290\n",
            "2    220\n",
            "Name: count, dtype: int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Max-Min Cluster 3"
      ],
      "metadata": {
        "id": "at0k2leitFtr"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df_kmeans_pca5=df_pca5_multiplied.copy()\n",
        "df_kmeans_pca5.head(10)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "JIznz9cftIkb",
        "outputId": "ac72dcde-eccd-4c07-ee81-26a931b18246"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "        kolom_1       kolom_2        kolom_3        kolom_4        kolom_5  \\\n",
              "0  4.930337e+06  2.647119e+06  858181.581227 -915880.420576  491754.223894   \n",
              "1  4.823363e+06  2.589492e+06  839599.877320 -896014.774586  481137.330464   \n",
              "2  4.813960e+06  2.590819e+06  836978.868278 -894719.594267  478779.483118   \n",
              "3  4.906966e+06  2.666797e+06  849022.003115 -913916.261320  482169.311251   \n",
              "4  4.661039e+06  2.500823e+06  811603.581161 -865711.081628  465294.693182   \n",
              "5  4.700241e+06  2.540745e+06  815390.932953 -874365.961435  464900.523755   \n",
              "6  4.710237e+06  2.548896e+06  816730.847388 -876464.064002  465327.611556   \n",
              "7  4.651602e+06  2.512060e+06  807361.857277 -865168.574188  460668.416297   \n",
              "8  4.481511e+06  2.434589e+06  775565.065317 -834592.040894  440582.581352   \n",
              "9  4.404827e+06  2.395336e+06  761915.321866 -820467.378937  432495.125229   \n",
              "\n",
              "         kolom_6  \n",
              "0 -977401.372796  \n",
              "1 -956552.824438  \n",
              "2 -943792.034323  \n",
              "3 -917674.242381  \n",
              "4 -926973.413908  \n",
              "5 -902461.374287  \n",
              "6 -899679.745446  \n",
              "7 -897219.710945  \n",
              "8 -839787.342860  \n",
              "9 -821299.084874  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-30ce3266-d098-4264-b1b5-03f3ce6326f3\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>kolom_1</th>\n",
              "      <th>kolom_2</th>\n",
              "      <th>kolom_3</th>\n",
              "      <th>kolom_4</th>\n",
              "      <th>kolom_5</th>\n",
              "      <th>kolom_6</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>4.930337e+06</td>\n",
              "      <td>2.647119e+06</td>\n",
              "      <td>858181.581227</td>\n",
              "      <td>-915880.420576</td>\n",
              "      <td>491754.223894</td>\n",
              "      <td>-977401.372796</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>4.823363e+06</td>\n",
              "      <td>2.589492e+06</td>\n",
              "      <td>839599.877320</td>\n",
              "      <td>-896014.774586</td>\n",
              "      <td>481137.330464</td>\n",
              "      <td>-956552.824438</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>4.813960e+06</td>\n",
              "      <td>2.590819e+06</td>\n",
              "      <td>836978.868278</td>\n",
              "      <td>-894719.594267</td>\n",
              "      <td>478779.483118</td>\n",
              "      <td>-943792.034323</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4.906966e+06</td>\n",
              "      <td>2.666797e+06</td>\n",
              "      <td>849022.003115</td>\n",
              "      <td>-913916.261320</td>\n",
              "      <td>482169.311251</td>\n",
              "      <td>-917674.242381</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>4.661039e+06</td>\n",
              "      <td>2.500823e+06</td>\n",
              "      <td>811603.581161</td>\n",
              "      <td>-865711.081628</td>\n",
              "      <td>465294.693182</td>\n",
              "      <td>-926973.413908</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>4.700241e+06</td>\n",
              "      <td>2.540745e+06</td>\n",
              "      <td>815390.932953</td>\n",
              "      <td>-874365.961435</td>\n",
              "      <td>464900.523755</td>\n",
              "      <td>-902461.374287</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>4.710237e+06</td>\n",
              "      <td>2.548896e+06</td>\n",
              "      <td>816730.847388</td>\n",
              "      <td>-876464.064002</td>\n",
              "      <td>465327.611556</td>\n",
              "      <td>-899679.745446</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>4.651602e+06</td>\n",
              "      <td>2.512060e+06</td>\n",
              "      <td>807361.857277</td>\n",
              "      <td>-865168.574188</td>\n",
              "      <td>460668.416297</td>\n",
              "      <td>-897219.710945</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>4.481511e+06</td>\n",
              "      <td>2.434589e+06</td>\n",
              "      <td>775565.065317</td>\n",
              "      <td>-834592.040894</td>\n",
              "      <td>440582.581352</td>\n",
              "      <td>-839787.342860</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>4.404827e+06</td>\n",
              "      <td>2.395336e+06</td>\n",
              "      <td>761915.321866</td>\n",
              "      <td>-820467.378937</td>\n",
              "      <td>432495.125229</td>\n",
              "      <td>-821299.084874</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-30ce3266-d098-4264-b1b5-03f3ce6326f3')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-30ce3266-d098-4264-b1b5-03f3ce6326f3 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-30ce3266-d098-4264-b1b5-03f3ce6326f3');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-b161da4e-8d33-4db3-9789-24c173949649\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-b161da4e-8d33-4db3-9789-24c173949649')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-b161da4e-8d33-4db3-9789-24c173949649 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df_kmeans_pca5",
              "summary": "{\n  \"name\": \"df_kmeans_pca5\",\n  \"rows\": 1500,\n  \"fields\": [\n    {\n      \"column\": \"kolom_1\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 17108550.337756816,\n        \"min\": 12982.798717753756,\n        \"max\": 511841438.17272526,\n        \"num_unique_values\": 1500,\n        \"samples\": [\n          1010732.3211805837,\n          237393.65903547007,\n          48974.31965503492\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"kolom_2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 9205376.301755529,\n        \"min\": 6993.595843534633,\n        \"max\": 274625801.1045858,\n        \"num_unique_values\": 1500,\n        \"samples\": [\n          544003.5145944789,\n          131235.82883162567,\n          26712.51978878035\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"kolom_3\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2974921.0966721266,\n        \"min\": 2300.1377534207572,\n        \"max\": 89120698.99015093,\n        \"num_unique_values\": 1500,\n        \"samples\": [\n          175711.4316472879,\n          40757.38801835832,\n          8498.34955886448\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"kolom_4\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3179874.7735756664,\n        \"min\": -95077280.00963949,\n        \"max\": -2332.166977430431,\n        \"num_unique_values\": 1500,\n        \"samples\": [\n          -187756.98615058177,\n          -44318.59846000055,\n          -9068.26754771498\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"kolom_5\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1702345.3179414961,\n        \"min\": 1298.7663172214266,\n        \"max\": 51096276.43502663,\n        \"num_unique_values\": 1500,\n        \"samples\": [\n          100464.7660415067,\n          22837.582283031235,\n          4796.239281194658\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"kolom_6\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3363369.7457250883,\n        \"min\": -101789413.8020606,\n        \"max\": 2517249.143787328,\n        \"num_unique_values\": 1500,\n        \"samples\": [\n          -198083.81834992394,\n          -40616.758503221055,\n          -9005.844239095377\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 252
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.cluster import KMeans\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Inisialisasi model KMeans dengan 3 kluster\n",
        "kmeans = KMeans(n_clusters=3, random_state=0)\n",
        "\n",
        "# Melakukan klustering pada dataframe 'df_minmax_multiplied'\n",
        "kmeans.fit(df_kmeans_pca5)\n",
        "\n",
        "# Mendapatkan label kluster untuk setiap data point\n",
        "labels = kmeans.labels_\n",
        "\n",
        "# Menambahkan kolom 'cluster' ke dataframe\n",
        "df_kmeans_pca5['cluster'] = labels\n",
        "\n",
        "# Plot hasil klustering (contoh menggunakan dua kolom pertama)\n",
        "plt.scatter(df_kmeans_pca5['kolom_1'], df_kmeans_pca5['kolom_2'], c=labels, cmap='viridis')\n",
        "plt.xlabel('kolom_1')\n",
        "plt.ylabel('kolom_2')\n",
        "plt.title('Hasil Klustering K-Means (3 Kluster)')\n",
        "plt.legend()\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5qOVJiMnvfq2",
        "outputId": "ea1c4069-2976-4b7c-9af4-303ef84b2cca"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/tmp/ipython-input-2964619080.py:21: UserWarning: No artists with labels found to put in legend.  Note that artists whose label start with an underscore are ignored when legend() is called with no argument.\n",
            "  plt.legend()\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# prompt: lakukan evaluasi shiloutte coefficient pada  df_kmeans_minmax\n",
        "\n",
        "from sklearn.metrics import silhouette_score\n",
        "\n",
        "# Calculate Silhouette Coefficient\n",
        "silhouette_avg_pca5 = silhouette_score(df_kmeans_pca5.drop('cluster', axis=1), df_kmeans_pca5['cluster'])\n",
        "\n",
        "print(f\"Silhouette Coefficient: {silhouette_avg_pca5}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "jWjoPNRUviUp",
        "outputId": "d8725d56-46f0-4e20-d24d-438683dc002f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Silhouette Coefficient: 0.9905388502871597\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(df_kmeans_pca5['cluster'].value_counts())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "w20Qz74Ew7x5",
        "outputId": "71374f60-275f-47cf-912f-21fae3e6cab5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "cluster\n",
            "0    1496\n",
            "1       3\n",
            "2       1\n",
            "Name: count, dtype: int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# The method that has the best \"Silhouette Coefficient\" is the Max-Min method, but the method that has the least outlier data is the \"IQR\" method, therefore the \"IQR\" method will be used."
      ],
      "metadata": {
        "id": "uICccz8ZXfYw"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Cluster 4"
      ],
      "metadata": {
        "id": "OwUIaZR9qZfn"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df_kmeans4 = df_pca4_multiplied.copy()\n",
        "df_kmeans4.head(10)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gQVsH2ZjqpUP",
        "outputId": "b001c5ea-124b-4738-f712-d980e1e11e7f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "         kolom_1        kolom_2        kolom_3        kolom_4       kolom_5  \\\n",
              "0  691711.403293  378780.702280  119237.566549 -128971.043389  67303.151021   \n",
              "1  691696.453824  378803.605577  119230.649704 -128986.474890  67295.641209   \n",
              "2  691689.265655  378813.027189  119254.112354 -128968.662202  67310.614204   \n",
              "3  691680.967799  378830.684637  119238.329052 -128974.398479  67299.815722   \n",
              "4  691696.486472  378807.893553  119249.567300 -128953.586104  67303.996028   \n",
              "5  691684.978326  378825.373340  119238.450969 -128969.792209  67299.755432   \n",
              "6  691683.181508  378825.265817  119242.280992 -128972.126660  67310.137409   \n",
              "7  691685.033661  378825.333299  119237.275410 -128970.389830  67300.256836   \n",
              "8  691684.978326  378825.373340  119238.450969 -128969.792209  67299.755432   \n",
              "9  691685.655633  378825.989271  119247.119515 -128956.424193  67302.374796   \n",
              "\n",
              "         kolom_6  \n",
              "0 -124416.623299  \n",
              "1 -124390.400451  \n",
              "2 -124383.181807  \n",
              "3 -124363.255437  \n",
              "4 -124388.594510  \n",
              "5 -124370.256731  \n",
              "6 -124370.199075  \n",
              "7 -124370.326195  \n",
              "8 -124370.256731  \n",
              "9 -124368.149289  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-43024413-e057-43ed-9749-5648cc35bbb4\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>kolom_1</th>\n",
              "      <th>kolom_2</th>\n",
              "      <th>kolom_3</th>\n",
              "      <th>kolom_4</th>\n",
              "      <th>kolom_5</th>\n",
              "      <th>kolom_6</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>691711.403293</td>\n",
              "      <td>378780.702280</td>\n",
              "      <td>119237.566549</td>\n",
              "      <td>-128971.043389</td>\n",
              "      <td>67303.151021</td>\n",
              "      <td>-124416.623299</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>691696.453824</td>\n",
              "      <td>378803.605577</td>\n",
              "      <td>119230.649704</td>\n",
              "      <td>-128986.474890</td>\n",
              "      <td>67295.641209</td>\n",
              "      <td>-124390.400451</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>691689.265655</td>\n",
              "      <td>378813.027189</td>\n",
              "      <td>119254.112354</td>\n",
              "      <td>-128968.662202</td>\n",
              "      <td>67310.614204</td>\n",
              "      <td>-124383.181807</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>691680.967799</td>\n",
              "      <td>378830.684637</td>\n",
              "      <td>119238.329052</td>\n",
              "      <td>-128974.398479</td>\n",
              "      <td>67299.815722</td>\n",
              "      <td>-124363.255437</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>691696.486472</td>\n",
              "      <td>378807.893553</td>\n",
              "      <td>119249.567300</td>\n",
              "      <td>-128953.586104</td>\n",
              "      <td>67303.996028</td>\n",
              "      <td>-124388.594510</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>691684.978326</td>\n",
              "      <td>378825.373340</td>\n",
              "      <td>119238.450969</td>\n",
              "      <td>-128969.792209</td>\n",
              "      <td>67299.755432</td>\n",
              "      <td>-124370.256731</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>691683.181508</td>\n",
              "      <td>378825.265817</td>\n",
              "      <td>119242.280992</td>\n",
              "      <td>-128972.126660</td>\n",
              "      <td>67310.137409</td>\n",
              "      <td>-124370.199075</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>691685.033661</td>\n",
              "      <td>378825.333299</td>\n",
              "      <td>119237.275410</td>\n",
              "      <td>-128970.389830</td>\n",
              "      <td>67300.256836</td>\n",
              "      <td>-124370.326195</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>691684.978326</td>\n",
              "      <td>378825.373340</td>\n",
              "      <td>119238.450969</td>\n",
              "      <td>-128969.792209</td>\n",
              "      <td>67299.755432</td>\n",
              "      <td>-124370.256731</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>691685.655633</td>\n",
              "      <td>378825.989271</td>\n",
              "      <td>119247.119515</td>\n",
              "      <td>-128956.424193</td>\n",
              "      <td>67302.374796</td>\n",
              "      <td>-124368.149289</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-43024413-e057-43ed-9749-5648cc35bbb4')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-43024413-e057-43ed-9749-5648cc35bbb4 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-43024413-e057-43ed-9749-5648cc35bbb4');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-3ffe9cc6-201d-412a-b2cd-c0e931e3762b\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-3ffe9cc6-201d-412a-b2cd-c0e931e3762b')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-3ffe9cc6-201d-412a-b2cd-c0e931e3762b button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df_kmeans4",
              "summary": "{\n  \"name\": \"df_kmeans4\",\n  \"rows\": 1500,\n  \"fields\": [\n    {\n      \"column\": \"kolom_1\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 242442.77534267108,\n        \"min\": 12982.798717753756,\n        \"max\": 691711.4032931738,\n        \"num_unique_values\": 1499,\n        \"samples\": [\n          679160.4151713351,\n          202755.79283921968,\n          55920.439417631314\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"kolom_2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 132336.2972404248,\n        \"min\": 6993.595843534633,\n        \"max\": 378845.7243349347,\n        \"num_unique_values\": 1499,\n        \"samples\": [\n          369577.2331697753,\n          109224.55266470514,\n          31902.244580571198\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"kolom_3\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 41854.0230518372,\n        \"min\": 2300.1377534207572,\n        \"max\": 119262.06520469845,\n        \"num_unique_values\": 1499,\n        \"samples\": [\n          117466.2001429634,\n          35263.935937709735,\n          9485.411104423145\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"kolom_4\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 45199.45206384608,\n        \"min\": -129046.46188994986,\n        \"max\": -2332.166977430431,\n        \"num_unique_values\": 1499,\n        \"samples\": [\n          -126447.87849598621,\n          -37619.427530744506,\n          -10451.695349045513\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"kolom_5\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 23693.90658983262,\n        \"min\": 1298.7663172214266,\n        \"max\": 67321.4724053124,\n        \"num_unique_values\": 1499,\n        \"samples\": [\n          66622.55687829237,\n          20138.32366966505,\n          5168.456590566172\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"kolom_6\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 44435.20317189436,\n        \"min\": -129280.8268334821,\n        \"max\": 1977.9833410981612,\n        \"num_unique_values\": 1499,\n        \"samples\": [\n          -126210.32284606188,\n          -39565.12228259586,\n          -7899.290686671501\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 256
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Inisialisasi model KMeans dengan 4 kluster\n",
        "kmeans = KMeans(n_clusters=4, random_state=0)\n",
        "\n",
        "# Melakukan klustering pada dataframe 'df_minmax_multiplied'\n",
        "kmeans.fit(df_kmeans4)\n",
        "\n",
        "# Mendapatkan label kluster untuk setiap data point\n",
        "labels = kmeans.labels_\n",
        "\n",
        "# Menambahkan kolom 'cluster' ke dataframe\n",
        "df_kmeans4['cluster'] = labels\n",
        "\n",
        "# Plot hasil klustering (contoh menggunakan dua kolom pertama)\n",
        "plt.scatter(df_kmeans4['kolom_1'], df_kmeans4['kolom_2'], c=labels, cmap='viridis')\n",
        "plt.xlabel('kolom_1')\n",
        "plt.ylabel('kolom_2')\n",
        "plt.title('Hasil Klustering K-Means (4 Kluster)')\n",
        "plt.legend()\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 527
        },
        "id": "GwYpTvXSuQcv",
        "outputId": "70637f3c-993d-47ba-8489-3b4cabf66acc"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/tmp/ipython-input-995441053.py:18: UserWarning: No artists with labels found to put in legend.  Note that artists whose label start with an underscore are ignored when legend() is called with no argument.\n",
            "  plt.legend()\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_kmeans4"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "id": "fFzYLmNlueS-",
        "outputId": "f991c864-9d9a-442c-e053-26edbe9c4f65"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "            kolom_1        kolom_2        kolom_3        kolom_4  \\\n",
              "0     691711.403293  378780.702280  119237.566549 -128971.043389   \n",
              "1     691696.453824  378803.605577  119230.649704 -128986.474890   \n",
              "2     691689.265655  378813.027189  119254.112354 -128968.662202   \n",
              "3     691680.967799  378830.684637  119238.329052 -128974.398479   \n",
              "4     691696.486472  378807.893553  119249.567300 -128953.586104   \n",
              "...             ...            ...            ...            ...   \n",
              "1495  691681.124131  378826.585090  119241.179707 -128980.890455   \n",
              "1496  691674.246837  378842.752592  119234.659358 -128976.175210   \n",
              "1497  691684.998542  378820.759692  119251.351955 -128968.894802   \n",
              "1498  691694.680717  378804.402692  119249.973514 -128972.388635   \n",
              "1499  691681.191967  378831.575400  119241.329720 -128968.669162   \n",
              "\n",
              "           kolom_5        kolom_6  cluster  \n",
              "0     67303.151021 -124416.623299        1  \n",
              "1     67295.641209 -124390.400451        1  \n",
              "2     67310.614204 -124383.181807        1  \n",
              "3     67299.815722 -124363.255437        1  \n",
              "4     67303.996028 -124388.594510        1  \n",
              "...            ...            ...      ...  \n",
              "1495  67307.942247 -124366.428381        1  \n",
              "1496  67296.686743 -124349.716345        1  \n",
              "1497  67312.637043 -124371.034884        1  \n",
              "1498  67308.481195 -124387.894692        1  \n",
              "1499  67297.773909 -124363.235435        1  \n",
              "\n",
              "[1500 rows x 7 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-03c25bd5-f2cc-4901-af33-22224c7358cc\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>kolom_1</th>\n",
              "      <th>kolom_2</th>\n",
              "      <th>kolom_3</th>\n",
              "      <th>kolom_4</th>\n",
              "      <th>kolom_5</th>\n",
              "      <th>kolom_6</th>\n",
              "      <th>cluster</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>691711.403293</td>\n",
              "      <td>378780.702280</td>\n",
              "      <td>119237.566549</td>\n",
              "      <td>-128971.043389</td>\n",
              "      <td>67303.151021</td>\n",
              "      <td>-124416.623299</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>691696.453824</td>\n",
              "      <td>378803.605577</td>\n",
              "      <td>119230.649704</td>\n",
              "      <td>-128986.474890</td>\n",
              "      <td>67295.641209</td>\n",
              "      <td>-124390.400451</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>691689.265655</td>\n",
              "      <td>378813.027189</td>\n",
              "      <td>119254.112354</td>\n",
              "      <td>-128968.662202</td>\n",
              "      <td>67310.614204</td>\n",
              "      <td>-124383.181807</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>691680.967799</td>\n",
              "      <td>378830.684637</td>\n",
              "      <td>119238.329052</td>\n",
              "      <td>-128974.398479</td>\n",
              "      <td>67299.815722</td>\n",
              "      <td>-124363.255437</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>691696.486472</td>\n",
              "      <td>378807.893553</td>\n",
              "      <td>119249.567300</td>\n",
              "      <td>-128953.586104</td>\n",
              "      <td>67303.996028</td>\n",
              "      <td>-124388.594510</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1495</th>\n",
              "      <td>691681.124131</td>\n",
              "      <td>378826.585090</td>\n",
              "      <td>119241.179707</td>\n",
              "      <td>-128980.890455</td>\n",
              "      <td>67307.942247</td>\n",
              "      <td>-124366.428381</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1496</th>\n",
              "      <td>691674.246837</td>\n",
              "      <td>378842.752592</td>\n",
              "      <td>119234.659358</td>\n",
              "      <td>-128976.175210</td>\n",
              "      <td>67296.686743</td>\n",
              "      <td>-124349.716345</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1497</th>\n",
              "      <td>691684.998542</td>\n",
              "      <td>378820.759692</td>\n",
              "      <td>119251.351955</td>\n",
              "      <td>-128968.894802</td>\n",
              "      <td>67312.637043</td>\n",
              "      <td>-124371.034884</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1498</th>\n",
              "      <td>691694.680717</td>\n",
              "      <td>378804.402692</td>\n",
              "      <td>119249.973514</td>\n",
              "      <td>-128972.388635</td>\n",
              "      <td>67308.481195</td>\n",
              "      <td>-124387.894692</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1499</th>\n",
              "      <td>691681.191967</td>\n",
              "      <td>378831.575400</td>\n",
              "      <td>119241.329720</td>\n",
              "      <td>-128968.669162</td>\n",
              "      <td>67297.773909</td>\n",
              "      <td>-124363.235435</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1500 rows × 7 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-03c25bd5-f2cc-4901-af33-22224c7358cc')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-03c25bd5-f2cc-4901-af33-22224c7358cc button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-03c25bd5-f2cc-4901-af33-22224c7358cc');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-30d0b7b3-17cd-4003-ad3f-03c94115239c\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-30d0b7b3-17cd-4003-ad3f-03c94115239c')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-30d0b7b3-17cd-4003-ad3f-03c94115239c button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "  <div id=\"id_67f181d9-f780-4045-afc4-9235053ae4e2\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df_kmeans4')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_67f181d9-f780-4045-afc4-9235053ae4e2 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df_kmeans4');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df_kmeans4",
              "summary": "{\n  \"name\": \"df_kmeans4\",\n  \"rows\": 1500,\n  \"fields\": [\n    {\n      \"column\": \"kolom_1\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 242442.77534267108,\n        \"min\": 12982.798717753756,\n        \"max\": 691711.4032931738,\n        \"num_unique_values\": 1499,\n        \"samples\": [\n          679160.4151713351,\n          202755.79283921968,\n          55920.439417631314\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"kolom_2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 132336.2972404248,\n        \"min\": 6993.595843534633,\n        \"max\": 378845.7243349347,\n        \"num_unique_values\": 1499,\n        \"samples\": [\n          369577.2331697753,\n          109224.55266470514,\n          31902.244580571198\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"kolom_3\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 41854.0230518372,\n        \"min\": 2300.1377534207572,\n        \"max\": 119262.06520469845,\n        \"num_unique_values\": 1499,\n        \"samples\": [\n          117466.2001429634,\n          35263.935937709735,\n          9485.411104423145\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"kolom_4\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 45199.45206384608,\n        \"min\": -129046.46188994986,\n        \"max\": -2332.166977430431,\n        \"num_unique_values\": 1499,\n        \"samples\": [\n          -126447.87849598621,\n          -37619.427530744506,\n          -10451.695349045513\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"kolom_5\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 23693.90658983262,\n        \"min\": 1298.7663172214266,\n        \"max\": 67321.4724053124,\n        \"num_unique_values\": 1499,\n        \"samples\": [\n          66622.55687829237,\n          20138.32366966505,\n          5168.456590566172\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"kolom_6\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 44435.20317189436,\n        \"min\": -129280.8268334821,\n        \"max\": 1977.9833410981612,\n        \"num_unique_values\": 1499,\n        \"samples\": [\n          -126210.32284606188,\n          -39565.12228259586,\n          -7899.290686671501\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"cluster\",\n      \"properties\": {\n        \"dtype\": \"int32\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          3,\n          2,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 258
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Calculate Silhouette Coefficient\n",
        "silhouette_avg_kmeans4 = silhouette_score(df_kmeans4.drop('cluster', axis=1), df_kmeans4['cluster'])\n",
        "\n",
        "print(f\"Silhouette Coefficient: {silhouette_avg_kmeans4}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hCQecX0vwlfz",
        "outputId": "4ff2e8c2-a29c-4cf4-f27b-04749ec3b7c4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Silhouette Coefficient: 0.7284502343382732\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import files\n",
        "df_hasil_kmeans4 = df.copy()\n",
        "df_hasil_kmeans4['cluster'] = df_kmeans4['cluster']\n",
        "\n",
        "# Download the file\n",
        "df_hasil_kmeans4.to_excel(\"Hasil 4 Kluster.xlsx\", index=False)\n",
        "files.download(\"Hasil 4 Kluster.xlsx\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 17
        },
        "id": "oRr6w0Nwuk1X",
        "outputId": "df881c55-313c-4688-cc9f-fe2cd65d9a9e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ],
            "application/javascript": [
              "\n",
              "    async function download(id, filename, size) {\n",
              "      if (!google.colab.kernel.accessAllowed) {\n",
              "        return;\n",
              "      }\n",
              "      const div = document.createElement('div');\n",
              "      const label = document.createElement('label');\n",
              "      label.textContent = `Downloading \"${filename}\": `;\n",
              "      div.appendChild(label);\n",
              "      const progress = document.createElement('progress');\n",
              "      progress.max = size;\n",
              "      div.appendChild(progress);\n",
              "      document.body.appendChild(div);\n",
              "\n",
              "      const buffers = [];\n",
              "      let downloaded = 0;\n",
              "\n",
              "      const channel = await google.colab.kernel.comms.open(id);\n",
              "      // Send a message to notify the kernel that we're ready.\n",
              "      channel.send({})\n",
              "\n",
              "      for await (const message of channel.messages) {\n",
              "        // Send a message to notify the kernel that we're ready.\n",
              "        channel.send({})\n",
              "        if (message.buffers) {\n",
              "          for (const buffer of message.buffers) {\n",
              "            buffers.push(buffer);\n",
              "            downloaded += buffer.byteLength;\n",
              "            progress.value = downloaded;\n",
              "          }\n",
              "        }\n",
              "      }\n",
              "      const blob = new Blob(buffers, {type: 'application/binary'});\n",
              "      const a = document.createElement('a');\n",
              "      a.href = window.URL.createObjectURL(blob);\n",
              "      a.download = filename;\n",
              "      div.appendChild(a);\n",
              "      a.click();\n",
              "      div.remove();\n",
              "    }\n",
              "  "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ],
            "application/javascript": [
              "download(\"download_a39f9b2f-3926-462a-8484-dbd309ede2f6\", \"Hasil 4 Kluster.xlsx\", 165650)"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#Cluster 5\n"
      ],
      "metadata": {
        "id": "t6Olld4eqbC8"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df_kmeans5 = df_pca4_multiplied.copy()\n",
        "df_kmeans5.head(10)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 363
        },
        "id": "vqhtdX8yqps3",
        "outputId": "4b85a257-d2af-4c85-94c7-1e39728fb5da"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "         kolom_1        kolom_2        kolom_3        kolom_4       kolom_5  \\\n",
              "0  691711.403293  378780.702280  119237.566549 -128971.043389  67303.151021   \n",
              "1  691696.453824  378803.605577  119230.649704 -128986.474890  67295.641209   \n",
              "2  691689.265655  378813.027189  119254.112354 -128968.662202  67310.614204   \n",
              "3  691680.967799  378830.684637  119238.329052 -128974.398479  67299.815722   \n",
              "4  691696.486472  378807.893553  119249.567300 -128953.586104  67303.996028   \n",
              "5  691684.978326  378825.373340  119238.450969 -128969.792209  67299.755432   \n",
              "6  691683.181508  378825.265817  119242.280992 -128972.126660  67310.137409   \n",
              "7  691685.033661  378825.333299  119237.275410 -128970.389830  67300.256836   \n",
              "8  691684.978326  378825.373340  119238.450969 -128969.792209  67299.755432   \n",
              "9  691685.655633  378825.989271  119247.119515 -128956.424193  67302.374796   \n",
              "\n",
              "         kolom_6  \n",
              "0 -124416.623299  \n",
              "1 -124390.400451  \n",
              "2 -124383.181807  \n",
              "3 -124363.255437  \n",
              "4 -124388.594510  \n",
              "5 -124370.256731  \n",
              "6 -124370.199075  \n",
              "7 -124370.326195  \n",
              "8 -124370.256731  \n",
              "9 -124368.149289  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-ae594f61-b41d-45d5-af0d-2c8efb1058bb\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>kolom_1</th>\n",
              "      <th>kolom_2</th>\n",
              "      <th>kolom_3</th>\n",
              "      <th>kolom_4</th>\n",
              "      <th>kolom_5</th>\n",
              "      <th>kolom_6</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>691711.403293</td>\n",
              "      <td>378780.702280</td>\n",
              "      <td>119237.566549</td>\n",
              "      <td>-128971.043389</td>\n",
              "      <td>67303.151021</td>\n",
              "      <td>-124416.623299</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>691696.453824</td>\n",
              "      <td>378803.605577</td>\n",
              "      <td>119230.649704</td>\n",
              "      <td>-128986.474890</td>\n",
              "      <td>67295.641209</td>\n",
              "      <td>-124390.400451</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>691689.265655</td>\n",
              "      <td>378813.027189</td>\n",
              "      <td>119254.112354</td>\n",
              "      <td>-128968.662202</td>\n",
              "      <td>67310.614204</td>\n",
              "      <td>-124383.181807</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>691680.967799</td>\n",
              "      <td>378830.684637</td>\n",
              "      <td>119238.329052</td>\n",
              "      <td>-128974.398479</td>\n",
              "      <td>67299.815722</td>\n",
              "      <td>-124363.255437</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>691696.486472</td>\n",
              "      <td>378807.893553</td>\n",
              "      <td>119249.567300</td>\n",
              "      <td>-128953.586104</td>\n",
              "      <td>67303.996028</td>\n",
              "      <td>-124388.594510</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>691684.978326</td>\n",
              "      <td>378825.373340</td>\n",
              "      <td>119238.450969</td>\n",
              "      <td>-128969.792209</td>\n",
              "      <td>67299.755432</td>\n",
              "      <td>-124370.256731</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>691683.181508</td>\n",
              "      <td>378825.265817</td>\n",
              "      <td>119242.280992</td>\n",
              "      <td>-128972.126660</td>\n",
              "      <td>67310.137409</td>\n",
              "      <td>-124370.199075</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>691685.033661</td>\n",
              "      <td>378825.333299</td>\n",
              "      <td>119237.275410</td>\n",
              "      <td>-128970.389830</td>\n",
              "      <td>67300.256836</td>\n",
              "      <td>-124370.326195</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>691684.978326</td>\n",
              "      <td>378825.373340</td>\n",
              "      <td>119238.450969</td>\n",
              "      <td>-128969.792209</td>\n",
              "      <td>67299.755432</td>\n",
              "      <td>-124370.256731</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>691685.655633</td>\n",
              "      <td>378825.989271</td>\n",
              "      <td>119247.119515</td>\n",
              "      <td>-128956.424193</td>\n",
              "      <td>67302.374796</td>\n",
              "      <td>-124368.149289</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ae594f61-b41d-45d5-af0d-2c8efb1058bb')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-ae594f61-b41d-45d5-af0d-2c8efb1058bb button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-ae594f61-b41d-45d5-af0d-2c8efb1058bb');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-b855c182-5136-4890-8465-b11c950dcfa1\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-b855c182-5136-4890-8465-b11c950dcfa1')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-b855c182-5136-4890-8465-b11c950dcfa1 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df_kmeans5",
              "summary": "{\n  \"name\": \"df_kmeans5\",\n  \"rows\": 1500,\n  \"fields\": [\n    {\n      \"column\": \"kolom_1\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 242442.77534267108,\n        \"min\": 12982.798717753756,\n        \"max\": 691711.4032931738,\n        \"num_unique_values\": 1499,\n        \"samples\": [\n          679160.4151713351,\n          202755.79283921968,\n          55920.439417631314\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"kolom_2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 132336.2972404248,\n        \"min\": 6993.595843534633,\n        \"max\": 378845.7243349347,\n        \"num_unique_values\": 1499,\n        \"samples\": [\n          369577.2331697753,\n          109224.55266470514,\n          31902.244580571198\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"kolom_3\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 41854.0230518372,\n        \"min\": 2300.1377534207572,\n        \"max\": 119262.06520469845,\n        \"num_unique_values\": 1499,\n        \"samples\": [\n          117466.2001429634,\n          35263.935937709735,\n          9485.411104423145\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"kolom_4\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 45199.45206384608,\n        \"min\": -129046.46188994986,\n        \"max\": -2332.166977430431,\n        \"num_unique_values\": 1499,\n        \"samples\": [\n          -126447.87849598621,\n          -37619.427530744506,\n          -10451.695349045513\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"kolom_5\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 23693.90658983262,\n        \"min\": 1298.7663172214266,\n        \"max\": 67321.4724053124,\n        \"num_unique_values\": 1499,\n        \"samples\": [\n          66622.55687829237,\n          20138.32366966505,\n          5168.456590566172\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"kolom_6\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 44435.20317189436,\n        \"min\": -129280.8268334821,\n        \"max\": 1977.9833410981612,\n        \"num_unique_values\": 1499,\n        \"samples\": [\n          -126210.32284606188,\n          -39565.12228259586,\n          -7899.290686671501\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 261
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Inisialisasi model KMeans dengan 4 kluster\n",
        "kmeans = KMeans(n_clusters=5, random_state=0)\n",
        "\n",
        "# Melakukan klustering pada dataframe 'df_minmax_multiplied'\n",
        "kmeans.fit(df_kmeans5)\n",
        "\n",
        "# Mendapatkan label kluster untuk setiap data point\n",
        "labels = kmeans.labels_\n",
        "\n",
        "# Menambahkan kolom 'cluster' ke dataframe\n",
        "df_kmeans5['cluster'] = labels\n",
        "\n",
        "# Plot hasil klustering (contoh menggunakan dua kolom pertama)\n",
        "plt.scatter(df_kmeans5['kolom_1'], df_kmeans5['kolom_2'], c=labels, cmap='viridis')\n",
        "plt.xlabel('kolom_1')\n",
        "plt.ylabel('kolom_2')\n",
        "plt.title('Hasil Klustering K-Means (5 Kluster)')\n",
        "plt.legend()\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 527
        },
        "id": "Fd0Sc93Mu5p-",
        "outputId": "a0f64f48-9ea8-45a2-de8b-f63942682d66"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/tmp/ipython-input-1965352407.py:18: UserWarning: No artists with labels found to put in legend.  Note that artists whose label start with an underscore are ignored when legend() is called with no argument.\n",
            "  plt.legend()\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_kmeans5"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "id": "9KMYEzwyvF5u",
        "outputId": "3856a8d0-0663-4bd5-cdb5-65f27c1265a9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "            kolom_1        kolom_2        kolom_3        kolom_4  \\\n",
              "0     691711.403293  378780.702280  119237.566549 -128971.043389   \n",
              "1     691696.453824  378803.605577  119230.649704 -128986.474890   \n",
              "2     691689.265655  378813.027189  119254.112354 -128968.662202   \n",
              "3     691680.967799  378830.684637  119238.329052 -128974.398479   \n",
              "4     691696.486472  378807.893553  119249.567300 -128953.586104   \n",
              "...             ...            ...            ...            ...   \n",
              "1495  691681.124131  378826.585090  119241.179707 -128980.890455   \n",
              "1496  691674.246837  378842.752592  119234.659358 -128976.175210   \n",
              "1497  691684.998542  378820.759692  119251.351955 -128968.894802   \n",
              "1498  691694.680717  378804.402692  119249.973514 -128972.388635   \n",
              "1499  691681.191967  378831.575400  119241.329720 -128968.669162   \n",
              "\n",
              "           kolom_5        kolom_6  cluster  \n",
              "0     67303.151021 -124416.623299        1  \n",
              "1     67295.641209 -124390.400451        1  \n",
              "2     67310.614204 -124383.181807        1  \n",
              "3     67299.815722 -124363.255437        1  \n",
              "4     67303.996028 -124388.594510        1  \n",
              "...            ...            ...      ...  \n",
              "1495  67307.942247 -124366.428381        1  \n",
              "1496  67296.686743 -124349.716345        1  \n",
              "1497  67312.637043 -124371.034884        1  \n",
              "1498  67308.481195 -124387.894692        1  \n",
              "1499  67297.773909 -124363.235435        1  \n",
              "\n",
              "[1500 rows x 7 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-dccd0b5e-6b9b-4b31-818f-c346eba11fc0\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>kolom_1</th>\n",
              "      <th>kolom_2</th>\n",
              "      <th>kolom_3</th>\n",
              "      <th>kolom_4</th>\n",
              "      <th>kolom_5</th>\n",
              "      <th>kolom_6</th>\n",
              "      <th>cluster</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>691711.403293</td>\n",
              "      <td>378780.702280</td>\n",
              "      <td>119237.566549</td>\n",
              "      <td>-128971.043389</td>\n",
              "      <td>67303.151021</td>\n",
              "      <td>-124416.623299</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>691696.453824</td>\n",
              "      <td>378803.605577</td>\n",
              "      <td>119230.649704</td>\n",
              "      <td>-128986.474890</td>\n",
              "      <td>67295.641209</td>\n",
              "      <td>-124390.400451</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>691689.265655</td>\n",
              "      <td>378813.027189</td>\n",
              "      <td>119254.112354</td>\n",
              "      <td>-128968.662202</td>\n",
              "      <td>67310.614204</td>\n",
              "      <td>-124383.181807</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>691680.967799</td>\n",
              "      <td>378830.684637</td>\n",
              "      <td>119238.329052</td>\n",
              "      <td>-128974.398479</td>\n",
              "      <td>67299.815722</td>\n",
              "      <td>-124363.255437</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>691696.486472</td>\n",
              "      <td>378807.893553</td>\n",
              "      <td>119249.567300</td>\n",
              "      <td>-128953.586104</td>\n",
              "      <td>67303.996028</td>\n",
              "      <td>-124388.594510</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1495</th>\n",
              "      <td>691681.124131</td>\n",
              "      <td>378826.585090</td>\n",
              "      <td>119241.179707</td>\n",
              "      <td>-128980.890455</td>\n",
              "      <td>67307.942247</td>\n",
              "      <td>-124366.428381</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1496</th>\n",
              "      <td>691674.246837</td>\n",
              "      <td>378842.752592</td>\n",
              "      <td>119234.659358</td>\n",
              "      <td>-128976.175210</td>\n",
              "      <td>67296.686743</td>\n",
              "      <td>-124349.716345</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1497</th>\n",
              "      <td>691684.998542</td>\n",
              "      <td>378820.759692</td>\n",
              "      <td>119251.351955</td>\n",
              "      <td>-128968.894802</td>\n",
              "      <td>67312.637043</td>\n",
              "      <td>-124371.034884</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1498</th>\n",
              "      <td>691694.680717</td>\n",
              "      <td>378804.402692</td>\n",
              "      <td>119249.973514</td>\n",
              "      <td>-128972.388635</td>\n",
              "      <td>67308.481195</td>\n",
              "      <td>-124387.894692</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1499</th>\n",
              "      <td>691681.191967</td>\n",
              "      <td>378831.575400</td>\n",
              "      <td>119241.329720</td>\n",
              "      <td>-128968.669162</td>\n",
              "      <td>67297.773909</td>\n",
              "      <td>-124363.235435</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1500 rows × 7 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-dccd0b5e-6b9b-4b31-818f-c346eba11fc0')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-dccd0b5e-6b9b-4b31-818f-c346eba11fc0 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-dccd0b5e-6b9b-4b31-818f-c346eba11fc0');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-58f374d8-5d42-4f9f-a5a2-d1a6ed0a85f3\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-58f374d8-5d42-4f9f-a5a2-d1a6ed0a85f3')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-58f374d8-5d42-4f9f-a5a2-d1a6ed0a85f3 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "  <div id=\"id_6b5f0528-c962-4b4b-b7a5-878b0a552da8\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df_kmeans5')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_6b5f0528-c962-4b4b-b7a5-878b0a552da8 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df_kmeans5');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df_kmeans5",
              "summary": "{\n  \"name\": \"df_kmeans5\",\n  \"rows\": 1500,\n  \"fields\": [\n    {\n      \"column\": \"kolom_1\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 242442.77534267108,\n        \"min\": 12982.798717753756,\n        \"max\": 691711.4032931738,\n        \"num_unique_values\": 1499,\n        \"samples\": [\n          679160.4151713351,\n          202755.79283921968,\n          55920.439417631314\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"kolom_2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 132336.2972404248,\n        \"min\": 6993.595843534633,\n        \"max\": 378845.7243349347,\n        \"num_unique_values\": 1499,\n        \"samples\": [\n          369577.2331697753,\n          109224.55266470514,\n          31902.244580571198\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"kolom_3\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 41854.0230518372,\n        \"min\": 2300.1377534207572,\n        \"max\": 119262.06520469845,\n        \"num_unique_values\": 1499,\n        \"samples\": [\n          117466.2001429634,\n          35263.935937709735,\n          9485.411104423145\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"kolom_4\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 45199.45206384608,\n        \"min\": -129046.46188994986,\n        \"max\": -2332.166977430431,\n        \"num_unique_values\": 1499,\n        \"samples\": [\n          -126447.87849598621,\n          -37619.427530744506,\n          -10451.695349045513\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"kolom_5\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 23693.90658983262,\n        \"min\": 1298.7663172214266,\n        \"max\": 67321.4724053124,\n        \"num_unique_values\": 1499,\n        \"samples\": [\n          66622.55687829237,\n          20138.32366966505,\n          5168.456590566172\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"kolom_6\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 44435.20317189436,\n        \"min\": -129280.8268334821,\n        \"max\": 1977.9833410981612,\n        \"num_unique_values\": 1499,\n        \"samples\": [\n          -126210.32284606188,\n          -39565.12228259586,\n          -7899.290686671501\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"cluster\",\n      \"properties\": {\n        \"dtype\": \"int32\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          3,\n          4,\n          2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 263
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Calculate Silhouette Coefficient\n",
        "silhouette_avg_kmeans5 = silhouette_score(df_kmeans5.drop('cluster', axis=1), df_kmeans5['cluster'])\n",
        "\n",
        "print(f\"Silhouette Coefficient: {silhouette_avg_kmeans5}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "O1r3Brj9wtuk",
        "outputId": "ee68747c-0968-4349-a2d3-116e30c8db4d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Silhouette Coefficient: 0.6984489730164355\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_hasil_kmeans5 = df.copy()\n",
        "df_hasil_kmeans5['cluster'] = df_kmeans5['cluster']\n",
        "\n",
        "# Download the file\n",
        "df_hasil_kmeans5.to_excel(\"Hasil 5 Kluster.xlsx\", index=False)\n",
        "files.download(\"Hasil 5 Kluster.xlsx\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 17
        },
        "id": "6aBHvCLqMGc-",
        "outputId": "493d46e4-522a-4cae-aa24-192afba65e86"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ],
            "application/javascript": [
              "\n",
              "    async function download(id, filename, size) {\n",
              "      if (!google.colab.kernel.accessAllowed) {\n",
              "        return;\n",
              "      }\n",
              "      const div = document.createElement('div');\n",
              "      const label = document.createElement('label');\n",
              "      label.textContent = `Downloading \"${filename}\": `;\n",
              "      div.appendChild(label);\n",
              "      const progress = document.createElement('progress');\n",
              "      progress.max = size;\n",
              "      div.appendChild(progress);\n",
              "      document.body.appendChild(div);\n",
              "\n",
              "      const buffers = [];\n",
              "      let downloaded = 0;\n",
              "\n",
              "      const channel = await google.colab.kernel.comms.open(id);\n",
              "      // Send a message to notify the kernel that we're ready.\n",
              "      channel.send({})\n",
              "\n",
              "      for await (const message of channel.messages) {\n",
              "        // Send a message to notify the kernel that we're ready.\n",
              "        channel.send({})\n",
              "        if (message.buffers) {\n",
              "          for (const buffer of message.buffers) {\n",
              "            buffers.push(buffer);\n",
              "            downloaded += buffer.byteLength;\n",
              "            progress.value = downloaded;\n",
              "          }\n",
              "        }\n",
              "      }\n",
              "      const blob = new Blob(buffers, {type: 'application/binary'});\n",
              "      const a = document.createElement('a');\n",
              "      a.href = window.URL.createObjectURL(blob);\n",
              "      a.download = filename;\n",
              "      div.appendChild(a);\n",
              "      a.click();\n",
              "      div.remove();\n",
              "    }\n",
              "  "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ],
            "application/javascript": [
              "download(\"download_0e5997b1-1a00-4299-8c2a-0caa4802e1f3\", \"Hasil 5 Kluster.xlsx\", 165638)"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Cluster 6"
      ],
      "metadata": {
        "id": "6aOT9u8mqm-N"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df_kmeans6 = df_pca4_multiplied.copy()\n",
        "df_kmeans6.head(10)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "oeaLIk41qp97",
        "outputId": "ddeb7748-4f28-4d04-bd80-3e115c827f6f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "         kolom_1        kolom_2        kolom_3        kolom_4       kolom_5  \\\n",
              "0  691711.403293  378780.702280  119237.566549 -128971.043389  67303.151021   \n",
              "1  691696.453824  378803.605577  119230.649704 -128986.474890  67295.641209   \n",
              "2  691689.265655  378813.027189  119254.112354 -128968.662202  67310.614204   \n",
              "3  691680.967799  378830.684637  119238.329052 -128974.398479  67299.815722   \n",
              "4  691696.486472  378807.893553  119249.567300 -128953.586104  67303.996028   \n",
              "5  691684.978326  378825.373340  119238.450969 -128969.792209  67299.755432   \n",
              "6  691683.181508  378825.265817  119242.280992 -128972.126660  67310.137409   \n",
              "7  691685.033661  378825.333299  119237.275410 -128970.389830  67300.256836   \n",
              "8  691684.978326  378825.373340  119238.450969 -128969.792209  67299.755432   \n",
              "9  691685.655633  378825.989271  119247.119515 -128956.424193  67302.374796   \n",
              "\n",
              "         kolom_6  \n",
              "0 -124416.623299  \n",
              "1 -124390.400451  \n",
              "2 -124383.181807  \n",
              "3 -124363.255437  \n",
              "4 -124388.594510  \n",
              "5 -124370.256731  \n",
              "6 -124370.199075  \n",
              "7 -124370.326195  \n",
              "8 -124370.256731  \n",
              "9 -124368.149289  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-b9b6c457-7ff9-4a7d-ac99-a9e9cb61dfd5\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>kolom_1</th>\n",
              "      <th>kolom_2</th>\n",
              "      <th>kolom_3</th>\n",
              "      <th>kolom_4</th>\n",
              "      <th>kolom_5</th>\n",
              "      <th>kolom_6</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>691711.403293</td>\n",
              "      <td>378780.702280</td>\n",
              "      <td>119237.566549</td>\n",
              "      <td>-128971.043389</td>\n",
              "      <td>67303.151021</td>\n",
              "      <td>-124416.623299</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>691696.453824</td>\n",
              "      <td>378803.605577</td>\n",
              "      <td>119230.649704</td>\n",
              "      <td>-128986.474890</td>\n",
              "      <td>67295.641209</td>\n",
              "      <td>-124390.400451</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>691689.265655</td>\n",
              "      <td>378813.027189</td>\n",
              "      <td>119254.112354</td>\n",
              "      <td>-128968.662202</td>\n",
              "      <td>67310.614204</td>\n",
              "      <td>-124383.181807</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>691680.967799</td>\n",
              "      <td>378830.684637</td>\n",
              "      <td>119238.329052</td>\n",
              "      <td>-128974.398479</td>\n",
              "      <td>67299.815722</td>\n",
              "      <td>-124363.255437</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>691696.486472</td>\n",
              "      <td>378807.893553</td>\n",
              "      <td>119249.567300</td>\n",
              "      <td>-128953.586104</td>\n",
              "      <td>67303.996028</td>\n",
              "      <td>-124388.594510</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>691684.978326</td>\n",
              "      <td>378825.373340</td>\n",
              "      <td>119238.450969</td>\n",
              "      <td>-128969.792209</td>\n",
              "      <td>67299.755432</td>\n",
              "      <td>-124370.256731</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>691683.181508</td>\n",
              "      <td>378825.265817</td>\n",
              "      <td>119242.280992</td>\n",
              "      <td>-128972.126660</td>\n",
              "      <td>67310.137409</td>\n",
              "      <td>-124370.199075</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>691685.033661</td>\n",
              "      <td>378825.333299</td>\n",
              "      <td>119237.275410</td>\n",
              "      <td>-128970.389830</td>\n",
              "      <td>67300.256836</td>\n",
              "      <td>-124370.326195</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>691684.978326</td>\n",
              "      <td>378825.373340</td>\n",
              "      <td>119238.450969</td>\n",
              "      <td>-128969.792209</td>\n",
              "      <td>67299.755432</td>\n",
              "      <td>-124370.256731</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>691685.655633</td>\n",
              "      <td>378825.989271</td>\n",
              "      <td>119247.119515</td>\n",
              "      <td>-128956.424193</td>\n",
              "      <td>67302.374796</td>\n",
              "      <td>-124368.149289</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b9b6c457-7ff9-4a7d-ac99-a9e9cb61dfd5')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-b9b6c457-7ff9-4a7d-ac99-a9e9cb61dfd5 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-b9b6c457-7ff9-4a7d-ac99-a9e9cb61dfd5');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-4ed51b06-13ac-43f1-a5f8-dd94f5b3cdd0\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-4ed51b06-13ac-43f1-a5f8-dd94f5b3cdd0')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-4ed51b06-13ac-43f1-a5f8-dd94f5b3cdd0 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df_kmeans6",
              "summary": "{\n  \"name\": \"df_kmeans6\",\n  \"rows\": 1500,\n  \"fields\": [\n    {\n      \"column\": \"kolom_1\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 242442.77534267108,\n        \"min\": 12982.798717753756,\n        \"max\": 691711.4032931738,\n        \"num_unique_values\": 1499,\n        \"samples\": [\n          679160.4151713351,\n          202755.79283921968,\n          55920.439417631314\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"kolom_2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 132336.2972404248,\n        \"min\": 6993.595843534633,\n        \"max\": 378845.7243349347,\n        \"num_unique_values\": 1499,\n        \"samples\": [\n          369577.2331697753,\n          109224.55266470514,\n          31902.244580571198\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"kolom_3\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 41854.0230518372,\n        \"min\": 2300.1377534207572,\n        \"max\": 119262.06520469845,\n        \"num_unique_values\": 1499,\n        \"samples\": [\n          117466.2001429634,\n          35263.935937709735,\n          9485.411104423145\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"kolom_4\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 45199.45206384608,\n        \"min\": -129046.46188994986,\n        \"max\": -2332.166977430431,\n        \"num_unique_values\": 1499,\n        \"samples\": [\n          -126447.87849598621,\n          -37619.427530744506,\n          -10451.695349045513\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"kolom_5\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 23693.90658983262,\n        \"min\": 1298.7663172214266,\n        \"max\": 67321.4724053124,\n        \"num_unique_values\": 1499,\n        \"samples\": [\n          66622.55687829237,\n          20138.32366966505,\n          5168.456590566172\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"kolom_6\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 44435.20317189436,\n        \"min\": -129280.8268334821,\n        \"max\": 1977.9833410981612,\n        \"num_unique_values\": 1499,\n        \"samples\": [\n          -126210.32284606188,\n          -39565.12228259586,\n          -7899.290686671501\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 266
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Inisialisasi model KMeans dengan 4 kluster\n",
        "kmeans = KMeans(n_clusters=6, random_state=0)\n",
        "\n",
        "# Melakukan klustering pada dataframe 'df_minmax_multiplied'\n",
        "kmeans.fit(df_kmeans6)\n",
        "\n",
        "# Mendapatkan label kluster untuk setiap data point\n",
        "labels = kmeans.labels_\n",
        "\n",
        "# Menambahkan kolom 'cluster' ke dataframe\n",
        "df_kmeans6['cluster'] = labels\n",
        "\n",
        "# Plot hasil klustering (contoh menggunakan dua kolom pertama)\n",
        "plt.scatter(df_kmeans6['kolom_1'], df_kmeans6['kolom_2'], c=labels, cmap='viridis')\n",
        "plt.xlabel('kolom_1')\n",
        "plt.ylabel('kolom_2')\n",
        "plt.title('Hasil Klustering K-Means (5 Kluster)')\n",
        "plt.legend()\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "3JlyTa7DvzhX",
        "outputId": "2b8a0190-2a91-4d11-a0b2-0b0a36937552"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/tmp/ipython-input-2976951661.py:18: UserWarning: No artists with labels found to put in legend.  Note that artists whose label start with an underscore are ignored when legend() is called with no argument.\n",
            "  plt.legend()\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_kmeans6"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "id": "SLJqGqDov6OX",
        "outputId": "b617bae6-ac53-41c6-f26e-a5e207eb4376"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "            kolom_1        kolom_2        kolom_3        kolom_4  \\\n",
              "0     691711.403293  378780.702280  119237.566549 -128971.043389   \n",
              "1     691696.453824  378803.605577  119230.649704 -128986.474890   \n",
              "2     691689.265655  378813.027189  119254.112354 -128968.662202   \n",
              "3     691680.967799  378830.684637  119238.329052 -128974.398479   \n",
              "4     691696.486472  378807.893553  119249.567300 -128953.586104   \n",
              "...             ...            ...            ...            ...   \n",
              "1495  691681.124131  378826.585090  119241.179707 -128980.890455   \n",
              "1496  691674.246837  378842.752592  119234.659358 -128976.175210   \n",
              "1497  691684.998542  378820.759692  119251.351955 -128968.894802   \n",
              "1498  691694.680717  378804.402692  119249.973514 -128972.388635   \n",
              "1499  691681.191967  378831.575400  119241.329720 -128968.669162   \n",
              "\n",
              "           kolom_5        kolom_6  cluster  \n",
              "0     67303.151021 -124416.623299        5  \n",
              "1     67295.641209 -124390.400451        5  \n",
              "2     67310.614204 -124383.181807        5  \n",
              "3     67299.815722 -124363.255437        5  \n",
              "4     67303.996028 -124388.594510        5  \n",
              "...            ...            ...      ...  \n",
              "1495  67307.942247 -124366.428381        5  \n",
              "1496  67296.686743 -124349.716345        5  \n",
              "1497  67312.637043 -124371.034884        5  \n",
              "1498  67308.481195 -124387.894692        5  \n",
              "1499  67297.773909 -124363.235435        5  \n",
              "\n",
              "[1500 rows x 7 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-37fda10d-98b6-4a47-80c3-4fc76143ae9e\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>kolom_1</th>\n",
              "      <th>kolom_2</th>\n",
              "      <th>kolom_3</th>\n",
              "      <th>kolom_4</th>\n",
              "      <th>kolom_5</th>\n",
              "      <th>kolom_6</th>\n",
              "      <th>cluster</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>691711.403293</td>\n",
              "      <td>378780.702280</td>\n",
              "      <td>119237.566549</td>\n",
              "      <td>-128971.043389</td>\n",
              "      <td>67303.151021</td>\n",
              "      <td>-124416.623299</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>691696.453824</td>\n",
              "      <td>378803.605577</td>\n",
              "      <td>119230.649704</td>\n",
              "      <td>-128986.474890</td>\n",
              "      <td>67295.641209</td>\n",
              "      <td>-124390.400451</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>691689.265655</td>\n",
              "      <td>378813.027189</td>\n",
              "      <td>119254.112354</td>\n",
              "      <td>-128968.662202</td>\n",
              "      <td>67310.614204</td>\n",
              "      <td>-124383.181807</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>691680.967799</td>\n",
              "      <td>378830.684637</td>\n",
              "      <td>119238.329052</td>\n",
              "      <td>-128974.398479</td>\n",
              "      <td>67299.815722</td>\n",
              "      <td>-124363.255437</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>691696.486472</td>\n",
              "      <td>378807.893553</td>\n",
              "      <td>119249.567300</td>\n",
              "      <td>-128953.586104</td>\n",
              "      <td>67303.996028</td>\n",
              "      <td>-124388.594510</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1495</th>\n",
              "      <td>691681.124131</td>\n",
              "      <td>378826.585090</td>\n",
              "      <td>119241.179707</td>\n",
              "      <td>-128980.890455</td>\n",
              "      <td>67307.942247</td>\n",
              "      <td>-124366.428381</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1496</th>\n",
              "      <td>691674.246837</td>\n",
              "      <td>378842.752592</td>\n",
              "      <td>119234.659358</td>\n",
              "      <td>-128976.175210</td>\n",
              "      <td>67296.686743</td>\n",
              "      <td>-124349.716345</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1497</th>\n",
              "      <td>691684.998542</td>\n",
              "      <td>378820.759692</td>\n",
              "      <td>119251.351955</td>\n",
              "      <td>-128968.894802</td>\n",
              "      <td>67312.637043</td>\n",
              "      <td>-124371.034884</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1498</th>\n",
              "      <td>691694.680717</td>\n",
              "      <td>378804.402692</td>\n",
              "      <td>119249.973514</td>\n",
              "      <td>-128972.388635</td>\n",
              "      <td>67308.481195</td>\n",
              "      <td>-124387.894692</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1499</th>\n",
              "      <td>691681.191967</td>\n",
              "      <td>378831.575400</td>\n",
              "      <td>119241.329720</td>\n",
              "      <td>-128968.669162</td>\n",
              "      <td>67297.773909</td>\n",
              "      <td>-124363.235435</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1500 rows × 7 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-37fda10d-98b6-4a47-80c3-4fc76143ae9e')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-37fda10d-98b6-4a47-80c3-4fc76143ae9e button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-37fda10d-98b6-4a47-80c3-4fc76143ae9e');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-564ccc36-aa25-451a-a6d6-c8da9fe26889\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-564ccc36-aa25-451a-a6d6-c8da9fe26889')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-564ccc36-aa25-451a-a6d6-c8da9fe26889 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "  <div id=\"id_600590df-b4b2-4c36-89d6-babde09a0921\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df_kmeans6')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_600590df-b4b2-4c36-89d6-babde09a0921 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df_kmeans6');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df_kmeans6",
              "summary": "{\n  \"name\": \"df_kmeans6\",\n  \"rows\": 1500,\n  \"fields\": [\n    {\n      \"column\": \"kolom_1\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 242442.77534267108,\n        \"min\": 12982.798717753756,\n        \"max\": 691711.4032931738,\n        \"num_unique_values\": 1499,\n        \"samples\": [\n          679160.4151713351,\n          202755.79283921968,\n          55920.439417631314\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"kolom_2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 132336.2972404248,\n        \"min\": 6993.595843534633,\n        \"max\": 378845.7243349347,\n        \"num_unique_values\": 1499,\n        \"samples\": [\n          369577.2331697753,\n          109224.55266470514,\n          31902.244580571198\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"kolom_3\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 41854.0230518372,\n        \"min\": 2300.1377534207572,\n        \"max\": 119262.06520469845,\n        \"num_unique_values\": 1499,\n        \"samples\": [\n          117466.2001429634,\n          35263.935937709735,\n          9485.411104423145\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"kolom_4\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 45199.45206384608,\n        \"min\": -129046.46188994986,\n        \"max\": -2332.166977430431,\n        \"num_unique_values\": 1499,\n        \"samples\": [\n          -126447.87849598621,\n          -37619.427530744506,\n          -10451.695349045513\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"kolom_5\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 23693.90658983262,\n        \"min\": 1298.7663172214266,\n        \"max\": 67321.4724053124,\n        \"num_unique_values\": 1499,\n        \"samples\": [\n          66622.55687829237,\n          20138.32366966505,\n          5168.456590566172\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"kolom_6\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 44435.20317189436,\n        \"min\": -129280.8268334821,\n        \"max\": 1977.9833410981612,\n        \"num_unique_values\": 1499,\n        \"samples\": [\n          -126210.32284606188,\n          -39565.12228259586,\n          -7899.290686671501\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"cluster\",\n      \"properties\": {\n        \"dtype\": \"int32\",\n        \"num_unique_values\": 6,\n        \"samples\": [\n          5,\n          3,\n          4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 268
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Calculate Silhouette Coefficient\n",
        "silhouette_avg_kmeans6 = silhouette_score(df_kmeans6.drop('cluster', axis=1), df_kmeans6['cluster'])\n",
        "\n",
        "print(f\"Silhouette Coefficient: {silhouette_avg_kmeans6}\")"
      ],
      "metadata": {
        "id": "5VcpT3B_wy6k",
        "outputId": "64e80d9e-067b-4a2a-cbf4-7a7d6841e6ef",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Silhouette Coefficient: 0.6967443718501984\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_hasil_kmeans6 = df.copy()\n",
        "df_hasil_kmeans6['cluster'] = df_kmeans6['cluster']\n",
        "\n",
        "# Download the file\n",
        "df_hasil_kmeans6.to_excel(\"Hasil 6 Kluster.xlsx\", index=False)\n",
        "files.download(\"Hasil 6 Kluster.xlsx\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 17
        },
        "id": "ODzUBih3MSUf",
        "outputId": "c2ce6062-d00e-4d50-e80d-b8633cdc638a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ],
            "application/javascript": [
              "\n",
              "    async function download(id, filename, size) {\n",
              "      if (!google.colab.kernel.accessAllowed) {\n",
              "        return;\n",
              "      }\n",
              "      const div = document.createElement('div');\n",
              "      const label = document.createElement('label');\n",
              "      label.textContent = `Downloading \"${filename}\": `;\n",
              "      div.appendChild(label);\n",
              "      const progress = document.createElement('progress');\n",
              "      progress.max = size;\n",
              "      div.appendChild(progress);\n",
              "      document.body.appendChild(div);\n",
              "\n",
              "      const buffers = [];\n",
              "      let downloaded = 0;\n",
              "\n",
              "      const channel = await google.colab.kernel.comms.open(id);\n",
              "      // Send a message to notify the kernel that we're ready.\n",
              "      channel.send({})\n",
              "\n",
              "      for await (const message of channel.messages) {\n",
              "        // Send a message to notify the kernel that we're ready.\n",
              "        channel.send({})\n",
              "        if (message.buffers) {\n",
              "          for (const buffer of message.buffers) {\n",
              "            buffers.push(buffer);\n",
              "            downloaded += buffer.byteLength;\n",
              "            progress.value = downloaded;\n",
              "          }\n",
              "        }\n",
              "      }\n",
              "      const blob = new Blob(buffers, {type: 'application/binary'});\n",
              "      const a = document.createElement('a');\n",
              "      a.href = window.URL.createObjectURL(blob);\n",
              "      a.download = filename;\n",
              "      div.appendChild(a);\n",
              "      a.click();\n",
              "      div.remove();\n",
              "    }\n",
              "  "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ],
            "application/javascript": [
              "download(\"download_b0b3fbb7-6adb-4099-9153-ce0282e5c6e4\", \"Hasil 6 Kluster.xlsx\", 165654)"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_hasil_kmeans3 = df.copy()\n",
        "df_hasil_kmeans3['cluster'] = df_kmeans_pca4['cluster']\n",
        "\n",
        "# Download the file\n",
        "df_hasil_kmeans3.to_excel(\"Hasil 3 Kluster.xlsx\", index=False)\n",
        "files.download(\"Hasil 3 Kluster.xlsx\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 17
        },
        "id": "WGthxHHGMa9M",
        "outputId": "45a8fbd3-4e3e-4a52-867c-e50aa49d3488"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ],
            "application/javascript": [
              "\n",
              "    async function download(id, filename, size) {\n",
              "      if (!google.colab.kernel.accessAllowed) {\n",
              "        return;\n",
              "      }\n",
              "      const div = document.createElement('div');\n",
              "      const label = document.createElement('label');\n",
              "      label.textContent = `Downloading \"${filename}\": `;\n",
              "      div.appendChild(label);\n",
              "      const progress = document.createElement('progress');\n",
              "      progress.max = size;\n",
              "      div.appendChild(progress);\n",
              "      document.body.appendChild(div);\n",
              "\n",
              "      const buffers = [];\n",
              "      let downloaded = 0;\n",
              "\n",
              "      const channel = await google.colab.kernel.comms.open(id);\n",
              "      // Send a message to notify the kernel that we're ready.\n",
              "      channel.send({})\n",
              "\n",
              "      for await (const message of channel.messages) {\n",
              "        // Send a message to notify the kernel that we're ready.\n",
              "        channel.send({})\n",
              "        if (message.buffers) {\n",
              "          for (const buffer of message.buffers) {\n",
              "            buffers.push(buffer);\n",
              "            downloaded += buffer.byteLength;\n",
              "            progress.value = downloaded;\n",
              "          }\n",
              "        }\n",
              "      }\n",
              "      const blob = new Blob(buffers, {type: 'application/binary'});\n",
              "      const a = document.createElement('a');\n",
              "      a.href = window.URL.createObjectURL(blob);\n",
              "      a.download = filename;\n",
              "      div.appendChild(a);\n",
              "      a.click();\n",
              "      div.remove();\n",
              "    }\n",
              "  "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ],
            "application/javascript": [
              "download(\"download_1dfd424f-904c-49f4-a293-b3f33e108abb\", \"Hasil 3 Kluster.xlsx\", 165627)"
            ]
          },
          "metadata": {}
        }
      ]
    }
  ]
}
